"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/starknetkit";
exports.ids = ["vendor-chunks/starknetkit"];
exports.modules = {

/***/ "(ssr)/./node_modules/starknetkit/dist/argentMobile.js":
/*!*******************************************************!*\
  !*** ./node_modules/starknetkit/dist/argentMobile.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArgentMobileConnector: () => (/* reexport safe */ _index_70f373da_js__WEBPACK_IMPORTED_MODULE_1__.A),\n/* harmony export */   isInArgentMobileAppBrowser: () => (/* reexport safe */ _index_70f373da_js__WEBPACK_IMPORTED_MODULE_1__.i)\n/* harmony export */ });\n/* harmony import */ var starknet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! starknet */ \"(ssr)/./node_modules/starknet/dist/index.mjs\");\n/* harmony import */ var _index_70f373da_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-70f373da.js */ \"(ssr)/./node_modules/starknetkit/dist/index-70f373da.js\");\n/* harmony import */ var _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lastConnected-b964dc30.js */ \"(ssr)/./node_modules/starknetkit/dist/lastConnected-b964dc30.js\");\n/* harmony import */ var _publicRcpNodes_be041588_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./publicRcpNodes-be041588.js */ \"(ssr)/./node_modules/starknetkit/dist/publicRcpNodes-be041588.js\");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXRraXQvZGlzdC9hcmdlbnRNb2JpbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtCO0FBQ21DO0FBQ2hCO0FBQ0M7QUFJcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kYXBwLy4vbm9kZV9tb2R1bGVzL3N0YXJrbmV0a2l0L2Rpc3QvYXJnZW50TW9iaWxlLmpzPzUyNWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwic3RhcmtuZXRcIjtcbmltcG9ydCB7IEEgYXMgcCwgaSBhcyBuIH0gZnJvbSBcIi4vaW5kZXgtNzBmMzczZGEuanNcIjtcbmltcG9ydCBcIi4vbGFzdENvbm5lY3RlZC1iOTY0ZGMzMC5qc1wiO1xuaW1wb3J0IFwiLi9wdWJsaWNSY3BOb2Rlcy1iZTA0MTU4OC5qc1wiO1xuZXhwb3J0IHtcbiAgcCBhcyBBcmdlbnRNb2JpbGVDb25uZWN0b3IsXG4gIG4gYXMgaXNJbkFyZ2VudE1vYmlsZUFwcEJyb3dzZXJcbn07XG4iXSwibmFtZXMiOlsiQSIsInAiLCJpIiwibiIsIkFyZ2VudE1vYmlsZUNvbm5lY3RvciIsImlzSW5BcmdlbnRNb2JpbGVBcHBCcm93c2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknetkit/dist/argentMobile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknetkit/dist/index-00451f1a.js":
/*!*********************************************************!*\
  !*** ./node_modules/starknetkit/dist/index-00451f1a.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getStarknetWindowObject: () => (/* binding */ Y_)\n/* harmony export */ });\n/* harmony import */ var _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lastConnected-b964dc30.js */ \"(ssr)/./node_modules/starknetkit/dist/lastConnected-b964dc30.js\");\n/* harmony import */ var starknet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! starknet */ \"(ssr)/./node_modules/starknet/dist/index.mjs\");\n/* harmony import */ var _index_70f373da_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-70f373da.js */ \"(ssr)/./node_modules/starknetkit/dist/index-70f373da.js\");\n/* harmony import */ var _publicRcpNodes_be041588_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./publicRcpNodes-be041588.js */ \"(ssr)/./node_modules/starknetkit/dist/publicRcpNodes-be041588.js\");\nvar Au = Object.defineProperty;\nvar Tu = (i, e, t)=>e in i ? Au(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t;\nvar we = (i, e, t)=>(Tu(i, typeof e != \"symbol\" ? e + \"\" : e, t), t);\n\n\n\n\nvar sn = {\n    exports: {}\n}, $i = typeof Reflect == \"object\" ? Reflect : null, Bn = $i && typeof $i.apply == \"function\" ? $i.apply : function(e, t, s) {\n    return Function.prototype.apply.call(e, t, s);\n}, qs;\n$i && typeof $i.ownKeys == \"function\" ? qs = $i.ownKeys : Object.getOwnPropertySymbols ? qs = function(e) {\n    return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));\n} : qs = function(e) {\n    return Object.getOwnPropertyNames(e);\n};\nfunction Lu(i) {\n    console && console.warn && console.warn(i);\n}\nvar Ya = Number.isNaN || function(e) {\n    return e !== e;\n};\nfunction Oe() {\n    Oe.init.call(this);\n}\nsn.exports = Oe;\nsn.exports.once = zu;\nOe.EventEmitter = Oe;\nOe.prototype._events = void 0;\nOe.prototype._eventsCount = 0;\nOe.prototype._maxListeners = void 0;\nvar kn = 10;\nfunction tr(i) {\n    if (typeof i != \"function\") throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof i);\n}\nObject.defineProperty(Oe, \"defaultMaxListeners\", {\n    enumerable: !0,\n    get: function() {\n        return kn;\n    },\n    set: function(i) {\n        if (typeof i != \"number\" || i < 0 || Ya(i)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + i + \".\");\n        kn = i;\n    }\n});\nOe.init = function() {\n    (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n};\nOe.prototype.setMaxListeners = function(e) {\n    if (typeof e != \"number\" || e < 0 || Ya(e)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + e + \".\");\n    return this._maxListeners = e, this;\n};\nfunction Ja(i) {\n    return i._maxListeners === void 0 ? Oe.defaultMaxListeners : i._maxListeners;\n}\nOe.prototype.getMaxListeners = function() {\n    return Ja(this);\n};\nOe.prototype.emit = function(e) {\n    for(var t = [], s = 1; s < arguments.length; s++)t.push(arguments[s]);\n    var r = e === \"error\", n = this._events;\n    if (n !== void 0) r = r && n.error === void 0;\n    else if (!r) return !1;\n    if (r) {\n        var o;\n        if (t.length > 0 && (o = t[0]), o instanceof Error) throw o;\n        var c = new Error(\"Unhandled error.\" + (o ? \" (\" + o.message + \")\" : \"\"));\n        throw c.context = o, c;\n    }\n    var u = n[e];\n    if (u === void 0) return !1;\n    if (typeof u == \"function\") Bn(u, this, t);\n    else for(var d = u.length, p = tc(u, d), s = 0; s < d; ++s)Bn(p[s], this, t);\n    return !0;\n};\nfunction Qa(i, e, t, s) {\n    var r, n, o;\n    if (tr(t), n = i._events, n === void 0 ? (n = i._events = /* @__PURE__ */ Object.create(null), i._eventsCount = 0) : (n.newListener !== void 0 && (i.emit(\"newListener\", e, t.listener ? t.listener : t), n = i._events), o = n[e]), o === void 0) o = n[e] = t, ++i._eventsCount;\n    else if (typeof o == \"function\" ? o = n[e] = s ? [\n        t,\n        o\n    ] : [\n        o,\n        t\n    ] : s ? o.unshift(t) : o.push(t), r = Ja(i), r > 0 && o.length > r && !o.warned) {\n        o.warned = !0;\n        var c = new Error(\"Possible EventEmitter memory leak detected. \" + o.length + \" \" + String(e) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n        c.name = \"MaxListenersExceededWarning\", c.emitter = i, c.type = e, c.count = o.length, Lu(c);\n    }\n    return i;\n}\nOe.prototype.addListener = function(e, t) {\n    return Qa(this, e, t, !1);\n};\nOe.prototype.on = Oe.prototype.addListener;\nOe.prototype.prependListener = function(e, t) {\n    return Qa(this, e, t, !0);\n};\nfunction Mu() {\n    if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n}\nfunction Xa(i, e, t) {\n    var s = {\n        fired: !1,\n        wrapFn: void 0,\n        target: i,\n        type: e,\n        listener: t\n    }, r = Mu.bind(s);\n    return r.listener = t, s.wrapFn = r, r;\n}\nOe.prototype.once = function(e, t) {\n    return tr(t), this.on(e, Xa(this, e, t)), this;\n};\nOe.prototype.prependOnceListener = function(e, t) {\n    return tr(t), this.prependListener(e, Xa(this, e, t)), this;\n};\nOe.prototype.removeListener = function(e, t) {\n    var s, r, n, o, c;\n    if (tr(t), r = this._events, r === void 0) return this;\n    if (s = r[e], s === void 0) return this;\n    if (s === t || s.listener === t) --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete r[e], r.removeListener && this.emit(\"removeListener\", e, s.listener || t));\n    else if (typeof s != \"function\") {\n        for(n = -1, o = s.length - 1; o >= 0; o--)if (s[o] === t || s[o].listener === t) {\n            c = s[o].listener, n = o;\n            break;\n        }\n        if (n < 0) return this;\n        n === 0 ? s.shift() : qu(s, n), s.length === 1 && (r[e] = s[0]), r.removeListener !== void 0 && this.emit(\"removeListener\", e, c || t);\n    }\n    return this;\n};\nOe.prototype.off = Oe.prototype.removeListener;\nOe.prototype.removeAllListeners = function(e) {\n    var t, s, r;\n    if (s = this._events, s === void 0) return this;\n    if (s.removeListener === void 0) return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : s[e] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete s[e]), this;\n    if (arguments.length === 0) {\n        var n = Object.keys(s), o;\n        for(r = 0; r < n.length; ++r)o = n[r], o !== \"removeListener\" && this.removeAllListeners(o);\n        return this.removeAllListeners(\"removeListener\"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;\n    }\n    if (t = s[e], typeof t == \"function\") this.removeListener(e, t);\n    else if (t !== void 0) for(r = t.length - 1; r >= 0; r--)this.removeListener(e, t[r]);\n    return this;\n};\nfunction Za(i, e, t) {\n    var s = i._events;\n    if (s === void 0) return [];\n    var r = s[e];\n    return r === void 0 ? [] : typeof r == \"function\" ? t ? [\n        r.listener || r\n    ] : [\n        r\n    ] : t ? ju(r) : tc(r, r.length);\n}\nOe.prototype.listeners = function(e) {\n    return Za(this, e, !0);\n};\nOe.prototype.rawListeners = function(e) {\n    return Za(this, e, !1);\n};\nOe.listenerCount = function(i, e) {\n    return typeof i.listenerCount == \"function\" ? i.listenerCount(e) : ec.call(i, e);\n};\nOe.prototype.listenerCount = ec;\nfunction ec(i) {\n    var e = this._events;\n    if (e !== void 0) {\n        var t = e[i];\n        if (typeof t == \"function\") return 1;\n        if (t !== void 0) return t.length;\n    }\n    return 0;\n}\nOe.prototype.eventNames = function() {\n    return this._eventsCount > 0 ? qs(this._events) : [];\n};\nfunction tc(i, e) {\n    for(var t = new Array(e), s = 0; s < e; ++s)t[s] = i[s];\n    return t;\n}\nfunction qu(i, e) {\n    for(; e + 1 < i.length; e++)i[e] = i[e + 1];\n    i.pop();\n}\nfunction ju(i) {\n    for(var e = new Array(i.length), t = 0; t < e.length; ++t)e[t] = i[t].listener || i[t];\n    return e;\n}\nfunction zu(i, e) {\n    return new Promise(function(t, s) {\n        function r(o) {\n            i.removeListener(e, n), s(o);\n        }\n        function n() {\n            typeof i.removeListener == \"function\" && i.removeListener(\"error\", r), t([].slice.call(arguments));\n        }\n        ic(i, e, n, {\n            once: !0\n        }), e !== \"error\" && Ku(i, r, {\n            once: !0\n        });\n    });\n}\nfunction Ku(i, e, t) {\n    typeof i.on == \"function\" && ic(i, \"error\", e, t);\n}\nfunction ic(i, e, t, s) {\n    if (typeof i.on == \"function\") s.once ? i.once(e, t) : i.on(e, t);\n    else if (typeof i.addEventListener == \"function\") i.addEventListener(e, function r(n) {\n        s.once && i.removeEventListener(e, r), t(n);\n    });\n    else throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof i);\n}\nvar We = sn.exports;\nconst ir = /* @__PURE__ */ (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.e)(We);\nvar sr = {}, sc = {\n    exports: {}\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */ (function(i) {\n    var e, t, s, r, n, o, c, u, d, p, b, x, O, _, C, F, K, I, D, y, w, f, a;\n    (function(l) {\n        var L = typeof _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c == \"object\" ? _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c : typeof self == \"object\" ? self : typeof this == \"object\" ? this : {};\n        l(v(L, v(i.exports)));\n        function v(R, $) {\n            return R !== L && (typeof Object.create == \"function\" ? Object.defineProperty(R, \"__esModule\", {\n                value: !0\n            }) : R.__esModule = !0), function(q, m) {\n                return R[q] = $ ? $(q, m) : m;\n            };\n        }\n    })(function(l) {\n        var L = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(v, R) {\n            v.__proto__ = R;\n        } || function(v, R) {\n            for(var $ in R)R.hasOwnProperty($) && (v[$] = R[$]);\n        };\n        e = function(v, R) {\n            L(v, R);\n            function $() {\n                this.constructor = v;\n            }\n            v.prototype = R === null ? Object.create(R) : ($.prototype = R.prototype, new $());\n        }, t = Object.assign || function(v) {\n            for(var R, $ = 1, q = arguments.length; $ < q; $++){\n                R = arguments[$];\n                for(var m in R)Object.prototype.hasOwnProperty.call(R, m) && (v[m] = R[m]);\n            }\n            return v;\n        }, s = function(v, R) {\n            var $ = {};\n            for(var q in v)Object.prototype.hasOwnProperty.call(v, q) && R.indexOf(q) < 0 && ($[q] = v[q]);\n            if (v != null && typeof Object.getOwnPropertySymbols == \"function\") for(var m = 0, q = Object.getOwnPropertySymbols(v); m < q.length; m++)R.indexOf(q[m]) < 0 && Object.prototype.propertyIsEnumerable.call(v, q[m]) && ($[q[m]] = v[q[m]]);\n            return $;\n        }, r = function(v, R, $, q) {\n            var m = arguments.length, E = m < 3 ? R : q === null ? q = Object.getOwnPropertyDescriptor(R, $) : q, B;\n            if (typeof Reflect == \"object\" && typeof Reflect.decorate == \"function\") E = Reflect.decorate(v, R, $, q);\n            else for(var z = v.length - 1; z >= 0; z--)(B = v[z]) && (E = (m < 3 ? B(E) : m > 3 ? B(R, $, E) : B(R, $)) || E);\n            return m > 3 && E && Object.defineProperty(R, $, E), E;\n        }, n = function(v, R) {\n            return function($, q) {\n                R($, q, v);\n            };\n        }, o = function(v, R) {\n            if (typeof Reflect == \"object\" && typeof Reflect.metadata == \"function\") return Reflect.metadata(v, R);\n        }, c = function(v, R, $, q) {\n            function m(E) {\n                return E instanceof $ ? E : new $(function(B) {\n                    B(E);\n                });\n            }\n            return new ($ || ($ = Promise))(function(E, B) {\n                function z(M) {\n                    try {\n                        U(q.next(M));\n                    } catch (H) {\n                        B(H);\n                    }\n                }\n                function j(M) {\n                    try {\n                        U(q.throw(M));\n                    } catch (H) {\n                        B(H);\n                    }\n                }\n                function U(M) {\n                    M.done ? E(M.value) : m(M.value).then(z, j);\n                }\n                U((q = q.apply(v, R || [])).next());\n            });\n        }, u = function(v, R) {\n            var $ = {\n                label: 0,\n                sent: function() {\n                    if (E[0] & 1) throw E[1];\n                    return E[1];\n                },\n                trys: [],\n                ops: []\n            }, q, m, E, B;\n            return B = {\n                next: z(0),\n                throw: z(1),\n                return: z(2)\n            }, typeof Symbol == \"function\" && (B[Symbol.iterator] = function() {\n                return this;\n            }), B;\n            function z(U) {\n                return function(M) {\n                    return j([\n                        U,\n                        M\n                    ]);\n                };\n            }\n            function j(U) {\n                if (q) throw new TypeError(\"Generator is already executing.\");\n                for(; $;)try {\n                    if (q = 1, m && (E = U[0] & 2 ? m.return : U[0] ? m.throw || ((E = m.return) && E.call(m), 0) : m.next) && !(E = E.call(m, U[1])).done) return E;\n                    switch(m = 0, E && (U = [\n                        U[0] & 2,\n                        E.value\n                    ]), U[0]){\n                        case 0:\n                        case 1:\n                            E = U;\n                            break;\n                        case 4:\n                            return $.label++, {\n                                value: U[1],\n                                done: !1\n                            };\n                        case 5:\n                            $.label++, m = U[1], U = [\n                                0\n                            ];\n                            continue;\n                        case 7:\n                            U = $.ops.pop(), $.trys.pop();\n                            continue;\n                        default:\n                            if (E = $.trys, !(E = E.length > 0 && E[E.length - 1]) && (U[0] === 6 || U[0] === 2)) {\n                                $ = 0;\n                                continue;\n                            }\n                            if (U[0] === 3 && (!E || U[1] > E[0] && U[1] < E[3])) {\n                                $.label = U[1];\n                                break;\n                            }\n                            if (U[0] === 6 && $.label < E[1]) {\n                                $.label = E[1], E = U;\n                                break;\n                            }\n                            if (E && $.label < E[2]) {\n                                $.label = E[2], $.ops.push(U);\n                                break;\n                            }\n                            E[2] && $.ops.pop(), $.trys.pop();\n                            continue;\n                    }\n                    U = R.call(v, $);\n                } catch (M) {\n                    U = [\n                        6,\n                        M\n                    ], m = 0;\n                } finally{\n                    q = E = 0;\n                }\n                if (U[0] & 5) throw U[1];\n                return {\n                    value: U[0] ? U[1] : void 0,\n                    done: !0\n                };\n            }\n        }, a = function(v, R, $, q) {\n            q === void 0 && (q = $), v[q] = R[$];\n        }, d = function(v, R) {\n            for(var $ in v)$ !== \"default\" && !R.hasOwnProperty($) && (R[$] = v[$]);\n        }, p = function(v) {\n            var R = typeof Symbol == \"function\" && Symbol.iterator, $ = R && v[R], q = 0;\n            if ($) return $.call(v);\n            if (v && typeof v.length == \"number\") return {\n                next: function() {\n                    return v && q >= v.length && (v = void 0), {\n                        value: v && v[q++],\n                        done: !v\n                    };\n                }\n            };\n            throw new TypeError(R ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n        }, b = function(v, R) {\n            var $ = typeof Symbol == \"function\" && v[Symbol.iterator];\n            if (!$) return v;\n            var q = $.call(v), m, E = [], B;\n            try {\n                for(; (R === void 0 || R-- > 0) && !(m = q.next()).done;)E.push(m.value);\n            } catch (z) {\n                B = {\n                    error: z\n                };\n            } finally{\n                try {\n                    m && !m.done && ($ = q.return) && $.call(q);\n                } finally{\n                    if (B) throw B.error;\n                }\n            }\n            return E;\n        }, x = function() {\n            for(var v = [], R = 0; R < arguments.length; R++)v = v.concat(b(arguments[R]));\n            return v;\n        }, O = function() {\n            for(var v = 0, R = 0, $ = arguments.length; R < $; R++)v += arguments[R].length;\n            for(var q = Array(v), m = 0, R = 0; R < $; R++)for(var E = arguments[R], B = 0, z = E.length; B < z; B++, m++)q[m] = E[B];\n            return q;\n        }, _ = function(v) {\n            return this instanceof _ ? (this.v = v, this) : new _(v);\n        }, C = function(v, R, $) {\n            if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n            var q = $.apply(v, R || []), m, E = [];\n            return m = {}, B(\"next\"), B(\"throw\"), B(\"return\"), m[Symbol.asyncIterator] = function() {\n                return this;\n            }, m;\n            function B(te) {\n                q[te] && (m[te] = function(G) {\n                    return new Promise(function(ie, Q) {\n                        E.push([\n                            te,\n                            G,\n                            ie,\n                            Q\n                        ]) > 1 || z(te, G);\n                    });\n                });\n            }\n            function z(te, G) {\n                try {\n                    j(q[te](G));\n                } catch (ie) {\n                    H(E[0][3], ie);\n                }\n            }\n            function j(te) {\n                te.value instanceof _ ? Promise.resolve(te.value.v).then(U, M) : H(E[0][2], te);\n            }\n            function U(te) {\n                z(\"next\", te);\n            }\n            function M(te) {\n                z(\"throw\", te);\n            }\n            function H(te, G) {\n                te(G), E.shift(), E.length && z(E[0][0], E[0][1]);\n            }\n        }, F = function(v) {\n            var R, $;\n            return R = {}, q(\"next\"), q(\"throw\", function(m) {\n                throw m;\n            }), q(\"return\"), R[Symbol.iterator] = function() {\n                return this;\n            }, R;\n            function q(m, E) {\n                R[m] = v[m] ? function(B) {\n                    return ($ = !$) ? {\n                        value: _(v[m](B)),\n                        done: m === \"return\"\n                    } : E ? E(B) : B;\n                } : E;\n            }\n        }, K = function(v) {\n            if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n            var R = v[Symbol.asyncIterator], $;\n            return R ? R.call(v) : (v = typeof p == \"function\" ? p(v) : v[Symbol.iterator](), $ = {}, q(\"next\"), q(\"throw\"), q(\"return\"), $[Symbol.asyncIterator] = function() {\n                return this;\n            }, $);\n            function q(E) {\n                $[E] = v[E] && function(B) {\n                    return new Promise(function(z, j) {\n                        B = v[E](B), m(z, j, B.done, B.value);\n                    });\n                };\n            }\n            function m(E, B, z, j) {\n                Promise.resolve(j).then(function(U) {\n                    E({\n                        value: U,\n                        done: z\n                    });\n                }, B);\n            }\n        }, I = function(v, R) {\n            return Object.defineProperty ? Object.defineProperty(v, \"raw\", {\n                value: R\n            }) : v.raw = R, v;\n        }, D = function(v) {\n            if (v && v.__esModule) return v;\n            var R = {};\n            if (v != null) for(var $ in v)Object.hasOwnProperty.call(v, $) && (R[$] = v[$]);\n            return R.default = v, R;\n        }, y = function(v) {\n            return v && v.__esModule ? v : {\n                default: v\n            };\n        }, w = function(v, R) {\n            if (!R.has(v)) throw new TypeError(\"attempted to get private field on non-instance\");\n            return R.get(v);\n        }, f = function(v, R, $) {\n            if (!R.has(v)) throw new TypeError(\"attempted to set private field on non-instance\");\n            return R.set(v, $), $;\n        }, l(\"__extends\", e), l(\"__assign\", t), l(\"__rest\", s), l(\"__decorate\", r), l(\"__param\", n), l(\"__metadata\", o), l(\"__awaiter\", c), l(\"__generator\", u), l(\"__exportStar\", d), l(\"__createBinding\", a), l(\"__values\", p), l(\"__read\", b), l(\"__spread\", x), l(\"__spreadArrays\", O), l(\"__await\", _), l(\"__asyncGenerator\", C), l(\"__asyncDelegator\", F), l(\"__asyncValues\", K), l(\"__makeTemplateObject\", I), l(\"__importStar\", D), l(\"__importDefault\", y), l(\"__classPrivateFieldGet\", w), l(\"__classPrivateFieldSet\", f);\n    });\n})(sc);\nvar Ft = sc.exports, fs = {};\nObject.defineProperty(fs, \"__esModule\", {\n    value: !0\n});\nfunction Vu(i) {\n    if (typeof i != \"string\") throw new Error(`Cannot safe json parse value of type ${typeof i}`);\n    try {\n        return JSON.parse(i);\n    } catch  {\n        return i;\n    }\n}\nfs.safeJsonParse = Vu;\nfunction Bu(i) {\n    return typeof i == \"string\" ? i : JSON.stringify(i, (e, t)=>typeof t > \"u\" ? null : t);\n}\nfs.safeJsonStringify = Bu;\nvar ki = {\n    exports: {}\n}, Hn;\nfunction ku() {\n    return Hn || (Hn = 1, function() {\n        let i;\n        function e() {}\n        i = e, i.prototype.getItem = function(t) {\n            return this.hasOwnProperty(t) ? String(this[t]) : null;\n        }, i.prototype.setItem = function(t, s) {\n            this[t] = String(s);\n        }, i.prototype.removeItem = function(t) {\n            delete this[t];\n        }, i.prototype.clear = function() {\n            const t = this;\n            Object.keys(t).forEach(function(s) {\n                t[s] = void 0, delete t[s];\n            });\n        }, i.prototype.key = function(t) {\n            return t = t || 0, Object.keys(this)[t];\n        }, i.prototype.__defineGetter__(\"length\", function() {\n            return Object.keys(this).length;\n        }), typeof _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c < \"u\" && _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.localStorage ? ki.exports = _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.localStorage :  false ? 0 : ki.exports = new e();\n    }()), ki.exports;\n}\nvar yr = {}, Hi = {}, Gn;\nfunction Hu() {\n    if (Gn) return Hi;\n    Gn = 1, Object.defineProperty(Hi, \"__esModule\", {\n        value: !0\n    }), Hi.IKeyValueStorage = void 0;\n    class i {\n    }\n    return Hi.IKeyValueStorage = i, Hi;\n}\nvar Gi = {}, Wn;\nfunction Gu() {\n    if (Wn) return Gi;\n    Wn = 1, Object.defineProperty(Gi, \"__esModule\", {\n        value: !0\n    }), Gi.parseEntry = void 0;\n    const i = fs;\n    function e(t) {\n        var s;\n        return [\n            t[0],\n            i.safeJsonParse((s = t[1]) !== null && s !== void 0 ? s : \"\")\n        ];\n    }\n    return Gi.parseEntry = e, Gi;\n}\nvar Yn;\nfunction Wu() {\n    return Yn || (Yn = 1, function(i) {\n        Object.defineProperty(i, \"__esModule\", {\n            value: !0\n        });\n        const e = Ft;\n        e.__exportStar(Hu(), i), e.__exportStar(Gu(), i);\n    }(yr)), yr;\n}\nObject.defineProperty(sr, \"__esModule\", {\n    value: !0\n});\nsr.KeyValueStorage = void 0;\nconst Ci = Ft, Jn = fs, Yu = Ci.__importDefault(ku()), Ju = Wu();\nclass rc {\n    constructor(){\n        this.localStorage = Yu.default;\n    }\n    getKeys() {\n        return Ci.__awaiter(this, void 0, void 0, function*() {\n            return Object.keys(this.localStorage);\n        });\n    }\n    getEntries() {\n        return Ci.__awaiter(this, void 0, void 0, function*() {\n            return Object.entries(this.localStorage).map(Ju.parseEntry);\n        });\n    }\n    getItem(e) {\n        return Ci.__awaiter(this, void 0, void 0, function*() {\n            const t = this.localStorage.getItem(e);\n            if (t !== null) return Jn.safeJsonParse(t);\n        });\n    }\n    setItem(e, t) {\n        return Ci.__awaiter(this, void 0, void 0, function*() {\n            this.localStorage.setItem(e, Jn.safeJsonStringify(t));\n        });\n    }\n    removeItem(e) {\n        return Ci.__awaiter(this, void 0, void 0, function*() {\n            this.localStorage.removeItem(e);\n        });\n    }\n}\nsr.KeyValueStorage = rc;\nvar nc = sr.default = rc, Wt = {}, Wi = {}, V = {}, mr = {}, Yi = {}, Qn;\nfunction Qu() {\n    if (Qn) return Yi;\n    Qn = 1, Object.defineProperty(Yi, \"__esModule\", {\n        value: !0\n    }), Yi.delay = void 0;\n    function i(e) {\n        return new Promise((t)=>{\n            setTimeout(()=>{\n                t(!0);\n            }, e);\n        });\n    }\n    return Yi.delay = i, Yi;\n}\nvar mi = {}, br = {}, bi = {}, Xn;\nfunction Xu() {\n    return Xn || (Xn = 1, Object.defineProperty(bi, \"__esModule\", {\n        value: !0\n    }), bi.ONE_THOUSAND = bi.ONE_HUNDRED = void 0, bi.ONE_HUNDRED = 100, bi.ONE_THOUSAND = 1e3), bi;\n}\nvar wr = {}, Zn;\nfunction Zu() {\n    return Zn || (Zn = 1, function(i) {\n        Object.defineProperty(i, \"__esModule\", {\n            value: !0\n        }), i.ONE_YEAR = i.FOUR_WEEKS = i.THREE_WEEKS = i.TWO_WEEKS = i.ONE_WEEK = i.THIRTY_DAYS = i.SEVEN_DAYS = i.FIVE_DAYS = i.THREE_DAYS = i.ONE_DAY = i.TWENTY_FOUR_HOURS = i.TWELVE_HOURS = i.SIX_HOURS = i.THREE_HOURS = i.ONE_HOUR = i.SIXTY_MINUTES = i.THIRTY_MINUTES = i.TEN_MINUTES = i.FIVE_MINUTES = i.ONE_MINUTE = i.SIXTY_SECONDS = i.THIRTY_SECONDS = i.TEN_SECONDS = i.FIVE_SECONDS = i.ONE_SECOND = void 0, i.ONE_SECOND = 1, i.FIVE_SECONDS = 5, i.TEN_SECONDS = 10, i.THIRTY_SECONDS = 30, i.SIXTY_SECONDS = 60, i.ONE_MINUTE = i.SIXTY_SECONDS, i.FIVE_MINUTES = i.ONE_MINUTE * 5, i.TEN_MINUTES = i.ONE_MINUTE * 10, i.THIRTY_MINUTES = i.ONE_MINUTE * 30, i.SIXTY_MINUTES = i.ONE_MINUTE * 60, i.ONE_HOUR = i.SIXTY_MINUTES, i.THREE_HOURS = i.ONE_HOUR * 3, i.SIX_HOURS = i.ONE_HOUR * 6, i.TWELVE_HOURS = i.ONE_HOUR * 12, i.TWENTY_FOUR_HOURS = i.ONE_HOUR * 24, i.ONE_DAY = i.TWENTY_FOUR_HOURS, i.THREE_DAYS = i.ONE_DAY * 3, i.FIVE_DAYS = i.ONE_DAY * 5, i.SEVEN_DAYS = i.ONE_DAY * 7, i.THIRTY_DAYS = i.ONE_DAY * 30, i.ONE_WEEK = i.SEVEN_DAYS, i.TWO_WEEKS = i.ONE_WEEK * 2, i.THREE_WEEKS = i.ONE_WEEK * 3, i.FOUR_WEEKS = i.ONE_WEEK * 4, i.ONE_YEAR = i.ONE_DAY * 365;\n    }(wr)), wr;\n}\nvar eo;\nfunction oc() {\n    return eo || (eo = 1, function(i) {\n        Object.defineProperty(i, \"__esModule\", {\n            value: !0\n        });\n        const e = Ft;\n        e.__exportStar(Xu(), i), e.__exportStar(Zu(), i);\n    }(br)), br;\n}\nvar to;\nfunction el() {\n    if (to) return mi;\n    to = 1, Object.defineProperty(mi, \"__esModule\", {\n        value: !0\n    }), mi.fromMiliseconds = mi.toMiliseconds = void 0;\n    const i = oc();\n    function e(s) {\n        return s * i.ONE_THOUSAND;\n    }\n    mi.toMiliseconds = e;\n    function t(s) {\n        return Math.floor(s / i.ONE_THOUSAND);\n    }\n    return mi.fromMiliseconds = t, mi;\n}\nvar io;\nfunction tl() {\n    return io || (io = 1, function(i) {\n        Object.defineProperty(i, \"__esModule\", {\n            value: !0\n        });\n        const e = Ft;\n        e.__exportStar(Qu(), i), e.__exportStar(el(), i);\n    }(mr)), mr;\n}\nvar Ri = {}, so;\nfunction il() {\n    if (so) return Ri;\n    so = 1, Object.defineProperty(Ri, \"__esModule\", {\n        value: !0\n    }), Ri.Watch = void 0;\n    class i {\n        constructor(){\n            this.timestamps = /* @__PURE__ */ new Map();\n        }\n        start(t) {\n            if (this.timestamps.has(t)) throw new Error(`Watch already started for label: ${t}`);\n            this.timestamps.set(t, {\n                started: Date.now()\n            });\n        }\n        stop(t) {\n            const s = this.get(t);\n            if (typeof s.elapsed < \"u\") throw new Error(`Watch already stopped for label: ${t}`);\n            const r = Date.now() - s.started;\n            this.timestamps.set(t, {\n                started: s.started,\n                elapsed: r\n            });\n        }\n        get(t) {\n            const s = this.timestamps.get(t);\n            if (typeof s > \"u\") throw new Error(`No timestamp found for label: ${t}`);\n            return s;\n        }\n        elapsed(t) {\n            const s = this.get(t);\n            return s.elapsed || Date.now() - s.started;\n        }\n    }\n    return Ri.Watch = i, Ri.default = i, Ri;\n}\nvar vr = {}, Ji = {}, ro;\nfunction sl() {\n    if (ro) return Ji;\n    ro = 1, Object.defineProperty(Ji, \"__esModule\", {\n        value: !0\n    }), Ji.IWatch = void 0;\n    class i {\n    }\n    return Ji.IWatch = i, Ji;\n}\nvar no;\nfunction rl() {\n    return no || (no = 1, function(i) {\n        Object.defineProperty(i, \"__esModule\", {\n            value: !0\n        }), Ft.__exportStar(sl(), i);\n    }(vr)), vr;\n}\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    });\n    const e = Ft;\n    e.__exportStar(tl(), i), e.__exportStar(il(), i), e.__exportStar(rl(), i), e.__exportStar(oc(), i);\n})(V);\nvar _r = {}, Qi = {};\nlet Nt = class {\n};\nconst nl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    IEvents: Nt\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), ol = /* @__PURE__ */ (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.g)(nl);\nvar oo;\nfunction al() {\n    if (oo) return Qi;\n    oo = 1, Object.defineProperty(Qi, \"__esModule\", {\n        value: !0\n    }), Qi.IHeartBeat = void 0;\n    const i = ol;\n    class e extends i.IEvents {\n        constructor(s){\n            super();\n        }\n    }\n    return Qi.IHeartBeat = e, Qi;\n}\nvar ao;\nfunction ac() {\n    return ao || (ao = 1, function(i) {\n        Object.defineProperty(i, \"__esModule\", {\n            value: !0\n        }), Ft.__exportStar(al(), i);\n    }(_r)), _r;\n}\nvar Er = {}, wi = {}, co;\nfunction cl() {\n    if (co) return wi;\n    co = 1, Object.defineProperty(wi, \"__esModule\", {\n        value: !0\n    }), wi.HEARTBEAT_EVENTS = wi.HEARTBEAT_INTERVAL = void 0;\n    const i = V;\n    return wi.HEARTBEAT_INTERVAL = i.FIVE_SECONDS, wi.HEARTBEAT_EVENTS = {\n        pulse: \"heartbeat_pulse\"\n    }, wi;\n}\nvar ho;\nfunction cc() {\n    return ho || (ho = 1, function(i) {\n        Object.defineProperty(i, \"__esModule\", {\n            value: !0\n        }), Ft.__exportStar(cl(), i);\n    }(Er)), Er;\n}\nvar uo;\nfunction hl() {\n    if (uo) return Wi;\n    uo = 1, Object.defineProperty(Wi, \"__esModule\", {\n        value: !0\n    }), Wi.HeartBeat = void 0;\n    const i = Ft, e = We, t = V, s = ac(), r = cc();\n    class n extends s.IHeartBeat {\n        constructor(c){\n            super(c), this.events = new e.EventEmitter(), this.interval = r.HEARTBEAT_INTERVAL, this.interval = c?.interval || r.HEARTBEAT_INTERVAL;\n        }\n        static init(c) {\n            return i.__awaiter(this, void 0, void 0, function*() {\n                const u = new n(c);\n                return yield u.init(), u;\n            });\n        }\n        init() {\n            return i.__awaiter(this, void 0, void 0, function*() {\n                yield this.initialize();\n            });\n        }\n        stop() {\n            clearInterval(this.intervalRef);\n        }\n        on(c, u) {\n            this.events.on(c, u);\n        }\n        once(c, u) {\n            this.events.once(c, u);\n        }\n        off(c, u) {\n            this.events.off(c, u);\n        }\n        removeListener(c, u) {\n            this.events.removeListener(c, u);\n        }\n        initialize() {\n            return i.__awaiter(this, void 0, void 0, function*() {\n                this.intervalRef = setInterval(()=>this.pulse(), t.toMiliseconds(this.interval));\n            });\n        }\n        pulse() {\n            this.events.emit(r.HEARTBEAT_EVENTS.pulse);\n        }\n    }\n    return Wi.HeartBeat = n, Wi;\n}\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    });\n    const e = Ft;\n    e.__exportStar(hl(), i), e.__exportStar(ac(), i), e.__exportStar(cc(), i);\n})(Wt);\nvar ee = {}, Sr, lo;\nfunction ul() {\n    if (lo) return Sr;\n    lo = 1;\n    function i(t) {\n        try {\n            return JSON.stringify(t);\n        } catch  {\n            return '\"[Circular]\"';\n        }\n    }\n    Sr = e;\n    function e(t, s, r) {\n        var n = r && r.stringify || i, o = 1;\n        if (typeof t == \"object\" && t !== null) {\n            var c = s.length + o;\n            if (c === 1) return t;\n            var u = new Array(c);\n            u[0] = n(t);\n            for(var d = 1; d < c; d++)u[d] = n(s[d]);\n            return u.join(\" \");\n        }\n        if (typeof t != \"string\") return t;\n        var p = s.length;\n        if (p === 0) return t;\n        for(var b = \"\", x = 1 - o, O = -1, _ = t && t.length || 0, C = 0; C < _;){\n            if (t.charCodeAt(C) === 37 && C + 1 < _) {\n                switch(O = O > -1 ? O : 0, t.charCodeAt(C + 1)){\n                    case 100:\n                    case 102:\n                        if (x >= p || s[x] == null) break;\n                        O < C && (b += t.slice(O, C)), b += Number(s[x]), O = C + 2, C++;\n                        break;\n                    case 105:\n                        if (x >= p || s[x] == null) break;\n                        O < C && (b += t.slice(O, C)), b += Math.floor(Number(s[x])), O = C + 2, C++;\n                        break;\n                    case 79:\n                    case 111:\n                    case 106:\n                        if (x >= p || s[x] === void 0) break;\n                        O < C && (b += t.slice(O, C));\n                        var F = typeof s[x];\n                        if (F === \"string\") {\n                            b += \"'\" + s[x] + \"'\", O = C + 2, C++;\n                            break;\n                        }\n                        if (F === \"function\") {\n                            b += s[x].name || \"<anonymous>\", O = C + 2, C++;\n                            break;\n                        }\n                        b += n(s[x]), O = C + 2, C++;\n                        break;\n                    case 115:\n                        if (x >= p) break;\n                        O < C && (b += t.slice(O, C)), b += String(s[x]), O = C + 2, C++;\n                        break;\n                    case 37:\n                        O < C && (b += t.slice(O, C)), b += \"%\", O = C + 2, C++, x--;\n                        break;\n                }\n                ++x;\n            }\n            ++C;\n        }\n        return O === -1 ? t : (O < _ && (b += t.slice(O)), b);\n    }\n    return Sr;\n}\nvar Ir, fo;\nfunction ll() {\n    if (fo) return Ir;\n    fo = 1;\n    const i = ul();\n    Ir = r;\n    const e = w().console || {}, t = {\n        mapHttpRequest: _,\n        mapHttpResponse: _,\n        wrapRequestSerializer: C,\n        wrapResponseSerializer: C,\n        wrapErrorSerializer: C,\n        req: _,\n        res: _,\n        err: x\n    };\n    function s(f, a) {\n        return Array.isArray(f) ? f.filter(function(L) {\n            return L !== \"!stdSerializers.err\";\n        }) : f === !0 ? Object.keys(a) : !1;\n    }\n    function r(f) {\n        f = f || {}, f.browser = f.browser || {};\n        const a = f.browser.transmit;\n        if (a && typeof a.send != \"function\") throw Error(\"pino: transmit option must have a send function\");\n        const l = f.browser.write || e;\n        f.browser.write && (f.browser.asObject = !0);\n        const L = f.serializers || {}, v = s(f.browser.serialize, L);\n        let R = f.browser.serialize;\n        Array.isArray(f.browser.serialize) && f.browser.serialize.indexOf(\"!stdSerializers.err\") > -1 && (R = !1);\n        const $ = [\n            \"error\",\n            \"fatal\",\n            \"warn\",\n            \"info\",\n            \"debug\",\n            \"trace\"\n        ];\n        typeof l == \"function\" && (l.error = l.fatal = l.warn = l.info = l.debug = l.trace = l), f.enabled === !1 && (f.level = \"silent\");\n        const q = f.level || \"info\", m = Object.create(l);\n        m.log || (m.log = F), Object.defineProperty(m, \"levelVal\", {\n            get: B\n        }), Object.defineProperty(m, \"level\", {\n            get: z,\n            set: j\n        });\n        const E = {\n            transmit: a,\n            serialize: v,\n            asObject: f.browser.asObject,\n            levels: $,\n            timestamp: O(f)\n        };\n        m.levels = r.levels, m.level = q, m.setMaxListeners = m.getMaxListeners = m.emit = m.addListener = m.on = m.prependListener = m.once = m.prependOnceListener = m.removeListener = m.removeAllListeners = m.listeners = m.listenerCount = m.eventNames = m.write = m.flush = F, m.serializers = L, m._serialize = v, m._stdErrSerialize = R, m.child = U, a && (m._logEvent = b());\n        function B() {\n            return this.level === \"silent\" ? 1 / 0 : this.levels.values[this.level];\n        }\n        function z() {\n            return this._level;\n        }\n        function j(M) {\n            if (M !== \"silent\" && !this.levels.values[M]) throw Error(\"unknown level \" + M);\n            this._level = M, n(E, m, \"error\", \"log\"), n(E, m, \"fatal\", \"error\"), n(E, m, \"warn\", \"error\"), n(E, m, \"info\", \"log\"), n(E, m, \"debug\", \"log\"), n(E, m, \"trace\", \"log\");\n        }\n        function U(M, H) {\n            if (!M) throw new Error(\"missing bindings for child Pino\");\n            H = H || {}, v && M.serializers && (H.serializers = M.serializers);\n            const te = H.serializers;\n            if (v && te) {\n                var G = Object.assign({}, L, te), ie = f.browser.serialize === !0 ? Object.keys(G) : v;\n                delete M.serializers, u([\n                    M\n                ], ie, G, this._stdErrSerialize);\n            }\n            function Q(se) {\n                this._childLevel = (se._childLevel | 0) + 1, this.error = d(se, M, \"error\"), this.fatal = d(se, M, \"fatal\"), this.warn = d(se, M, \"warn\"), this.info = d(se, M, \"info\"), this.debug = d(se, M, \"debug\"), this.trace = d(se, M, \"trace\"), G && (this.serializers = G, this._serialize = ie), a && (this._logEvent = b([].concat(se._logEvent.bindings, M)));\n            }\n            return Q.prototype = this, new Q(this);\n        }\n        return m;\n    }\n    r.levels = {\n        values: {\n            fatal: 60,\n            error: 50,\n            warn: 40,\n            info: 30,\n            debug: 20,\n            trace: 10\n        },\n        labels: {\n            10: \"trace\",\n            20: \"debug\",\n            30: \"info\",\n            40: \"warn\",\n            50: \"error\",\n            60: \"fatal\"\n        }\n    }, r.stdSerializers = t, r.stdTimeFunctions = Object.assign({}, {\n        nullTime: K,\n        epochTime: I,\n        unixTime: D,\n        isoTime: y\n    });\n    function n(f, a, l, L) {\n        const v = Object.getPrototypeOf(a);\n        a[l] = a.levelVal > a.levels.values[l] ? F : v[l] ? v[l] : e[l] || e[L] || F, o(f, a, l);\n    }\n    function o(f, a, l) {\n        !f.transmit && a[l] === F || (a[l] = function(L) {\n            return function() {\n                const R = f.timestamp(), $ = new Array(arguments.length), q = Object.getPrototypeOf && Object.getPrototypeOf(this) === e ? e : this;\n                for(var m = 0; m < $.length; m++)$[m] = arguments[m];\n                if (f.serialize && !f.asObject && u($, this._serialize, this.serializers, this._stdErrSerialize), f.asObject ? L.call(q, c(this, l, $, R)) : L.apply(q, $), f.transmit) {\n                    const E = f.transmit.level || a.level, B = r.levels.values[E], z = r.levels.values[l];\n                    if (z < B) return;\n                    p(this, {\n                        ts: R,\n                        methodLevel: l,\n                        methodValue: z,\n                        transmitLevel: E,\n                        transmitValue: r.levels.values[f.transmit.level || a.level],\n                        send: f.transmit.send,\n                        val: a.levelVal\n                    }, $);\n                }\n            };\n        }(a[l]));\n    }\n    function c(f, a, l, L) {\n        f._serialize && u(l, f._serialize, f.serializers, f._stdErrSerialize);\n        const v = l.slice();\n        let R = v[0];\n        const $ = {};\n        L && ($.time = L), $.level = r.levels.values[a];\n        let q = (f._childLevel | 0) + 1;\n        if (q < 1 && (q = 1), R !== null && typeof R == \"object\") {\n            for(; q-- && typeof v[0] == \"object\";)Object.assign($, v.shift());\n            R = v.length ? i(v.shift(), v) : void 0;\n        } else typeof R == \"string\" && (R = i(v.shift(), v));\n        return R !== void 0 && ($.msg = R), $;\n    }\n    function u(f, a, l, L) {\n        for(const v in f)if (L && f[v] instanceof Error) f[v] = r.stdSerializers.err(f[v]);\n        else if (typeof f[v] == \"object\" && !Array.isArray(f[v])) for(const R in f[v])a && a.indexOf(R) > -1 && R in l && (f[v][R] = l[R](f[v][R]));\n    }\n    function d(f, a, l) {\n        return function() {\n            const L = new Array(1 + arguments.length);\n            L[0] = a;\n            for(var v = 1; v < L.length; v++)L[v] = arguments[v - 1];\n            return f[l].apply(this, L);\n        };\n    }\n    function p(f, a, l) {\n        const L = a.send, v = a.ts, R = a.methodLevel, $ = a.methodValue, q = a.val, m = f._logEvent.bindings;\n        u(l, f._serialize || Object.keys(f.serializers), f.serializers, f._stdErrSerialize === void 0 ? !0 : f._stdErrSerialize), f._logEvent.ts = v, f._logEvent.messages = l.filter(function(E) {\n            return m.indexOf(E) === -1;\n        }), f._logEvent.level.label = R, f._logEvent.level.value = $, L(R, f._logEvent, q), f._logEvent = b(m);\n    }\n    function b(f) {\n        return {\n            ts: 0,\n            messages: [],\n            bindings: f || [],\n            level: {\n                label: \"\",\n                value: 0\n            }\n        };\n    }\n    function x(f) {\n        const a = {\n            type: f.constructor.name,\n            msg: f.message,\n            stack: f.stack\n        };\n        for(const l in f)a[l] === void 0 && (a[l] = f[l]);\n        return a;\n    }\n    function O(f) {\n        return typeof f.timestamp == \"function\" ? f.timestamp : f.timestamp === !1 ? K : I;\n    }\n    function _() {\n        return {};\n    }\n    function C(f) {\n        return f;\n    }\n    function F() {}\n    function K() {\n        return !1;\n    }\n    function I() {\n        return Date.now();\n    }\n    function D() {\n        return Math.round(Date.now() / 1e3);\n    }\n    function y() {\n        return new Date(Date.now()).toISOString();\n    }\n    function w() {\n        function f(a) {\n            return typeof a < \"u\" && a;\n        }\n        try {\n            return typeof globalThis < \"u\" || Object.defineProperty(Object.prototype, \"globalThis\", {\n                get: function() {\n                    return delete Object.prototype.globalThis, this.globalThis = this;\n                },\n                configurable: !0\n            }), globalThis;\n        } catch  {\n            return f(self) || f(window) || f(this) || {};\n        }\n    }\n    return Ir;\n}\nvar vi = {}, po;\nfunction hc() {\n    return po || (po = 1, Object.defineProperty(vi, \"__esModule\", {\n        value: !0\n    }), vi.PINO_CUSTOM_CONTEXT_KEY = vi.PINO_LOGGER_DEFAULTS = void 0, vi.PINO_LOGGER_DEFAULTS = {\n        level: \"info\"\n    }, vi.PINO_CUSTOM_CONTEXT_KEY = \"custom_context\"), vi;\n}\nvar yt = {}, go;\nfunction dl() {\n    if (go) return yt;\n    go = 1, Object.defineProperty(yt, \"__esModule\", {\n        value: !0\n    }), yt.generateChildLogger = yt.formatChildLoggerContext = yt.getLoggerContext = yt.setBrowserLoggerContext = yt.getBrowserLoggerContext = yt.getDefaultLoggerOptions = void 0;\n    const i = hc();\n    function e(c) {\n        return Object.assign(Object.assign({}, c), {\n            level: c?.level || i.PINO_LOGGER_DEFAULTS.level\n        });\n    }\n    yt.getDefaultLoggerOptions = e;\n    function t(c, u = i.PINO_CUSTOM_CONTEXT_KEY) {\n        return c[u] || \"\";\n    }\n    yt.getBrowserLoggerContext = t;\n    function s(c, u, d = i.PINO_CUSTOM_CONTEXT_KEY) {\n        return c[d] = u, c;\n    }\n    yt.setBrowserLoggerContext = s;\n    function r(c, u = i.PINO_CUSTOM_CONTEXT_KEY) {\n        let d = \"\";\n        return typeof c.bindings > \"u\" ? d = t(c, u) : d = c.bindings().context || \"\", d;\n    }\n    yt.getLoggerContext = r;\n    function n(c, u, d = i.PINO_CUSTOM_CONTEXT_KEY) {\n        const p = r(c, d);\n        return p.trim() ? `${p}/${u}` : u;\n    }\n    yt.formatChildLoggerContext = n;\n    function o(c, u, d = i.PINO_CUSTOM_CONTEXT_KEY) {\n        const p = n(c, u, d), b = c.child({\n            context: p\n        });\n        return s(b, p, d);\n    }\n    return yt.generateChildLogger = o, yt;\n}\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    }), i.pino = void 0;\n    const e = Ft, t = e.__importDefault(ll());\n    Object.defineProperty(i, \"pino\", {\n        enumerable: !0,\n        get: function() {\n            return t.default;\n        }\n    }), e.__exportStar(hc(), i), e.__exportStar(dl(), i);\n})(ee);\nlet fl = class extends Nt {\n    constructor(e){\n        super(), this.opts = e, this.protocol = \"wc\", this.version = 2;\n    }\n}, pl = class extends Nt {\n    constructor(e, t){\n        super(), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map();\n    }\n}, gl = class {\n    constructor(e, t){\n        this.logger = e, this.core = t;\n    }\n}, yl = class extends Nt {\n    constructor(e, t){\n        super(), this.relayer = e, this.logger = t;\n    }\n}, ml = class extends Nt {\n    constructor(e){\n        super();\n    }\n}, bl = class {\n    constructor(e, t, s, r){\n        this.core = e, this.logger = t, this.name = s;\n    }\n}, wl = class extends Nt {\n    constructor(e, t){\n        super(), this.relayer = e, this.logger = t;\n    }\n}, vl = class extends Nt {\n    constructor(e, t){\n        super(), this.core = e, this.logger = t;\n    }\n}, _l = class {\n    constructor(e, t){\n        this.projectId = e, this.logger = t;\n    }\n}, El = class {\n    constructor(e){\n        this.opts = e, this.protocol = \"wc\", this.version = 2;\n    }\n}, Sl = class {\n    constructor(e){\n        this.client = e;\n    }\n};\nconst Il = (i)=>JSON.stringify(i, (e, t)=>typeof t == \"bigint\" ? t.toString() + \"n\" : t), Dl = (i)=>{\n    const e = /([\\[:])?(\\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\\}\\]])/g, t = i.replace(e, '$1\"$2n\"$3');\n    return JSON.parse(t, (s, r)=>typeof r == \"string\" && r.match(/^\\d+n$/) ? BigInt(r.substring(0, r.length - 1)) : r);\n};\nfunction rn(i) {\n    if (typeof i != \"string\") throw new Error(`Cannot safe json parse value of type ${typeof i}`);\n    try {\n        return Dl(i);\n    } catch  {\n        return i;\n    }\n}\nfunction rr(i) {\n    return typeof i == \"string\" ? i : Il(i) || \"\";\n}\nvar nn = {}, li = {}, nr = {}, or = {};\nObject.defineProperty(or, \"__esModule\", {\n    value: !0\n});\nor.BrowserRandomSource = void 0;\nconst yo = 65536;\nclass xl {\n    constructor(){\n        this.isAvailable = !1, this.isInstantiated = !1;\n        const e = typeof self < \"u\" ? self.crypto || self.msCrypto : null;\n        e && e.getRandomValues !== void 0 && (this._crypto = e, this.isAvailable = !0, this.isInstantiated = !0);\n    }\n    randomBytes(e) {\n        if (!this.isAvailable || !this._crypto) throw new Error(\"Browser random byte generator is not available.\");\n        const t = new Uint8Array(e);\n        for(let s = 0; s < t.length; s += yo)this._crypto.getRandomValues(t.subarray(s, s + Math.min(t.length - s, yo)));\n        return t;\n    }\n}\nor.BrowserRandomSource = xl;\nfunction Ol(i) {\n    throw new Error('Could not dynamically require \"' + i + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\nvar ar = {}, Pt = {};\nObject.defineProperty(Pt, \"__esModule\", {\n    value: !0\n});\nfunction Nl(i) {\n    for(var e = 0; e < i.length; e++)i[e] = 0;\n    return i;\n}\nPt.wipe = Nl;\nconst Pl = {}, Rl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    default: Pl\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), Cl = /* @__PURE__ */ (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.g)(Rl);\nObject.defineProperty(ar, \"__esModule\", {\n    value: !0\n});\nar.NodeRandomSource = void 0;\nconst Al = Pt;\nclass Tl {\n    constructor(){\n        if (this.isAvailable = !1, this.isInstantiated = !1, typeof Ol < \"u\") {\n            const e = Cl;\n            e && e.randomBytes && (this._crypto = e, this.isAvailable = !0, this.isInstantiated = !0);\n        }\n    }\n    randomBytes(e) {\n        if (!this.isAvailable || !this._crypto) throw new Error(\"Node.js random byte generator is not available.\");\n        let t = this._crypto.randomBytes(e);\n        if (t.length !== e) throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n        const s = new Uint8Array(e);\n        for(let r = 0; r < s.length; r++)s[r] = t[r];\n        return (0, Al.wipe)(t), s;\n    }\n}\nar.NodeRandomSource = Tl;\nObject.defineProperty(nr, \"__esModule\", {\n    value: !0\n});\nnr.SystemRandomSource = void 0;\nconst $l = or, Fl = ar;\nclass Ul {\n    constructor(){\n        if (this.isAvailable = !1, this.name = \"\", this._source = new $l.BrowserRandomSource(), this._source.isAvailable) {\n            this.isAvailable = !0, this.name = \"Browser\";\n            return;\n        }\n        if (this._source = new Fl.NodeRandomSource(), this._source.isAvailable) {\n            this.isAvailable = !0, this.name = \"Node\";\n            return;\n        }\n    }\n    randomBytes(e) {\n        if (!this.isAvailable) throw new Error(\"System random byte generator is not available.\");\n        return this._source.randomBytes(e);\n    }\n}\nnr.SystemRandomSource = Ul;\nvar oe = {}, uc = {};\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    });\n    function e(c, u) {\n        var d = c >>> 16 & 65535, p = c & 65535, b = u >>> 16 & 65535, x = u & 65535;\n        return p * x + (d * x + p * b << 16 >>> 0) | 0;\n    }\n    i.mul = Math.imul || e;\n    function t(c, u) {\n        return c + u | 0;\n    }\n    i.add = t;\n    function s(c, u) {\n        return c - u | 0;\n    }\n    i.sub = s;\n    function r(c, u) {\n        return c << u | c >>> 32 - u;\n    }\n    i.rotl = r;\n    function n(c, u) {\n        return c << 32 - u | c >>> u;\n    }\n    i.rotr = n;\n    function o(c) {\n        return typeof c == \"number\" && isFinite(c) && Math.floor(c) === c;\n    }\n    i.isInteger = Number.isInteger || o, i.MAX_SAFE_INTEGER = 9007199254740991, i.isSafeInteger = function(c) {\n        return i.isInteger(c) && c >= -i.MAX_SAFE_INTEGER && c <= i.MAX_SAFE_INTEGER;\n    };\n})(uc);\nObject.defineProperty(oe, \"__esModule\", {\n    value: !0\n});\nvar lc = uc;\nfunction Ll(i, e) {\n    return e === void 0 && (e = 0), (i[e + 0] << 8 | i[e + 1]) << 16 >> 16;\n}\noe.readInt16BE = Ll;\nfunction Ml(i, e) {\n    return e === void 0 && (e = 0), (i[e + 0] << 8 | i[e + 1]) >>> 0;\n}\noe.readUint16BE = Ml;\nfunction ql(i, e) {\n    return e === void 0 && (e = 0), (i[e + 1] << 8 | i[e]) << 16 >> 16;\n}\noe.readInt16LE = ql;\nfunction jl(i, e) {\n    return e === void 0 && (e = 0), (i[e + 1] << 8 | i[e]) >>> 0;\n}\noe.readUint16LE = jl;\nfunction dc(i, e, t) {\n    return e === void 0 && (e = new Uint8Array(2)), t === void 0 && (t = 0), e[t + 0] = i >>> 8, e[t + 1] = i >>> 0, e;\n}\noe.writeUint16BE = dc;\noe.writeInt16BE = dc;\nfunction fc(i, e, t) {\n    return e === void 0 && (e = new Uint8Array(2)), t === void 0 && (t = 0), e[t + 0] = i >>> 0, e[t + 1] = i >>> 8, e;\n}\noe.writeUint16LE = fc;\noe.writeInt16LE = fc;\nfunction Mr(i, e) {\n    return e === void 0 && (e = 0), i[e] << 24 | i[e + 1] << 16 | i[e + 2] << 8 | i[e + 3];\n}\noe.readInt32BE = Mr;\nfunction qr(i, e) {\n    return e === void 0 && (e = 0), (i[e] << 24 | i[e + 1] << 16 | i[e + 2] << 8 | i[e + 3]) >>> 0;\n}\noe.readUint32BE = qr;\nfunction jr(i, e) {\n    return e === void 0 && (e = 0), i[e + 3] << 24 | i[e + 2] << 16 | i[e + 1] << 8 | i[e];\n}\noe.readInt32LE = jr;\nfunction zr(i, e) {\n    return e === void 0 && (e = 0), (i[e + 3] << 24 | i[e + 2] << 16 | i[e + 1] << 8 | i[e]) >>> 0;\n}\noe.readUint32LE = zr;\nfunction ks(i, e, t) {\n    return e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0), e[t + 0] = i >>> 24, e[t + 1] = i >>> 16, e[t + 2] = i >>> 8, e[t + 3] = i >>> 0, e;\n}\noe.writeUint32BE = ks;\noe.writeInt32BE = ks;\nfunction Hs(i, e, t) {\n    return e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0), e[t + 0] = i >>> 0, e[t + 1] = i >>> 8, e[t + 2] = i >>> 16, e[t + 3] = i >>> 24, e;\n}\noe.writeUint32LE = Hs;\noe.writeInt32LE = Hs;\nfunction zl(i, e) {\n    e === void 0 && (e = 0);\n    var t = Mr(i, e), s = Mr(i, e + 4);\n    return t * 4294967296 + s - (s >> 31) * 4294967296;\n}\noe.readInt64BE = zl;\nfunction Kl(i, e) {\n    e === void 0 && (e = 0);\n    var t = qr(i, e), s = qr(i, e + 4);\n    return t * 4294967296 + s;\n}\noe.readUint64BE = Kl;\nfunction Vl(i, e) {\n    e === void 0 && (e = 0);\n    var t = jr(i, e), s = jr(i, e + 4);\n    return s * 4294967296 + t - (t >> 31) * 4294967296;\n}\noe.readInt64LE = Vl;\nfunction Bl(i, e) {\n    e === void 0 && (e = 0);\n    var t = zr(i, e), s = zr(i, e + 4);\n    return s * 4294967296 + t;\n}\noe.readUint64LE = Bl;\nfunction pc(i, e, t) {\n    return e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0), ks(i / 4294967296 >>> 0, e, t), ks(i >>> 0, e, t + 4), e;\n}\noe.writeUint64BE = pc;\noe.writeInt64BE = pc;\nfunction gc(i, e, t) {\n    return e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0), Hs(i >>> 0, e, t), Hs(i / 4294967296 >>> 0, e, t + 4), e;\n}\noe.writeUint64LE = gc;\noe.writeInt64LE = gc;\nfunction kl(i, e, t) {\n    if (t === void 0 && (t = 0), i % 8 !== 0) throw new Error(\"readUintBE supports only bitLengths divisible by 8\");\n    if (i / 8 > e.length - t) throw new Error(\"readUintBE: array is too short for the given bitLength\");\n    for(var s = 0, r = 1, n = i / 8 + t - 1; n >= t; n--)s += e[n] * r, r *= 256;\n    return s;\n}\noe.readUintBE = kl;\nfunction Hl(i, e, t) {\n    if (t === void 0 && (t = 0), i % 8 !== 0) throw new Error(\"readUintLE supports only bitLengths divisible by 8\");\n    if (i / 8 > e.length - t) throw new Error(\"readUintLE: array is too short for the given bitLength\");\n    for(var s = 0, r = 1, n = t; n < t + i / 8; n++)s += e[n] * r, r *= 256;\n    return s;\n}\noe.readUintLE = Hl;\nfunction Gl(i, e, t, s) {\n    if (t === void 0 && (t = new Uint8Array(i / 8)), s === void 0 && (s = 0), i % 8 !== 0) throw new Error(\"writeUintBE supports only bitLengths divisible by 8\");\n    if (!lc.isSafeInteger(e)) throw new Error(\"writeUintBE value must be an integer\");\n    for(var r = 1, n = i / 8 + s - 1; n >= s; n--)t[n] = e / r & 255, r *= 256;\n    return t;\n}\noe.writeUintBE = Gl;\nfunction Wl(i, e, t, s) {\n    if (t === void 0 && (t = new Uint8Array(i / 8)), s === void 0 && (s = 0), i % 8 !== 0) throw new Error(\"writeUintLE supports only bitLengths divisible by 8\");\n    if (!lc.isSafeInteger(e)) throw new Error(\"writeUintLE value must be an integer\");\n    for(var r = 1, n = s; n < s + i / 8; n++)t[n] = e / r & 255, r *= 256;\n    return t;\n}\noe.writeUintLE = Wl;\nfunction Yl(i, e) {\n    e === void 0 && (e = 0);\n    var t = new DataView(i.buffer, i.byteOffset, i.byteLength);\n    return t.getFloat32(e);\n}\noe.readFloat32BE = Yl;\nfunction Jl(i, e) {\n    e === void 0 && (e = 0);\n    var t = new DataView(i.buffer, i.byteOffset, i.byteLength);\n    return t.getFloat32(e, !0);\n}\noe.readFloat32LE = Jl;\nfunction Ql(i, e) {\n    e === void 0 && (e = 0);\n    var t = new DataView(i.buffer, i.byteOffset, i.byteLength);\n    return t.getFloat64(e);\n}\noe.readFloat64BE = Ql;\nfunction Xl(i, e) {\n    e === void 0 && (e = 0);\n    var t = new DataView(i.buffer, i.byteOffset, i.byteLength);\n    return t.getFloat64(e, !0);\n}\noe.readFloat64LE = Xl;\nfunction Zl(i, e, t) {\n    e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0);\n    var s = new DataView(e.buffer, e.byteOffset, e.byteLength);\n    return s.setFloat32(t, i), e;\n}\noe.writeFloat32BE = Zl;\nfunction ed(i, e, t) {\n    e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0);\n    var s = new DataView(e.buffer, e.byteOffset, e.byteLength);\n    return s.setFloat32(t, i, !0), e;\n}\noe.writeFloat32LE = ed;\nfunction td(i, e, t) {\n    e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0);\n    var s = new DataView(e.buffer, e.byteOffset, e.byteLength);\n    return s.setFloat64(t, i), e;\n}\noe.writeFloat64BE = td;\nfunction id(i, e, t) {\n    e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0);\n    var s = new DataView(e.buffer, e.byteOffset, e.byteLength);\n    return s.setFloat64(t, i, !0), e;\n}\noe.writeFloat64LE = id;\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    }), i.randomStringForEntropy = i.randomString = i.randomUint32 = i.randomBytes = i.defaultRandomSource = void 0;\n    const e = nr, t = oe, s = Pt;\n    i.defaultRandomSource = new e.SystemRandomSource();\n    function r(d, p = i.defaultRandomSource) {\n        return p.randomBytes(d);\n    }\n    i.randomBytes = r;\n    function n(d = i.defaultRandomSource) {\n        const p = r(4, d), b = (0, t.readUint32LE)(p);\n        return (0, s.wipe)(p), b;\n    }\n    i.randomUint32 = n;\n    const o = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    function c(d, p = o, b = i.defaultRandomSource) {\n        if (p.length < 2) throw new Error(\"randomString charset is too short\");\n        if (p.length > 256) throw new Error(\"randomString charset is too long\");\n        let x = \"\";\n        const O = p.length, _ = 256 - 256 % O;\n        for(; d > 0;){\n            const C = r(Math.ceil(d * 256 / _), b);\n            for(let F = 0; F < C.length && d > 0; F++){\n                const K = C[F];\n                K < _ && (x += p.charAt(K % O), d--);\n            }\n            (0, s.wipe)(C);\n        }\n        return x;\n    }\n    i.randomString = c;\n    function u(d, p = o, b = i.defaultRandomSource) {\n        const x = Math.ceil(d / (Math.log(p.length) / Math.LN2));\n        return c(x, p, b);\n    }\n    i.randomStringForEntropy = u;\n})(li);\nvar yc = {};\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    });\n    var e = oe, t = Pt;\n    i.DIGEST_LENGTH = 64, i.BLOCK_SIZE = 128;\n    var s = /** @class */ function() {\n        function c() {\n            this.digestLength = i.DIGEST_LENGTH, this.blockSize = i.BLOCK_SIZE, this._stateHi = new Int32Array(8), this._stateLo = new Int32Array(8), this._tempHi = new Int32Array(16), this._tempLo = new Int32Array(16), this._buffer = new Uint8Array(256), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this.reset();\n        }\n        return c.prototype._initState = function() {\n            this._stateHi[0] = 1779033703, this._stateHi[1] = 3144134277, this._stateHi[2] = 1013904242, this._stateHi[3] = 2773480762, this._stateHi[4] = 1359893119, this._stateHi[5] = 2600822924, this._stateHi[6] = 528734635, this._stateHi[7] = 1541459225, this._stateLo[0] = 4089235720, this._stateLo[1] = 2227873595, this._stateLo[2] = 4271175723, this._stateLo[3] = 1595750129, this._stateLo[4] = 2917565137, this._stateLo[5] = 725511199, this._stateLo[6] = 4215389547, this._stateLo[7] = 327033209;\n        }, c.prototype.reset = function() {\n            return this._initState(), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this;\n        }, c.prototype.clean = function() {\n            t.wipe(this._buffer), t.wipe(this._tempHi), t.wipe(this._tempLo), this.reset();\n        }, c.prototype.update = function(u, d) {\n            if (d === void 0 && (d = u.length), this._finished) throw new Error(\"SHA512: can't update because hash was finished.\");\n            var p = 0;\n            if (this._bytesHashed += d, this._bufferLength > 0) {\n                for(; this._bufferLength < i.BLOCK_SIZE && d > 0;)this._buffer[this._bufferLength++] = u[p++], d--;\n                this._bufferLength === this.blockSize && (n(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize), this._bufferLength = 0);\n            }\n            for(d >= this.blockSize && (p = n(this._tempHi, this._tempLo, this._stateHi, this._stateLo, u, p, d), d %= this.blockSize); d > 0;)this._buffer[this._bufferLength++] = u[p++], d--;\n            return this;\n        }, c.prototype.finish = function(u) {\n            if (!this._finished) {\n                var d = this._bytesHashed, p = this._bufferLength, b = d / 536870912 | 0, x = d << 3, O = d % 128 < 112 ? 128 : 256;\n                this._buffer[p] = 128;\n                for(var _ = p + 1; _ < O - 8; _++)this._buffer[_] = 0;\n                e.writeUint32BE(b, this._buffer, O - 8), e.writeUint32BE(x, this._buffer, O - 4), n(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, O), this._finished = !0;\n            }\n            for(var _ = 0; _ < this.digestLength / 8; _++)e.writeUint32BE(this._stateHi[_], u, _ * 8), e.writeUint32BE(this._stateLo[_], u, _ * 8 + 4);\n            return this;\n        }, c.prototype.digest = function() {\n            var u = new Uint8Array(this.digestLength);\n            return this.finish(u), u;\n        }, c.prototype.saveState = function() {\n            if (this._finished) throw new Error(\"SHA256: cannot save finished state\");\n            return {\n                stateHi: new Int32Array(this._stateHi),\n                stateLo: new Int32Array(this._stateLo),\n                buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,\n                bufferLength: this._bufferLength,\n                bytesHashed: this._bytesHashed\n            };\n        }, c.prototype.restoreState = function(u) {\n            return this._stateHi.set(u.stateHi), this._stateLo.set(u.stateLo), this._bufferLength = u.bufferLength, u.buffer && this._buffer.set(u.buffer), this._bytesHashed = u.bytesHashed, this._finished = !1, this;\n        }, c.prototype.cleanSavedState = function(u) {\n            t.wipe(u.stateHi), t.wipe(u.stateLo), u.buffer && t.wipe(u.buffer), u.bufferLength = 0, u.bytesHashed = 0;\n        }, c;\n    }();\n    i.SHA512 = s;\n    var r = new Int32Array([\n        1116352408,\n        3609767458,\n        1899447441,\n        602891725,\n        3049323471,\n        3964484399,\n        3921009573,\n        2173295548,\n        961987163,\n        4081628472,\n        1508970993,\n        3053834265,\n        2453635748,\n        2937671579,\n        2870763221,\n        3664609560,\n        3624381080,\n        2734883394,\n        310598401,\n        1164996542,\n        607225278,\n        1323610764,\n        1426881987,\n        3590304994,\n        1925078388,\n        4068182383,\n        2162078206,\n        991336113,\n        2614888103,\n        633803317,\n        3248222580,\n        3479774868,\n        3835390401,\n        2666613458,\n        4022224774,\n        944711139,\n        264347078,\n        2341262773,\n        604807628,\n        2007800933,\n        770255983,\n        1495990901,\n        1249150122,\n        1856431235,\n        1555081692,\n        3175218132,\n        1996064986,\n        2198950837,\n        2554220882,\n        3999719339,\n        2821834349,\n        766784016,\n        2952996808,\n        2566594879,\n        3210313671,\n        3203337956,\n        3336571891,\n        1034457026,\n        3584528711,\n        2466948901,\n        113926993,\n        3758326383,\n        338241895,\n        168717936,\n        666307205,\n        1188179964,\n        773529912,\n        1546045734,\n        1294757372,\n        1522805485,\n        1396182291,\n        2643833823,\n        1695183700,\n        2343527390,\n        1986661051,\n        1014477480,\n        2177026350,\n        1206759142,\n        2456956037,\n        344077627,\n        2730485921,\n        1290863460,\n        2820302411,\n        3158454273,\n        3259730800,\n        3505952657,\n        3345764771,\n        106217008,\n        3516065817,\n        3606008344,\n        3600352804,\n        1432725776,\n        4094571909,\n        1467031594,\n        275423344,\n        851169720,\n        430227734,\n        3100823752,\n        506948616,\n        1363258195,\n        659060556,\n        3750685593,\n        883997877,\n        3785050280,\n        958139571,\n        3318307427,\n        1322822218,\n        3812723403,\n        1537002063,\n        2003034995,\n        1747873779,\n        3602036899,\n        1955562222,\n        1575990012,\n        2024104815,\n        1125592928,\n        2227730452,\n        2716904306,\n        2361852424,\n        442776044,\n        2428436474,\n        593698344,\n        2756734187,\n        3733110249,\n        3204031479,\n        2999351573,\n        3329325298,\n        3815920427,\n        3391569614,\n        3928383900,\n        3515267271,\n        566280711,\n        3940187606,\n        3454069534,\n        4118630271,\n        4000239992,\n        116418474,\n        1914138554,\n        174292421,\n        2731055270,\n        289380356,\n        3203993006,\n        460393269,\n        320620315,\n        685471733,\n        587496836,\n        852142971,\n        1086792851,\n        1017036298,\n        365543100,\n        1126000580,\n        2618297676,\n        1288033470,\n        3409855158,\n        1501505948,\n        4234509866,\n        1607167915,\n        987167468,\n        1816402316,\n        1246189591\n    ]);\n    function n(c, u, d, p, b, x, O) {\n        for(var _ = d[0], C = d[1], F = d[2], K = d[3], I = d[4], D = d[5], y = d[6], w = d[7], f = p[0], a = p[1], l = p[2], L = p[3], v = p[4], R = p[5], $ = p[6], q = p[7], m, E, B, z, j, U, M, H; O >= 128;){\n            for(var te = 0; te < 16; te++){\n                var G = 8 * te + x;\n                c[te] = e.readUint32BE(b, G), u[te] = e.readUint32BE(b, G + 4);\n            }\n            for(var te = 0; te < 80; te++){\n                var ie = _, Q = C, se = F, T = K, A = I, N = D, h = y, S = w, W = f, X = a, fe = l, ve = L, ge = v, Se = R, Me = $, $e = q;\n                if (m = w, E = q, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = (I >>> 14 | v << 32 - 14) ^ (I >>> 18 | v << 32 - 18) ^ (v >>> 41 - 32 | I << 32 - (41 - 32)), E = (v >>> 14 | I << 32 - 14) ^ (v >>> 18 | I << 32 - 18) ^ (I >>> 41 - 32 | v << 32 - (41 - 32)), j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, m = I & D ^ ~I & y, E = v & R ^ ~v & $, j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, m = r[te * 2], E = r[te * 2 + 1], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, m = c[te % 16], E = u[te % 16], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, B = M & 65535 | H << 16, z = j & 65535 | U << 16, m = B, E = z, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = (_ >>> 28 | f << 32 - 28) ^ (f >>> 34 - 32 | _ << 32 - (34 - 32)) ^ (f >>> 39 - 32 | _ << 32 - (39 - 32)), E = (f >>> 28 | _ << 32 - 28) ^ (_ >>> 34 - 32 | f << 32 - (34 - 32)) ^ (_ >>> 39 - 32 | f << 32 - (39 - 32)), j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, m = _ & C ^ _ & F ^ C & F, E = f & a ^ f & l ^ a & l, j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, S = M & 65535 | H << 16, $e = j & 65535 | U << 16, m = T, E = ve, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = B, E = z, j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, T = M & 65535 | H << 16, ve = j & 65535 | U << 16, C = ie, F = Q, K = se, I = T, D = A, y = N, w = h, _ = S, a = W, l = X, L = fe, v = ve, R = ge, $ = Se, q = Me, f = $e, te % 16 === 15) for(var G = 0; G < 16; G++)m = c[G], E = u[G], j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = c[(G + 9) % 16], E = u[(G + 9) % 16], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, B = c[(G + 1) % 16], z = u[(G + 1) % 16], m = (B >>> 1 | z << 32 - 1) ^ (B >>> 8 | z << 32 - 8) ^ B >>> 7, E = (z >>> 1 | B << 32 - 1) ^ (z >>> 8 | B << 32 - 8) ^ (z >>> 7 | B << 32 - 7), j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, B = c[(G + 14) % 16], z = u[(G + 14) % 16], m = (B >>> 19 | z << 32 - 19) ^ (z >>> 61 - 32 | B << 32 - (61 - 32)) ^ B >>> 6, E = (z >>> 19 | B << 32 - 19) ^ (B >>> 61 - 32 | z << 32 - (61 - 32)) ^ (z >>> 6 | B << 32 - 6), j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, c[G] = M & 65535 | H << 16, u[G] = j & 65535 | U << 16;\n            }\n            m = _, E = f, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[0], E = p[0], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[0] = _ = M & 65535 | H << 16, p[0] = f = j & 65535 | U << 16, m = C, E = a, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[1], E = p[1], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[1] = C = M & 65535 | H << 16, p[1] = a = j & 65535 | U << 16, m = F, E = l, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[2], E = p[2], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[2] = F = M & 65535 | H << 16, p[2] = l = j & 65535 | U << 16, m = K, E = L, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[3], E = p[3], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[3] = K = M & 65535 | H << 16, p[3] = L = j & 65535 | U << 16, m = I, E = v, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[4], E = p[4], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[4] = I = M & 65535 | H << 16, p[4] = v = j & 65535 | U << 16, m = D, E = R, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[5], E = p[5], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[5] = D = M & 65535 | H << 16, p[5] = R = j & 65535 | U << 16, m = y, E = $, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[6], E = p[6], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[6] = y = M & 65535 | H << 16, p[6] = $ = j & 65535 | U << 16, m = w, E = q, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[7], E = p[7], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[7] = w = M & 65535 | H << 16, p[7] = q = j & 65535 | U << 16, x += 128, O -= 128;\n        }\n        return x;\n    }\n    function o(c) {\n        var u = new s();\n        u.update(c);\n        var d = u.digest();\n        return u.clean(), d;\n    }\n    i.hash = o;\n})(yc);\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    }), i.convertSecretKeyToX25519 = i.convertPublicKeyToX25519 = i.verify = i.sign = i.extractPublicKeyFromSecretKey = i.generateKeyPair = i.generateKeyPairFromSeed = i.SEED_LENGTH = i.SECRET_KEY_LENGTH = i.PUBLIC_KEY_LENGTH = i.SIGNATURE_LENGTH = void 0;\n    const e = li, t = yc, s = Pt;\n    i.SIGNATURE_LENGTH = 64, i.PUBLIC_KEY_LENGTH = 32, i.SECRET_KEY_LENGTH = 64, i.SEED_LENGTH = 32;\n    function r(T) {\n        const A = new Float64Array(16);\n        if (T) for(let N = 0; N < T.length; N++)A[N] = T[N];\n        return A;\n    }\n    const n = new Uint8Array(32);\n    n[0] = 9;\n    const o = r(), c = r([\n        1\n    ]), u = r([\n        30883,\n        4953,\n        19914,\n        30187,\n        55467,\n        16705,\n        2637,\n        112,\n        59544,\n        30585,\n        16505,\n        36039,\n        65139,\n        11119,\n        27886,\n        20995\n    ]), d = r([\n        61785,\n        9906,\n        39828,\n        60374,\n        45398,\n        33411,\n        5274,\n        224,\n        53552,\n        61171,\n        33010,\n        6542,\n        64743,\n        22239,\n        55772,\n        9222\n    ]), p = r([\n        54554,\n        36645,\n        11616,\n        51542,\n        42930,\n        38181,\n        51040,\n        26924,\n        56412,\n        64982,\n        57905,\n        49316,\n        21502,\n        52590,\n        14035,\n        8553\n    ]), b = r([\n        26200,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214\n    ]), x = r([\n        41136,\n        18958,\n        6951,\n        50414,\n        58488,\n        44335,\n        6150,\n        12099,\n        55207,\n        15867,\n        153,\n        11085,\n        57099,\n        20417,\n        9344,\n        11139\n    ]);\n    function O(T, A) {\n        for(let N = 0; N < 16; N++)T[N] = A[N] | 0;\n    }\n    function _(T) {\n        let A = 1;\n        for(let N = 0; N < 16; N++){\n            let h = T[N] + A + 65535;\n            A = Math.floor(h / 65536), T[N] = h - A * 65536;\n        }\n        T[0] += A - 1 + 37 * (A - 1);\n    }\n    function C(T, A, N) {\n        const h = ~(N - 1);\n        for(let S = 0; S < 16; S++){\n            const W = h & (T[S] ^ A[S]);\n            T[S] ^= W, A[S] ^= W;\n        }\n    }\n    function F(T, A) {\n        const N = r(), h = r();\n        for(let S = 0; S < 16; S++)h[S] = A[S];\n        _(h), _(h), _(h);\n        for(let S = 0; S < 2; S++){\n            N[0] = h[0] - 65517;\n            for(let X = 1; X < 15; X++)N[X] = h[X] - 65535 - (N[X - 1] >> 16 & 1), N[X - 1] &= 65535;\n            N[15] = h[15] - 32767 - (N[14] >> 16 & 1);\n            const W = N[15] >> 16 & 1;\n            N[14] &= 65535, C(h, N, 1 - W);\n        }\n        for(let S = 0; S < 16; S++)T[2 * S] = h[S] & 255, T[2 * S + 1] = h[S] >> 8;\n    }\n    function K(T, A) {\n        let N = 0;\n        for(let h = 0; h < 32; h++)N |= T[h] ^ A[h];\n        return (1 & N - 1 >>> 8) - 1;\n    }\n    function I(T, A) {\n        const N = new Uint8Array(32), h = new Uint8Array(32);\n        return F(N, T), F(h, A), K(N, h);\n    }\n    function D(T) {\n        const A = new Uint8Array(32);\n        return F(A, T), A[0] & 1;\n    }\n    function y(T, A) {\n        for(let N = 0; N < 16; N++)T[N] = A[2 * N] + (A[2 * N + 1] << 8);\n        T[15] &= 32767;\n    }\n    function w(T, A, N) {\n        for(let h = 0; h < 16; h++)T[h] = A[h] + N[h];\n    }\n    function f(T, A, N) {\n        for(let h = 0; h < 16; h++)T[h] = A[h] - N[h];\n    }\n    function a(T, A, N) {\n        let h, S, W = 0, X = 0, fe = 0, ve = 0, ge = 0, Se = 0, Me = 0, $e = 0, be = 0, ye = 0, pe = 0, le = 0, ue = 0, he = 0, ce = 0, re = 0, de = 0, me = 0, ne = 0, _e = 0, Ee = 0, De = 0, xe = 0, Ie = 0, Ut = 0, qt = 0, si = 0, Dt = 0, fi = 0, Ki = 0, Os = 0, qe = N[0], Fe = N[1], je = N[2], ze = N[3], Ke = N[4], Ue = N[5], Qe = N[6], Xe = N[7], Ze = N[8], et = N[9], tt = N[10], Ye = N[11], Ve = N[12], Ae = N[13], it = N[14], st = N[15];\n        h = A[0], W += h * qe, X += h * Fe, fe += h * je, ve += h * ze, ge += h * Ke, Se += h * Ue, Me += h * Qe, $e += h * Xe, be += h * Ze, ye += h * et, pe += h * tt, le += h * Ye, ue += h * Ve, he += h * Ae, ce += h * it, re += h * st, h = A[1], X += h * qe, fe += h * Fe, ve += h * je, ge += h * ze, Se += h * Ke, Me += h * Ue, $e += h * Qe, be += h * Xe, ye += h * Ze, pe += h * et, le += h * tt, ue += h * Ye, he += h * Ve, ce += h * Ae, re += h * it, de += h * st, h = A[2], fe += h * qe, ve += h * Fe, ge += h * je, Se += h * ze, Me += h * Ke, $e += h * Ue, be += h * Qe, ye += h * Xe, pe += h * Ze, le += h * et, ue += h * tt, he += h * Ye, ce += h * Ve, re += h * Ae, de += h * it, me += h * st, h = A[3], ve += h * qe, ge += h * Fe, Se += h * je, Me += h * ze, $e += h * Ke, be += h * Ue, ye += h * Qe, pe += h * Xe, le += h * Ze, ue += h * et, he += h * tt, ce += h * Ye, re += h * Ve, de += h * Ae, me += h * it, ne += h * st, h = A[4], ge += h * qe, Se += h * Fe, Me += h * je, $e += h * ze, be += h * Ke, ye += h * Ue, pe += h * Qe, le += h * Xe, ue += h * Ze, he += h * et, ce += h * tt, re += h * Ye, de += h * Ve, me += h * Ae, ne += h * it, _e += h * st, h = A[5], Se += h * qe, Me += h * Fe, $e += h * je, be += h * ze, ye += h * Ke, pe += h * Ue, le += h * Qe, ue += h * Xe, he += h * Ze, ce += h * et, re += h * tt, de += h * Ye, me += h * Ve, ne += h * Ae, _e += h * it, Ee += h * st, h = A[6], Me += h * qe, $e += h * Fe, be += h * je, ye += h * ze, pe += h * Ke, le += h * Ue, ue += h * Qe, he += h * Xe, ce += h * Ze, re += h * et, de += h * tt, me += h * Ye, ne += h * Ve, _e += h * Ae, Ee += h * it, De += h * st, h = A[7], $e += h * qe, be += h * Fe, ye += h * je, pe += h * ze, le += h * Ke, ue += h * Ue, he += h * Qe, ce += h * Xe, re += h * Ze, de += h * et, me += h * tt, ne += h * Ye, _e += h * Ve, Ee += h * Ae, De += h * it, xe += h * st, h = A[8], be += h * qe, ye += h * Fe, pe += h * je, le += h * ze, ue += h * Ke, he += h * Ue, ce += h * Qe, re += h * Xe, de += h * Ze, me += h * et, ne += h * tt, _e += h * Ye, Ee += h * Ve, De += h * Ae, xe += h * it, Ie += h * st, h = A[9], ye += h * qe, pe += h * Fe, le += h * je, ue += h * ze, he += h * Ke, ce += h * Ue, re += h * Qe, de += h * Xe, me += h * Ze, ne += h * et, _e += h * tt, Ee += h * Ye, De += h * Ve, xe += h * Ae, Ie += h * it, Ut += h * st, h = A[10], pe += h * qe, le += h * Fe, ue += h * je, he += h * ze, ce += h * Ke, re += h * Ue, de += h * Qe, me += h * Xe, ne += h * Ze, _e += h * et, Ee += h * tt, De += h * Ye, xe += h * Ve, Ie += h * Ae, Ut += h * it, qt += h * st, h = A[11], le += h * qe, ue += h * Fe, he += h * je, ce += h * ze, re += h * Ke, de += h * Ue, me += h * Qe, ne += h * Xe, _e += h * Ze, Ee += h * et, De += h * tt, xe += h * Ye, Ie += h * Ve, Ut += h * Ae, qt += h * it, si += h * st, h = A[12], ue += h * qe, he += h * Fe, ce += h * je, re += h * ze, de += h * Ke, me += h * Ue, ne += h * Qe, _e += h * Xe, Ee += h * Ze, De += h * et, xe += h * tt, Ie += h * Ye, Ut += h * Ve, qt += h * Ae, si += h * it, Dt += h * st, h = A[13], he += h * qe, ce += h * Fe, re += h * je, de += h * ze, me += h * Ke, ne += h * Ue, _e += h * Qe, Ee += h * Xe, De += h * Ze, xe += h * et, Ie += h * tt, Ut += h * Ye, qt += h * Ve, si += h * Ae, Dt += h * it, fi += h * st, h = A[14], ce += h * qe, re += h * Fe, de += h * je, me += h * ze, ne += h * Ke, _e += h * Ue, Ee += h * Qe, De += h * Xe, xe += h * Ze, Ie += h * et, Ut += h * tt, qt += h * Ye, si += h * Ve, Dt += h * Ae, fi += h * it, Ki += h * st, h = A[15], re += h * qe, de += h * Fe, me += h * je, ne += h * ze, _e += h * Ke, Ee += h * Ue, De += h * Qe, xe += h * Xe, Ie += h * Ze, Ut += h * et, qt += h * tt, si += h * Ye, Dt += h * Ve, fi += h * Ae, Ki += h * it, Os += h * st, W += 38 * de, X += 38 * me, fe += 38 * ne, ve += 38 * _e, ge += 38 * Ee, Se += 38 * De, Me += 38 * xe, $e += 38 * Ie, be += 38 * Ut, ye += 38 * qt, pe += 38 * si, le += 38 * Dt, ue += 38 * fi, he += 38 * Ki, ce += 38 * Os, S = 1, h = W + S + 65535, S = Math.floor(h / 65536), W = h - S * 65536, h = X + S + 65535, S = Math.floor(h / 65536), X = h - S * 65536, h = fe + S + 65535, S = Math.floor(h / 65536), fe = h - S * 65536, h = ve + S + 65535, S = Math.floor(h / 65536), ve = h - S * 65536, h = ge + S + 65535, S = Math.floor(h / 65536), ge = h - S * 65536, h = Se + S + 65535, S = Math.floor(h / 65536), Se = h - S * 65536, h = Me + S + 65535, S = Math.floor(h / 65536), Me = h - S * 65536, h = $e + S + 65535, S = Math.floor(h / 65536), $e = h - S * 65536, h = be + S + 65535, S = Math.floor(h / 65536), be = h - S * 65536, h = ye + S + 65535, S = Math.floor(h / 65536), ye = h - S * 65536, h = pe + S + 65535, S = Math.floor(h / 65536), pe = h - S * 65536, h = le + S + 65535, S = Math.floor(h / 65536), le = h - S * 65536, h = ue + S + 65535, S = Math.floor(h / 65536), ue = h - S * 65536, h = he + S + 65535, S = Math.floor(h / 65536), he = h - S * 65536, h = ce + S + 65535, S = Math.floor(h / 65536), ce = h - S * 65536, h = re + S + 65535, S = Math.floor(h / 65536), re = h - S * 65536, W += S - 1 + 37 * (S - 1), S = 1, h = W + S + 65535, S = Math.floor(h / 65536), W = h - S * 65536, h = X + S + 65535, S = Math.floor(h / 65536), X = h - S * 65536, h = fe + S + 65535, S = Math.floor(h / 65536), fe = h - S * 65536, h = ve + S + 65535, S = Math.floor(h / 65536), ve = h - S * 65536, h = ge + S + 65535, S = Math.floor(h / 65536), ge = h - S * 65536, h = Se + S + 65535, S = Math.floor(h / 65536), Se = h - S * 65536, h = Me + S + 65535, S = Math.floor(h / 65536), Me = h - S * 65536, h = $e + S + 65535, S = Math.floor(h / 65536), $e = h - S * 65536, h = be + S + 65535, S = Math.floor(h / 65536), be = h - S * 65536, h = ye + S + 65535, S = Math.floor(h / 65536), ye = h - S * 65536, h = pe + S + 65535, S = Math.floor(h / 65536), pe = h - S * 65536, h = le + S + 65535, S = Math.floor(h / 65536), le = h - S * 65536, h = ue + S + 65535, S = Math.floor(h / 65536), ue = h - S * 65536, h = he + S + 65535, S = Math.floor(h / 65536), he = h - S * 65536, h = ce + S + 65535, S = Math.floor(h / 65536), ce = h - S * 65536, h = re + S + 65535, S = Math.floor(h / 65536), re = h - S * 65536, W += S - 1 + 37 * (S - 1), T[0] = W, T[1] = X, T[2] = fe, T[3] = ve, T[4] = ge, T[5] = Se, T[6] = Me, T[7] = $e, T[8] = be, T[9] = ye, T[10] = pe, T[11] = le, T[12] = ue, T[13] = he, T[14] = ce, T[15] = re;\n    }\n    function l(T, A) {\n        a(T, A, A);\n    }\n    function L(T, A) {\n        const N = r();\n        let h;\n        for(h = 0; h < 16; h++)N[h] = A[h];\n        for(h = 253; h >= 0; h--)l(N, N), h !== 2 && h !== 4 && a(N, N, A);\n        for(h = 0; h < 16; h++)T[h] = N[h];\n    }\n    function v(T, A) {\n        const N = r();\n        let h;\n        for(h = 0; h < 16; h++)N[h] = A[h];\n        for(h = 250; h >= 0; h--)l(N, N), h !== 1 && a(N, N, A);\n        for(h = 0; h < 16; h++)T[h] = N[h];\n    }\n    function R(T, A) {\n        const N = r(), h = r(), S = r(), W = r(), X = r(), fe = r(), ve = r(), ge = r(), Se = r();\n        f(N, T[1], T[0]), f(Se, A[1], A[0]), a(N, N, Se), w(h, T[0], T[1]), w(Se, A[0], A[1]), a(h, h, Se), a(S, T[3], A[3]), a(S, S, d), a(W, T[2], A[2]), w(W, W, W), f(X, h, N), f(fe, W, S), w(ve, W, S), w(ge, h, N), a(T[0], X, fe), a(T[1], ge, ve), a(T[2], ve, fe), a(T[3], X, ge);\n    }\n    function $(T, A, N) {\n        for(let h = 0; h < 4; h++)C(T[h], A[h], N);\n    }\n    function q(T, A) {\n        const N = r(), h = r(), S = r();\n        L(S, A[2]), a(N, A[0], S), a(h, A[1], S), F(T, h), T[31] ^= D(N) << 7;\n    }\n    function m(T, A, N) {\n        O(T[0], o), O(T[1], c), O(T[2], c), O(T[3], o);\n        for(let h = 255; h >= 0; --h){\n            const S = N[h / 8 | 0] >> (h & 7) & 1;\n            $(T, A, S), R(A, T), R(T, T), $(T, A, S);\n        }\n    }\n    function E(T, A) {\n        const N = [\n            r(),\n            r(),\n            r(),\n            r()\n        ];\n        O(N[0], p), O(N[1], b), O(N[2], c), a(N[3], p, b), m(T, N, A);\n    }\n    function B(T) {\n        if (T.length !== i.SEED_LENGTH) throw new Error(`ed25519: seed must be ${i.SEED_LENGTH} bytes`);\n        const A = (0, t.hash)(T);\n        A[0] &= 248, A[31] &= 127, A[31] |= 64;\n        const N = new Uint8Array(32), h = [\n            r(),\n            r(),\n            r(),\n            r()\n        ];\n        E(h, A), q(N, h);\n        const S = new Uint8Array(64);\n        return S.set(T), S.set(N, 32), {\n            publicKey: N,\n            secretKey: S\n        };\n    }\n    i.generateKeyPairFromSeed = B;\n    function z(T) {\n        const A = (0, e.randomBytes)(32, T), N = B(A);\n        return (0, s.wipe)(A), N;\n    }\n    i.generateKeyPair = z;\n    function j(T) {\n        if (T.length !== i.SECRET_KEY_LENGTH) throw new Error(`ed25519: secret key must be ${i.SECRET_KEY_LENGTH} bytes`);\n        return new Uint8Array(T.subarray(32));\n    }\n    i.extractPublicKeyFromSecretKey = j;\n    const U = new Float64Array([\n        237,\n        211,\n        245,\n        92,\n        26,\n        99,\n        18,\n        88,\n        214,\n        156,\n        247,\n        162,\n        222,\n        249,\n        222,\n        20,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        16\n    ]);\n    function M(T, A) {\n        let N, h, S, W;\n        for(h = 63; h >= 32; --h){\n            for(N = 0, S = h - 32, W = h - 12; S < W; ++S)A[S] += N - 16 * A[h] * U[S - (h - 32)], N = Math.floor((A[S] + 128) / 256), A[S] -= N * 256;\n            A[S] += N, A[h] = 0;\n        }\n        for(N = 0, S = 0; S < 32; S++)A[S] += N - (A[31] >> 4) * U[S], N = A[S] >> 8, A[S] &= 255;\n        for(S = 0; S < 32; S++)A[S] -= N * U[S];\n        for(h = 0; h < 32; h++)A[h + 1] += A[h] >> 8, T[h] = A[h] & 255;\n    }\n    function H(T) {\n        const A = new Float64Array(64);\n        for(let N = 0; N < 64; N++)A[N] = T[N];\n        for(let N = 0; N < 64; N++)T[N] = 0;\n        M(T, A);\n    }\n    function te(T, A) {\n        const N = new Float64Array(64), h = [\n            r(),\n            r(),\n            r(),\n            r()\n        ], S = (0, t.hash)(T.subarray(0, 32));\n        S[0] &= 248, S[31] &= 127, S[31] |= 64;\n        const W = new Uint8Array(64);\n        W.set(S.subarray(32), 32);\n        const X = new t.SHA512();\n        X.update(W.subarray(32)), X.update(A);\n        const fe = X.digest();\n        X.clean(), H(fe), E(h, fe), q(W, h), X.reset(), X.update(W.subarray(0, 32)), X.update(T.subarray(32)), X.update(A);\n        const ve = X.digest();\n        H(ve);\n        for(let ge = 0; ge < 32; ge++)N[ge] = fe[ge];\n        for(let ge = 0; ge < 32; ge++)for(let Se = 0; Se < 32; Se++)N[ge + Se] += ve[ge] * S[Se];\n        return M(W.subarray(32), N), W;\n    }\n    i.sign = te;\n    function G(T, A) {\n        const N = r(), h = r(), S = r(), W = r(), X = r(), fe = r(), ve = r();\n        return O(T[2], c), y(T[1], A), l(S, T[1]), a(W, S, u), f(S, S, T[2]), w(W, T[2], W), l(X, W), l(fe, X), a(ve, fe, X), a(N, ve, S), a(N, N, W), v(N, N), a(N, N, S), a(N, N, W), a(N, N, W), a(T[0], N, W), l(h, T[0]), a(h, h, W), I(h, S) && a(T[0], T[0], x), l(h, T[0]), a(h, h, W), I(h, S) ? -1 : (D(T[0]) === A[31] >> 7 && f(T[0], o, T[0]), a(T[3], T[0], T[1]), 0);\n    }\n    function ie(T, A, N) {\n        const h = new Uint8Array(32), S = [\n            r(),\n            r(),\n            r(),\n            r()\n        ], W = [\n            r(),\n            r(),\n            r(),\n            r()\n        ];\n        if (N.length !== i.SIGNATURE_LENGTH) throw new Error(`ed25519: signature must be ${i.SIGNATURE_LENGTH} bytes`);\n        if (G(W, T)) return !1;\n        const X = new t.SHA512();\n        X.update(N.subarray(0, 32)), X.update(T), X.update(A);\n        const fe = X.digest();\n        return H(fe), m(S, W, fe), E(W, N.subarray(32)), R(S, W), q(h, S), !K(N, h);\n    }\n    i.verify = ie;\n    function Q(T) {\n        let A = [\n            r(),\n            r(),\n            r(),\n            r()\n        ];\n        if (G(A, T)) throw new Error(\"Ed25519: invalid public key\");\n        let N = r(), h = r(), S = A[1];\n        w(N, c, S), f(h, c, S), L(h, h), a(N, N, h);\n        let W = new Uint8Array(32);\n        return F(W, N), W;\n    }\n    i.convertPublicKeyToX25519 = Q;\n    function se(T) {\n        const A = (0, t.hash)(T.subarray(0, 32));\n        A[0] &= 248, A[31] &= 127, A[31] |= 64;\n        const N = new Uint8Array(A.subarray(0, 32));\n        return (0, s.wipe)(A), N;\n    }\n    i.convertSecretKeyToX25519 = se;\n})(nn);\nconst sd = \"EdDSA\", rd = \"JWT\", mc = \".\", bc = \"base64url\", nd = \"utf8\", od = \"utf8\", ad = \":\", cd = \"did\", hd = \"key\", mo = \"base58btc\", ud = \"z\", ld = \"K36\", dd = 32;\nfunction on(i) {\n    return globalThis.Buffer != null ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : i;\n}\nfunction wc(i = 0) {\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? on(globalThis.Buffer.allocUnsafe(i)) : new Uint8Array(i);\n}\nfunction ls(i, e) {\n    e || (e = i.reduce((r, n)=>r + n.length, 0));\n    const t = wc(e);\n    let s = 0;\n    for (const r of i)t.set(r, s), s += r.length;\n    return on(t);\n}\nfunction fd(i, e) {\n    if (i.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var t = new Uint8Array(256), s = 0; s < t.length; s++)t[s] = 255;\n    for(var r = 0; r < i.length; r++){\n        var n = i.charAt(r), o = n.charCodeAt(0);\n        if (t[o] !== 255) throw new TypeError(n + \" is ambiguous\");\n        t[o] = r;\n    }\n    var c = i.length, u = i.charAt(0), d = Math.log(c) / Math.log(256), p = Math.log(256) / Math.log(c);\n    function b(_) {\n        if (_ instanceof Uint8Array || (ArrayBuffer.isView(_) ? _ = new Uint8Array(_.buffer, _.byteOffset, _.byteLength) : Array.isArray(_) && (_ = Uint8Array.from(_))), !(_ instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (_.length === 0) return \"\";\n        for(var C = 0, F = 0, K = 0, I = _.length; K !== I && _[K] === 0;)K++, C++;\n        for(var D = (I - K) * p + 1 >>> 0, y = new Uint8Array(D); K !== I;){\n            for(var w = _[K], f = 0, a = D - 1; (w !== 0 || f < F) && a !== -1; a--, f++)w += 256 * y[a] >>> 0, y[a] = w % c >>> 0, w = w / c >>> 0;\n            if (w !== 0) throw new Error(\"Non-zero carry\");\n            F = f, K++;\n        }\n        for(var l = D - F; l !== D && y[l] === 0;)l++;\n        for(var L = u.repeat(C); l < D; ++l)L += i.charAt(y[l]);\n        return L;\n    }\n    function x(_) {\n        if (typeof _ != \"string\") throw new TypeError(\"Expected String\");\n        if (_.length === 0) return new Uint8Array();\n        var C = 0;\n        if (_[C] !== \" \") {\n            for(var F = 0, K = 0; _[C] === u;)F++, C++;\n            for(var I = (_.length - C) * d + 1 >>> 0, D = new Uint8Array(I); _[C];){\n                var y = t[_.charCodeAt(C)];\n                if (y === 255) return;\n                for(var w = 0, f = I - 1; (y !== 0 || w < K) && f !== -1; f--, w++)y += c * D[f] >>> 0, D[f] = y % 256 >>> 0, y = y / 256 >>> 0;\n                if (y !== 0) throw new Error(\"Non-zero carry\");\n                K = w, C++;\n            }\n            if (_[C] !== \" \") {\n                for(var a = I - K; a !== I && D[a] === 0;)a++;\n                for(var l = new Uint8Array(F + (I - a)), L = F; a !== I;)l[L++] = D[a++];\n                return l;\n            }\n        }\n    }\n    function O(_) {\n        var C = x(_);\n        if (C) return C;\n        throw new Error(`Non-${e} character`);\n    }\n    return {\n        encode: b,\n        decodeUnsafe: x,\n        decode: O\n    };\n}\nvar pd = fd, gd = pd;\nconst yd = (i)=>{\n    if (i instanceof Uint8Array && i.constructor.name === \"Uint8Array\") return i;\n    if (i instanceof ArrayBuffer) return new Uint8Array(i);\n    if (ArrayBuffer.isView(i)) return new Uint8Array(i.buffer, i.byteOffset, i.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, md = (i)=>new TextEncoder().encode(i), bd = (i)=>new TextDecoder().decode(i);\nclass wd {\n    constructor(e, t, s){\n        this.name = e, this.prefix = t, this.baseEncode = s;\n    }\n    encode(e) {\n        if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;\n        throw Error(\"Unknown type, must be binary type\");\n    }\n}\nclass vd {\n    constructor(e, t, s){\n        if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;\n    }\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return vc(this, e);\n    }\n}\nclass _d {\n    constructor(e){\n        this.decoders = e;\n    }\n    or(e) {\n        return vc(this, e);\n    }\n    decode(e) {\n        const t = e[0], s = this.decoders[t];\n        if (s) return s.decode(e);\n        throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n}\nconst vc = (i, e)=>new _d({\n        ...i.decoders || {\n            [i.prefix]: i\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nclass Ed {\n    constructor(e, t, s, r){\n        this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = r, this.encoder = new wd(e, t, s), this.decoder = new vd(e, t, r);\n    }\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n}\nconst cr = ({ name: i, prefix: e, encode: t, decode: s })=>new Ed(i, e, t, s), ps = ({ prefix: i, name: e, alphabet: t })=>{\n    const { encode: s, decode: r } = gd(t, e);\n    return cr({\n        prefix: i,\n        name: e,\n        encode: s,\n        decode: (n)=>yd(r(n))\n    });\n}, Sd = (i, e, t, s)=>{\n    const r = {};\n    for(let p = 0; p < e.length; ++p)r[e[p]] = p;\n    let n = i.length;\n    for(; i[n - 1] === \"=\";)--n;\n    const o = new Uint8Array(n * t / 8 | 0);\n    let c = 0, u = 0, d = 0;\n    for(let p = 0; p < n; ++p){\n        const b = r[i[p]];\n        if (b === void 0) throw new SyntaxError(`Non-${s} character`);\n        u = u << t | b, c += t, c >= 8 && (c -= 8, o[d++] = 255 & u >> c);\n    }\n    if (c >= t || 255 & u << 8 - c) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, Id = (i, e, t)=>{\n    const s = e[e.length - 1] === \"=\", r = (1 << t) - 1;\n    let n = \"\", o = 0, c = 0;\n    for(let u = 0; u < i.length; ++u)for(c = c << 8 | i[u], o += 8; o > t;)o -= t, n += e[r & c >> o];\n    if (o && (n += e[r & c << t - o]), s) for(; n.length * t & 7;)n += \"=\";\n    return n;\n}, ut = ({ name: i, prefix: e, bitsPerChar: t, alphabet: s })=>cr({\n        prefix: e,\n        name: i,\n        encode (r) {\n            return Id(r, s, t);\n        },\n        decode (r) {\n            return Sd(r, s, t, i);\n        }\n    }), Dd = cr({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (i)=>bd(i),\n    decode: (i)=>md(i)\n}), xd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    identity: Dd\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), Od = ut({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n}), Nd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    base2: Od\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), Pd = ut({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n}), Rd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    base8: Pd\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), Cd = ps({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n}), Ad = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    base10: Cd\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), Td = ut({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), $d = ut({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n}), Fd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    base16: Td,\n    base16upper: $d\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), Ud = ut({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), Ld = ut({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), Md = ut({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), qd = ut({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), jd = ut({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), zd = ut({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), Kd = ut({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), Vd = ut({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), Bd = ut({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n}), kd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    base32: Ud,\n    base32hex: jd,\n    base32hexpad: Kd,\n    base32hexpadupper: Vd,\n    base32hexupper: zd,\n    base32pad: Md,\n    base32padupper: qd,\n    base32upper: Ld,\n    base32z: Bd\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), Hd = ps({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), Gd = ps({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n}), Wd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    base36: Hd,\n    base36upper: Gd\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), Yd = ps({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Jd = ps({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n}), Qd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    base58btc: Yd,\n    base58flickr: Jd\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), Xd = ut({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), Zd = ut({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), ef = ut({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), tf = ut({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n}), sf = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    base64: Xd,\n    base64pad: Zd,\n    base64url: ef,\n    base64urlpad: tf\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), _c = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), rf = _c.reduce((i, e, t)=>(i[t] = e, i), []), nf = _c.reduce((i, e, t)=>(i[e.codePointAt(0)] = t, i), []);\nfunction of(i) {\n    return i.reduce((e, t)=>(e += rf[t], e), \"\");\n}\nfunction af(i) {\n    const e = [];\n    for (const t of i){\n        const s = nf[t.codePointAt(0)];\n        if (s === void 0) throw new Error(`Non-base256emoji character: ${t}`);\n        e.push(s);\n    }\n    return new Uint8Array(e);\n}\nconst cf = cr({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: of,\n    decode: af\n}), hf = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    base256emoji: cf\n}, Symbol.toStringTag, {\n    value: \"Module\"\n}));\nnew TextEncoder();\nnew TextDecoder();\nconst bo = {\n    ...xd,\n    ...Nd,\n    ...Rd,\n    ...Ad,\n    ...Fd,\n    ...kd,\n    ...Wd,\n    ...Qd,\n    ...sf,\n    ...hf\n};\nfunction Ec(i, e, t, s) {\n    return {\n        name: i,\n        prefix: e,\n        encoder: {\n            name: i,\n            prefix: e,\n            encode: t\n        },\n        decoder: {\n            decode: s\n        }\n    };\n}\nconst wo = Ec(\"utf8\", \"u\", (i)=>\"u\" + new TextDecoder(\"utf8\").decode(i), (i)=>new TextEncoder().encode(i.substring(1))), Dr = Ec(\"ascii\", \"a\", (i)=>{\n    let e = \"a\";\n    for(let t = 0; t < i.length; t++)e += String.fromCharCode(i[t]);\n    return e;\n}, (i)=>{\n    i = i.substring(1);\n    const e = wc(i.length);\n    for(let t = 0; t < i.length; t++)e[t] = i.charCodeAt(t);\n    return e;\n}), Sc = {\n    utf8: wo,\n    \"utf-8\": wo,\n    hex: bo.base16,\n    latin1: Dr,\n    ascii: Dr,\n    binary: Dr,\n    ...bo\n};\nfunction Ne(i, e = \"utf8\") {\n    const t = Sc[e];\n    if (!t) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(i.buffer, i.byteOffset, i.byteLength).toString(\"utf8\") : t.encoder.encode(i).substring(1);\n}\nfunction Ce(i, e = \"utf8\") {\n    const t = Sc[e];\n    if (!t) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? on(globalThis.Buffer.from(i, \"utf-8\")) : t.decoder.decode(`${t.prefix}${i}`);\n}\nfunction Gs(i) {\n    return Ne(Ce(rr(i), nd), bc);\n}\nfunction an(i) {\n    const e = Ce(ld, mo), t = ud + Ne(ls([\n        e,\n        i\n    ]), mo);\n    return [\n        cd,\n        hd,\n        t\n    ].join(ad);\n}\nfunction uf(i) {\n    return Ne(i, bc);\n}\nfunction lf(i) {\n    return Ce([\n        Gs(i.header),\n        Gs(i.payload)\n    ].join(mc), od);\n}\nfunction df(i) {\n    return [\n        Gs(i.header),\n        Gs(i.payload),\n        uf(i.signature)\n    ].join(mc);\n}\nfunction Ws(i = li.randomBytes(dd)) {\n    return nn.generateKeyPairFromSeed(i);\n}\nasync function Ic(i, e, t, s, r = V.fromMiliseconds(Date.now())) {\n    const n = {\n        alg: sd,\n        typ: rd\n    }, o = an(s.publicKey), c = r + t, u = {\n        iss: o,\n        sub: i,\n        aud: e,\n        iat: r,\n        exp: c\n    }, d = lf({\n        header: n,\n        payload: u\n    }), p = nn.sign(s.secretKey, d);\n    return df({\n        header: n,\n        payload: u,\n        signature: p\n    });\n}\nvar gs = {}, hr = {};\nObject.defineProperty(hr, \"__esModule\", {\n    value: !0\n});\nvar pt = oe, Kr = Pt, ff = 20;\nfunction pf(i, e, t) {\n    for(var s = 1634760805, r = 857760878, n = 2036477234, o = 1797285236, c = t[3] << 24 | t[2] << 16 | t[1] << 8 | t[0], u = t[7] << 24 | t[6] << 16 | t[5] << 8 | t[4], d = t[11] << 24 | t[10] << 16 | t[9] << 8 | t[8], p = t[15] << 24 | t[14] << 16 | t[13] << 8 | t[12], b = t[19] << 24 | t[18] << 16 | t[17] << 8 | t[16], x = t[23] << 24 | t[22] << 16 | t[21] << 8 | t[20], O = t[27] << 24 | t[26] << 16 | t[25] << 8 | t[24], _ = t[31] << 24 | t[30] << 16 | t[29] << 8 | t[28], C = e[3] << 24 | e[2] << 16 | e[1] << 8 | e[0], F = e[7] << 24 | e[6] << 16 | e[5] << 8 | e[4], K = e[11] << 24 | e[10] << 16 | e[9] << 8 | e[8], I = e[15] << 24 | e[14] << 16 | e[13] << 8 | e[12], D = s, y = r, w = n, f = o, a = c, l = u, L = d, v = p, R = b, $ = x, q = O, m = _, E = C, B = F, z = K, j = I, U = 0; U < ff; U += 2)D = D + a | 0, E ^= D, E = E >>> 32 - 16 | E << 16, R = R + E | 0, a ^= R, a = a >>> 32 - 12 | a << 12, y = y + l | 0, B ^= y, B = B >>> 32 - 16 | B << 16, $ = $ + B | 0, l ^= $, l = l >>> 32 - 12 | l << 12, w = w + L | 0, z ^= w, z = z >>> 32 - 16 | z << 16, q = q + z | 0, L ^= q, L = L >>> 32 - 12 | L << 12, f = f + v | 0, j ^= f, j = j >>> 32 - 16 | j << 16, m = m + j | 0, v ^= m, v = v >>> 32 - 12 | v << 12, w = w + L | 0, z ^= w, z = z >>> 32 - 8 | z << 8, q = q + z | 0, L ^= q, L = L >>> 32 - 7 | L << 7, f = f + v | 0, j ^= f, j = j >>> 32 - 8 | j << 8, m = m + j | 0, v ^= m, v = v >>> 32 - 7 | v << 7, y = y + l | 0, B ^= y, B = B >>> 32 - 8 | B << 8, $ = $ + B | 0, l ^= $, l = l >>> 32 - 7 | l << 7, D = D + a | 0, E ^= D, E = E >>> 32 - 8 | E << 8, R = R + E | 0, a ^= R, a = a >>> 32 - 7 | a << 7, D = D + l | 0, j ^= D, j = j >>> 32 - 16 | j << 16, q = q + j | 0, l ^= q, l = l >>> 32 - 12 | l << 12, y = y + L | 0, E ^= y, E = E >>> 32 - 16 | E << 16, m = m + E | 0, L ^= m, L = L >>> 32 - 12 | L << 12, w = w + v | 0, B ^= w, B = B >>> 32 - 16 | B << 16, R = R + B | 0, v ^= R, v = v >>> 32 - 12 | v << 12, f = f + a | 0, z ^= f, z = z >>> 32 - 16 | z << 16, $ = $ + z | 0, a ^= $, a = a >>> 32 - 12 | a << 12, w = w + v | 0, B ^= w, B = B >>> 32 - 8 | B << 8, R = R + B | 0, v ^= R, v = v >>> 32 - 7 | v << 7, f = f + a | 0, z ^= f, z = z >>> 32 - 8 | z << 8, $ = $ + z | 0, a ^= $, a = a >>> 32 - 7 | a << 7, y = y + L | 0, E ^= y, E = E >>> 32 - 8 | E << 8, m = m + E | 0, L ^= m, L = L >>> 32 - 7 | L << 7, D = D + l | 0, j ^= D, j = j >>> 32 - 8 | j << 8, q = q + j | 0, l ^= q, l = l >>> 32 - 7 | l << 7;\n    pt.writeUint32LE(D + s | 0, i, 0), pt.writeUint32LE(y + r | 0, i, 4), pt.writeUint32LE(w + n | 0, i, 8), pt.writeUint32LE(f + o | 0, i, 12), pt.writeUint32LE(a + c | 0, i, 16), pt.writeUint32LE(l + u | 0, i, 20), pt.writeUint32LE(L + d | 0, i, 24), pt.writeUint32LE(v + p | 0, i, 28), pt.writeUint32LE(R + b | 0, i, 32), pt.writeUint32LE($ + x | 0, i, 36), pt.writeUint32LE(q + O | 0, i, 40), pt.writeUint32LE(m + _ | 0, i, 44), pt.writeUint32LE(E + C | 0, i, 48), pt.writeUint32LE(B + F | 0, i, 52), pt.writeUint32LE(z + K | 0, i, 56), pt.writeUint32LE(j + I | 0, i, 60);\n}\nfunction Dc(i, e, t, s, r) {\n    if (r === void 0 && (r = 0), i.length !== 32) throw new Error(\"ChaCha: key size must be 32 bytes\");\n    if (s.length < t.length) throw new Error(\"ChaCha: destination is shorter than source\");\n    var n, o;\n    if (r === 0) {\n        if (e.length !== 8 && e.length !== 12) throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n        n = new Uint8Array(16), o = n.length - e.length, n.set(e, o);\n    } else {\n        if (e.length !== 16) throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n        n = e, o = r;\n    }\n    for(var c = new Uint8Array(64), u = 0; u < t.length; u += 64){\n        pf(c, n, i);\n        for(var d = u; d < u + 64 && d < t.length; d++)s[d] = t[d] ^ c[d - u];\n        yf(n, 0, o);\n    }\n    return Kr.wipe(c), r === 0 && Kr.wipe(n), s;\n}\nhr.streamXOR = Dc;\nfunction gf(i, e, t, s) {\n    return s === void 0 && (s = 0), Kr.wipe(t), Dc(i, e, t, t, s);\n}\nhr.stream = gf;\nfunction yf(i, e, t) {\n    for(var s = 1; t--;)s = s + (i[e] & 255) | 0, i[e] = s & 255, s >>>= 8, e++;\n    if (s > 0) throw new Error(\"ChaCha: counter overflow\");\n}\nvar xc = {}, di = {};\nObject.defineProperty(di, \"__esModule\", {\n    value: !0\n});\nfunction mf(i, e, t) {\n    return ~(i - 1) & e | i - 1 & t;\n}\ndi.select = mf;\nfunction bf(i, e) {\n    return (i | 0) - (e | 0) - 1 >>> 31 & 1;\n}\ndi.lessOrEqual = bf;\nfunction Oc(i, e) {\n    if (i.length !== e.length) return 0;\n    for(var t = 0, s = 0; s < i.length; s++)t |= i[s] ^ e[s];\n    return 1 & t - 1 >>> 8;\n}\ndi.compare = Oc;\nfunction wf(i, e) {\n    return i.length === 0 || e.length === 0 ? !1 : Oc(i, e) !== 0;\n}\ndi.equal = wf;\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    });\n    var e = di, t = Pt;\n    i.DIGEST_LENGTH = 16;\n    var s = /** @class */ function() {\n        function o(c) {\n            this.digestLength = i.DIGEST_LENGTH, this._buffer = new Uint8Array(16), this._r = new Uint16Array(10), this._h = new Uint16Array(10), this._pad = new Uint16Array(8), this._leftover = 0, this._fin = 0, this._finished = !1;\n            var u = c[0] | c[1] << 8;\n            this._r[0] = u & 8191;\n            var d = c[2] | c[3] << 8;\n            this._r[1] = (u >>> 13 | d << 3) & 8191;\n            var p = c[4] | c[5] << 8;\n            this._r[2] = (d >>> 10 | p << 6) & 7939;\n            var b = c[6] | c[7] << 8;\n            this._r[3] = (p >>> 7 | b << 9) & 8191;\n            var x = c[8] | c[9] << 8;\n            this._r[4] = (b >>> 4 | x << 12) & 255, this._r[5] = x >>> 1 & 8190;\n            var O = c[10] | c[11] << 8;\n            this._r[6] = (x >>> 14 | O << 2) & 8191;\n            var _ = c[12] | c[13] << 8;\n            this._r[7] = (O >>> 11 | _ << 5) & 8065;\n            var C = c[14] | c[15] << 8;\n            this._r[8] = (_ >>> 8 | C << 8) & 8191, this._r[9] = C >>> 5 & 127, this._pad[0] = c[16] | c[17] << 8, this._pad[1] = c[18] | c[19] << 8, this._pad[2] = c[20] | c[21] << 8, this._pad[3] = c[22] | c[23] << 8, this._pad[4] = c[24] | c[25] << 8, this._pad[5] = c[26] | c[27] << 8, this._pad[6] = c[28] | c[29] << 8, this._pad[7] = c[30] | c[31] << 8;\n        }\n        return o.prototype._blocks = function(c, u, d) {\n            for(var p = this._fin ? 0 : 2048, b = this._h[0], x = this._h[1], O = this._h[2], _ = this._h[3], C = this._h[4], F = this._h[5], K = this._h[6], I = this._h[7], D = this._h[8], y = this._h[9], w = this._r[0], f = this._r[1], a = this._r[2], l = this._r[3], L = this._r[4], v = this._r[5], R = this._r[6], $ = this._r[7], q = this._r[8], m = this._r[9]; d >= 16;){\n                var E = c[u + 0] | c[u + 1] << 8;\n                b += E & 8191;\n                var B = c[u + 2] | c[u + 3] << 8;\n                x += (E >>> 13 | B << 3) & 8191;\n                var z = c[u + 4] | c[u + 5] << 8;\n                O += (B >>> 10 | z << 6) & 8191;\n                var j = c[u + 6] | c[u + 7] << 8;\n                _ += (z >>> 7 | j << 9) & 8191;\n                var U = c[u + 8] | c[u + 9] << 8;\n                C += (j >>> 4 | U << 12) & 8191, F += U >>> 1 & 8191;\n                var M = c[u + 10] | c[u + 11] << 8;\n                K += (U >>> 14 | M << 2) & 8191;\n                var H = c[u + 12] | c[u + 13] << 8;\n                I += (M >>> 11 | H << 5) & 8191;\n                var te = c[u + 14] | c[u + 15] << 8;\n                D += (H >>> 8 | te << 8) & 8191, y += te >>> 5 | p;\n                var G = 0, ie = G;\n                ie += b * w, ie += x * (5 * m), ie += O * (5 * q), ie += _ * (5 * $), ie += C * (5 * R), G = ie >>> 13, ie &= 8191, ie += F * (5 * v), ie += K * (5 * L), ie += I * (5 * l), ie += D * (5 * a), ie += y * (5 * f), G += ie >>> 13, ie &= 8191;\n                var Q = G;\n                Q += b * f, Q += x * w, Q += O * (5 * m), Q += _ * (5 * q), Q += C * (5 * $), G = Q >>> 13, Q &= 8191, Q += F * (5 * R), Q += K * (5 * v), Q += I * (5 * L), Q += D * (5 * l), Q += y * (5 * a), G += Q >>> 13, Q &= 8191;\n                var se = G;\n                se += b * a, se += x * f, se += O * w, se += _ * (5 * m), se += C * (5 * q), G = se >>> 13, se &= 8191, se += F * (5 * $), se += K * (5 * R), se += I * (5 * v), se += D * (5 * L), se += y * (5 * l), G += se >>> 13, se &= 8191;\n                var T = G;\n                T += b * l, T += x * a, T += O * f, T += _ * w, T += C * (5 * m), G = T >>> 13, T &= 8191, T += F * (5 * q), T += K * (5 * $), T += I * (5 * R), T += D * (5 * v), T += y * (5 * L), G += T >>> 13, T &= 8191;\n                var A = G;\n                A += b * L, A += x * l, A += O * a, A += _ * f, A += C * w, G = A >>> 13, A &= 8191, A += F * (5 * m), A += K * (5 * q), A += I * (5 * $), A += D * (5 * R), A += y * (5 * v), G += A >>> 13, A &= 8191;\n                var N = G;\n                N += b * v, N += x * L, N += O * l, N += _ * a, N += C * f, G = N >>> 13, N &= 8191, N += F * w, N += K * (5 * m), N += I * (5 * q), N += D * (5 * $), N += y * (5 * R), G += N >>> 13, N &= 8191;\n                var h = G;\n                h += b * R, h += x * v, h += O * L, h += _ * l, h += C * a, G = h >>> 13, h &= 8191, h += F * f, h += K * w, h += I * (5 * m), h += D * (5 * q), h += y * (5 * $), G += h >>> 13, h &= 8191;\n                var S = G;\n                S += b * $, S += x * R, S += O * v, S += _ * L, S += C * l, G = S >>> 13, S &= 8191, S += F * a, S += K * f, S += I * w, S += D * (5 * m), S += y * (5 * q), G += S >>> 13, S &= 8191;\n                var W = G;\n                W += b * q, W += x * $, W += O * R, W += _ * v, W += C * L, G = W >>> 13, W &= 8191, W += F * l, W += K * a, W += I * f, W += D * w, W += y * (5 * m), G += W >>> 13, W &= 8191;\n                var X = G;\n                X += b * m, X += x * q, X += O * $, X += _ * R, X += C * v, G = X >>> 13, X &= 8191, X += F * L, X += K * l, X += I * a, X += D * f, X += y * w, G += X >>> 13, X &= 8191, G = (G << 2) + G | 0, G = G + ie | 0, ie = G & 8191, G = G >>> 13, Q += G, b = ie, x = Q, O = se, _ = T, C = A, F = N, K = h, I = S, D = W, y = X, u += 16, d -= 16;\n            }\n            this._h[0] = b, this._h[1] = x, this._h[2] = O, this._h[3] = _, this._h[4] = C, this._h[5] = F, this._h[6] = K, this._h[7] = I, this._h[8] = D, this._h[9] = y;\n        }, o.prototype.finish = function(c, u) {\n            u === void 0 && (u = 0);\n            var d = new Uint16Array(10), p, b, x, O;\n            if (this._leftover) {\n                for(O = this._leftover, this._buffer[O++] = 1; O < 16; O++)this._buffer[O] = 0;\n                this._fin = 1, this._blocks(this._buffer, 0, 16);\n            }\n            for(p = this._h[1] >>> 13, this._h[1] &= 8191, O = 2; O < 10; O++)this._h[O] += p, p = this._h[O] >>> 13, this._h[O] &= 8191;\n            for(this._h[0] += p * 5, p = this._h[0] >>> 13, this._h[0] &= 8191, this._h[1] += p, p = this._h[1] >>> 13, this._h[1] &= 8191, this._h[2] += p, d[0] = this._h[0] + 5, p = d[0] >>> 13, d[0] &= 8191, O = 1; O < 10; O++)d[O] = this._h[O] + p, p = d[O] >>> 13, d[O] &= 8191;\n            for(d[9] -= 8192, b = (p ^ 1) - 1, O = 0; O < 10; O++)d[O] &= b;\n            for(b = ~b, O = 0; O < 10; O++)this._h[O] = this._h[O] & b | d[O];\n            for(this._h[0] = (this._h[0] | this._h[1] << 13) & 65535, this._h[1] = (this._h[1] >>> 3 | this._h[2] << 10) & 65535, this._h[2] = (this._h[2] >>> 6 | this._h[3] << 7) & 65535, this._h[3] = (this._h[3] >>> 9 | this._h[4] << 4) & 65535, this._h[4] = (this._h[4] >>> 12 | this._h[5] << 1 | this._h[6] << 14) & 65535, this._h[5] = (this._h[6] >>> 2 | this._h[7] << 11) & 65535, this._h[6] = (this._h[7] >>> 5 | this._h[8] << 8) & 65535, this._h[7] = (this._h[8] >>> 8 | this._h[9] << 5) & 65535, x = this._h[0] + this._pad[0], this._h[0] = x & 65535, O = 1; O < 8; O++)x = (this._h[O] + this._pad[O] | 0) + (x >>> 16) | 0, this._h[O] = x & 65535;\n            return c[u + 0] = this._h[0] >>> 0, c[u + 1] = this._h[0] >>> 8, c[u + 2] = this._h[1] >>> 0, c[u + 3] = this._h[1] >>> 8, c[u + 4] = this._h[2] >>> 0, c[u + 5] = this._h[2] >>> 8, c[u + 6] = this._h[3] >>> 0, c[u + 7] = this._h[3] >>> 8, c[u + 8] = this._h[4] >>> 0, c[u + 9] = this._h[4] >>> 8, c[u + 10] = this._h[5] >>> 0, c[u + 11] = this._h[5] >>> 8, c[u + 12] = this._h[6] >>> 0, c[u + 13] = this._h[6] >>> 8, c[u + 14] = this._h[7] >>> 0, c[u + 15] = this._h[7] >>> 8, this._finished = !0, this;\n        }, o.prototype.update = function(c) {\n            var u = 0, d = c.length, p;\n            if (this._leftover) {\n                p = 16 - this._leftover, p > d && (p = d);\n                for(var b = 0; b < p; b++)this._buffer[this._leftover + b] = c[u + b];\n                if (d -= p, u += p, this._leftover += p, this._leftover < 16) return this;\n                this._blocks(this._buffer, 0, 16), this._leftover = 0;\n            }\n            if (d >= 16 && (p = d - d % 16, this._blocks(c, u, p), u += p, d -= p), d) {\n                for(var b = 0; b < d; b++)this._buffer[this._leftover + b] = c[u + b];\n                this._leftover += d;\n            }\n            return this;\n        }, o.prototype.digest = function() {\n            if (this._finished) throw new Error(\"Poly1305 was finished\");\n            var c = new Uint8Array(16);\n            return this.finish(c), c;\n        }, o.prototype.clean = function() {\n            return t.wipe(this._buffer), t.wipe(this._r), t.wipe(this._h), t.wipe(this._pad), this._leftover = 0, this._fin = 0, this._finished = !0, this;\n        }, o;\n    }();\n    i.Poly1305 = s;\n    function r(o, c) {\n        var u = new s(o);\n        u.update(c);\n        var d = u.digest();\n        return u.clean(), d;\n    }\n    i.oneTimeAuth = r;\n    function n(o, c) {\n        return o.length !== i.DIGEST_LENGTH || c.length !== i.DIGEST_LENGTH ? !1 : e.equal(o, c);\n    }\n    i.equal = n;\n})(xc);\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    });\n    var e = hr, t = xc, s = Pt, r = oe, n = di;\n    i.KEY_LENGTH = 32, i.NONCE_LENGTH = 12, i.TAG_LENGTH = 16;\n    var o = new Uint8Array(16), c = /** @class */ function() {\n        function u(d) {\n            if (this.nonceLength = i.NONCE_LENGTH, this.tagLength = i.TAG_LENGTH, d.length !== i.KEY_LENGTH) throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n            this._key = new Uint8Array(d);\n        }\n        return u.prototype.seal = function(d, p, b, x) {\n            if (d.length > 16) throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n            var O = new Uint8Array(16);\n            O.set(d, O.length - d.length);\n            var _ = new Uint8Array(32);\n            e.stream(this._key, O, _, 4);\n            var C = p.length + this.tagLength, F;\n            if (x) {\n                if (x.length !== C) throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n                F = x;\n            } else F = new Uint8Array(C);\n            return e.streamXOR(this._key, O, p, F, 4), this._authenticate(F.subarray(F.length - this.tagLength, F.length), _, F.subarray(0, F.length - this.tagLength), b), s.wipe(O), F;\n        }, u.prototype.open = function(d, p, b, x) {\n            if (d.length > 16) throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n            if (p.length < this.tagLength) return null;\n            var O = new Uint8Array(16);\n            O.set(d, O.length - d.length);\n            var _ = new Uint8Array(32);\n            e.stream(this._key, O, _, 4);\n            var C = new Uint8Array(this.tagLength);\n            if (this._authenticate(C, _, p.subarray(0, p.length - this.tagLength), b), !n.equal(C, p.subarray(p.length - this.tagLength, p.length))) return null;\n            var F = p.length - this.tagLength, K;\n            if (x) {\n                if (x.length !== F) throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n                K = x;\n            } else K = new Uint8Array(F);\n            return e.streamXOR(this._key, O, p.subarray(0, p.length - this.tagLength), K, 4), s.wipe(O), K;\n        }, u.prototype.clean = function() {\n            return s.wipe(this._key), this;\n        }, u.prototype._authenticate = function(d, p, b, x) {\n            var O = new t.Poly1305(p);\n            x && (O.update(x), x.length % 16 > 0 && O.update(o.subarray(x.length % 16))), O.update(b), b.length % 16 > 0 && O.update(o.subarray(b.length % 16));\n            var _ = new Uint8Array(8);\n            x && r.writeUint64LE(x.length, _), O.update(_), r.writeUint64LE(b.length, _), O.update(_);\n            for(var C = O.digest(), F = 0; F < C.length; F++)d[F] = C[F];\n            O.clean(), s.wipe(C), s.wipe(_);\n        }, u;\n    }();\n    i.ChaCha20Poly1305 = c;\n})(gs);\nvar Nc = {}, ys = {}, cn = {};\nObject.defineProperty(cn, \"__esModule\", {\n    value: !0\n});\nfunction vf(i) {\n    return typeof i.saveState < \"u\" && typeof i.restoreState < \"u\" && typeof i.cleanSavedState < \"u\";\n}\ncn.isSerializableHash = vf;\nObject.defineProperty(ys, \"__esModule\", {\n    value: !0\n});\nvar jt = cn, _f = di, Ef = Pt, Pc = /** @class */ function() {\n    function i(e, t) {\n        this._finished = !1, this._inner = new e(), this._outer = new e(), this.blockSize = this._outer.blockSize, this.digestLength = this._outer.digestLength;\n        var s = new Uint8Array(this.blockSize);\n        t.length > this.blockSize ? this._inner.update(t).finish(s).clean() : s.set(t);\n        for(var r = 0; r < s.length; r++)s[r] ^= 54;\n        this._inner.update(s);\n        for(var r = 0; r < s.length; r++)s[r] ^= 106;\n        this._outer.update(s), jt.isSerializableHash(this._inner) && jt.isSerializableHash(this._outer) && (this._innerKeyedState = this._inner.saveState(), this._outerKeyedState = this._outer.saveState()), Ef.wipe(s);\n    }\n    return i.prototype.reset = function() {\n        if (!jt.isSerializableHash(this._inner) || !jt.isSerializableHash(this._outer)) throw new Error(\"hmac: can't reset() because hash doesn't implement restoreState()\");\n        return this._inner.restoreState(this._innerKeyedState), this._outer.restoreState(this._outerKeyedState), this._finished = !1, this;\n    }, i.prototype.clean = function() {\n        jt.isSerializableHash(this._inner) && this._inner.cleanSavedState(this._innerKeyedState), jt.isSerializableHash(this._outer) && this._outer.cleanSavedState(this._outerKeyedState), this._inner.clean(), this._outer.clean();\n    }, i.prototype.update = function(e) {\n        return this._inner.update(e), this;\n    }, i.prototype.finish = function(e) {\n        return this._finished ? (this._outer.finish(e), this) : (this._inner.finish(e), this._outer.update(e.subarray(0, this.digestLength)).finish(e), this._finished = !0, this);\n    }, i.prototype.digest = function() {\n        var e = new Uint8Array(this.digestLength);\n        return this.finish(e), e;\n    }, i.prototype.saveState = function() {\n        if (!jt.isSerializableHash(this._inner)) throw new Error(\"hmac: can't saveState() because hash doesn't implement it\");\n        return this._inner.saveState();\n    }, i.prototype.restoreState = function(e) {\n        if (!jt.isSerializableHash(this._inner) || !jt.isSerializableHash(this._outer)) throw new Error(\"hmac: can't restoreState() because hash doesn't implement it\");\n        return this._inner.restoreState(e), this._outer.restoreState(this._outerKeyedState), this._finished = !1, this;\n    }, i.prototype.cleanSavedState = function(e) {\n        if (!jt.isSerializableHash(this._inner)) throw new Error(\"hmac: can't cleanSavedState() because hash doesn't implement it\");\n        this._inner.cleanSavedState(e);\n    }, i;\n}();\nys.HMAC = Pc;\nfunction Sf(i, e, t) {\n    var s = new Pc(i, e);\n    s.update(t);\n    var r = s.digest();\n    return s.clean(), r;\n}\nys.hmac = Sf;\nys.equal = _f.equal;\nObject.defineProperty(Nc, \"__esModule\", {\n    value: !0\n});\nvar vo = ys, _o = Pt, If = /** @class */ function() {\n    function i(e, t, s, r) {\n        s === void 0 && (s = new Uint8Array(0)), this._counter = new Uint8Array(1), this._hash = e, this._info = r;\n        var n = vo.hmac(this._hash, s, t);\n        this._hmac = new vo.HMAC(e, n), this._buffer = new Uint8Array(this._hmac.digestLength), this._bufpos = this._buffer.length;\n    }\n    return i.prototype._fillBuffer = function() {\n        this._counter[0]++;\n        var e = this._counter[0];\n        if (e === 0) throw new Error(\"hkdf: cannot expand more\");\n        this._hmac.reset(), e > 1 && this._hmac.update(this._buffer), this._info && this._hmac.update(this._info), this._hmac.update(this._counter), this._hmac.finish(this._buffer), this._bufpos = 0;\n    }, i.prototype.expand = function(e) {\n        for(var t = new Uint8Array(e), s = 0; s < t.length; s++)this._bufpos === this._buffer.length && this._fillBuffer(), t[s] = this._buffer[this._bufpos++];\n        return t;\n    }, i.prototype.clean = function() {\n        this._hmac.clean(), _o.wipe(this._buffer), _o.wipe(this._counter), this._bufpos = 0;\n    }, i;\n}(), Rc = Nc.HKDF = If, Si = {};\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    });\n    var e = oe, t = Pt;\n    i.DIGEST_LENGTH = 32, i.BLOCK_SIZE = 64;\n    var s = /** @class */ function() {\n        function c() {\n            this.digestLength = i.DIGEST_LENGTH, this.blockSize = i.BLOCK_SIZE, this._state = new Int32Array(8), this._temp = new Int32Array(64), this._buffer = new Uint8Array(128), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this.reset();\n        }\n        return c.prototype._initState = function() {\n            this._state[0] = 1779033703, this._state[1] = 3144134277, this._state[2] = 1013904242, this._state[3] = 2773480762, this._state[4] = 1359893119, this._state[5] = 2600822924, this._state[6] = 528734635, this._state[7] = 1541459225;\n        }, c.prototype.reset = function() {\n            return this._initState(), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this;\n        }, c.prototype.clean = function() {\n            t.wipe(this._buffer), t.wipe(this._temp), this.reset();\n        }, c.prototype.update = function(u, d) {\n            if (d === void 0 && (d = u.length), this._finished) throw new Error(\"SHA256: can't update because hash was finished.\");\n            var p = 0;\n            if (this._bytesHashed += d, this._bufferLength > 0) {\n                for(; this._bufferLength < this.blockSize && d > 0;)this._buffer[this._bufferLength++] = u[p++], d--;\n                this._bufferLength === this.blockSize && (n(this._temp, this._state, this._buffer, 0, this.blockSize), this._bufferLength = 0);\n            }\n            for(d >= this.blockSize && (p = n(this._temp, this._state, u, p, d), d %= this.blockSize); d > 0;)this._buffer[this._bufferLength++] = u[p++], d--;\n            return this;\n        }, c.prototype.finish = function(u) {\n            if (!this._finished) {\n                var d = this._bytesHashed, p = this._bufferLength, b = d / 536870912 | 0, x = d << 3, O = d % 64 < 56 ? 64 : 128;\n                this._buffer[p] = 128;\n                for(var _ = p + 1; _ < O - 8; _++)this._buffer[_] = 0;\n                e.writeUint32BE(b, this._buffer, O - 8), e.writeUint32BE(x, this._buffer, O - 4), n(this._temp, this._state, this._buffer, 0, O), this._finished = !0;\n            }\n            for(var _ = 0; _ < this.digestLength / 4; _++)e.writeUint32BE(this._state[_], u, _ * 4);\n            return this;\n        }, c.prototype.digest = function() {\n            var u = new Uint8Array(this.digestLength);\n            return this.finish(u), u;\n        }, c.prototype.saveState = function() {\n            if (this._finished) throw new Error(\"SHA256: cannot save finished state\");\n            return {\n                state: new Int32Array(this._state),\n                buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,\n                bufferLength: this._bufferLength,\n                bytesHashed: this._bytesHashed\n            };\n        }, c.prototype.restoreState = function(u) {\n            return this._state.set(u.state), this._bufferLength = u.bufferLength, u.buffer && this._buffer.set(u.buffer), this._bytesHashed = u.bytesHashed, this._finished = !1, this;\n        }, c.prototype.cleanSavedState = function(u) {\n            t.wipe(u.state), u.buffer && t.wipe(u.buffer), u.bufferLength = 0, u.bytesHashed = 0;\n        }, c;\n    }();\n    i.SHA256 = s;\n    var r = new Int32Array([\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n    ]);\n    function n(c, u, d, p, b) {\n        for(; b >= 64;){\n            for(var x = u[0], O = u[1], _ = u[2], C = u[3], F = u[4], K = u[5], I = u[6], D = u[7], y = 0; y < 16; y++){\n                var w = p + y * 4;\n                c[y] = e.readUint32BE(d, w);\n            }\n            for(var y = 16; y < 64; y++){\n                var f = c[y - 2], a = (f >>> 17 | f << 32 - 17) ^ (f >>> 19 | f << 32 - 19) ^ f >>> 10;\n                f = c[y - 15];\n                var l = (f >>> 7 | f << 32 - 7) ^ (f >>> 18 | f << 32 - 18) ^ f >>> 3;\n                c[y] = (a + c[y - 7] | 0) + (l + c[y - 16] | 0);\n            }\n            for(var y = 0; y < 64; y++){\n                var a = (((F >>> 6 | F << 26) ^ (F >>> 11 | F << 21) ^ (F >>> 25 | F << 7)) + (F & K ^ ~F & I) | 0) + (D + (r[y] + c[y] | 0) | 0) | 0, l = ((x >>> 2 | x << 32 - 2) ^ (x >>> 13 | x << 32 - 13) ^ (x >>> 22 | x << 32 - 22)) + (x & O ^ x & _ ^ O & _) | 0;\n                D = I, I = K, K = F, F = C + a | 0, C = _, _ = O, O = x, x = a + l | 0;\n            }\n            u[0] += x, u[1] += O, u[2] += _, u[3] += C, u[4] += F, u[5] += K, u[6] += I, u[7] += D, p += 64, b -= 64;\n        }\n        return p;\n    }\n    function o(c) {\n        var u = new s();\n        u.update(c);\n        var d = u.digest();\n        return u.clean(), d;\n    }\n    i.hash = o;\n})(Si);\nvar ms = {};\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    }), i.sharedKey = i.generateKeyPair = i.generateKeyPairFromSeed = i.scalarMultBase = i.scalarMult = i.SHARED_KEY_LENGTH = i.SECRET_KEY_LENGTH = i.PUBLIC_KEY_LENGTH = void 0;\n    const e = li, t = Pt;\n    i.PUBLIC_KEY_LENGTH = 32, i.SECRET_KEY_LENGTH = 32, i.SHARED_KEY_LENGTH = 32;\n    function s(y) {\n        const w = new Float64Array(16);\n        if (y) for(let f = 0; f < y.length; f++)w[f] = y[f];\n        return w;\n    }\n    const r = new Uint8Array(32);\n    r[0] = 9;\n    const n = s([\n        56129,\n        1\n    ]);\n    function o(y) {\n        let w = 1;\n        for(let f = 0; f < 16; f++){\n            let a = y[f] + w + 65535;\n            w = Math.floor(a / 65536), y[f] = a - w * 65536;\n        }\n        y[0] += w - 1 + 37 * (w - 1);\n    }\n    function c(y, w, f) {\n        const a = ~(f - 1);\n        for(let l = 0; l < 16; l++){\n            const L = a & (y[l] ^ w[l]);\n            y[l] ^= L, w[l] ^= L;\n        }\n    }\n    function u(y, w) {\n        const f = s(), a = s();\n        for(let l = 0; l < 16; l++)a[l] = w[l];\n        o(a), o(a), o(a);\n        for(let l = 0; l < 2; l++){\n            f[0] = a[0] - 65517;\n            for(let v = 1; v < 15; v++)f[v] = a[v] - 65535 - (f[v - 1] >> 16 & 1), f[v - 1] &= 65535;\n            f[15] = a[15] - 32767 - (f[14] >> 16 & 1);\n            const L = f[15] >> 16 & 1;\n            f[14] &= 65535, c(a, f, 1 - L);\n        }\n        for(let l = 0; l < 16; l++)y[2 * l] = a[l] & 255, y[2 * l + 1] = a[l] >> 8;\n    }\n    function d(y, w) {\n        for(let f = 0; f < 16; f++)y[f] = w[2 * f] + (w[2 * f + 1] << 8);\n        y[15] &= 32767;\n    }\n    function p(y, w, f) {\n        for(let a = 0; a < 16; a++)y[a] = w[a] + f[a];\n    }\n    function b(y, w, f) {\n        for(let a = 0; a < 16; a++)y[a] = w[a] - f[a];\n    }\n    function x(y, w, f) {\n        let a, l, L = 0, v = 0, R = 0, $ = 0, q = 0, m = 0, E = 0, B = 0, z = 0, j = 0, U = 0, M = 0, H = 0, te = 0, G = 0, ie = 0, Q = 0, se = 0, T = 0, A = 0, N = 0, h = 0, S = 0, W = 0, X = 0, fe = 0, ve = 0, ge = 0, Se = 0, Me = 0, $e = 0, be = f[0], ye = f[1], pe = f[2], le = f[3], ue = f[4], he = f[5], ce = f[6], re = f[7], de = f[8], me = f[9], ne = f[10], _e = f[11], Ee = f[12], De = f[13], xe = f[14], Ie = f[15];\n        a = w[0], L += a * be, v += a * ye, R += a * pe, $ += a * le, q += a * ue, m += a * he, E += a * ce, B += a * re, z += a * de, j += a * me, U += a * ne, M += a * _e, H += a * Ee, te += a * De, G += a * xe, ie += a * Ie, a = w[1], v += a * be, R += a * ye, $ += a * pe, q += a * le, m += a * ue, E += a * he, B += a * ce, z += a * re, j += a * de, U += a * me, M += a * ne, H += a * _e, te += a * Ee, G += a * De, ie += a * xe, Q += a * Ie, a = w[2], R += a * be, $ += a * ye, q += a * pe, m += a * le, E += a * ue, B += a * he, z += a * ce, j += a * re, U += a * de, M += a * me, H += a * ne, te += a * _e, G += a * Ee, ie += a * De, Q += a * xe, se += a * Ie, a = w[3], $ += a * be, q += a * ye, m += a * pe, E += a * le, B += a * ue, z += a * he, j += a * ce, U += a * re, M += a * de, H += a * me, te += a * ne, G += a * _e, ie += a * Ee, Q += a * De, se += a * xe, T += a * Ie, a = w[4], q += a * be, m += a * ye, E += a * pe, B += a * le, z += a * ue, j += a * he, U += a * ce, M += a * re, H += a * de, te += a * me, G += a * ne, ie += a * _e, Q += a * Ee, se += a * De, T += a * xe, A += a * Ie, a = w[5], m += a * be, E += a * ye, B += a * pe, z += a * le, j += a * ue, U += a * he, M += a * ce, H += a * re, te += a * de, G += a * me, ie += a * ne, Q += a * _e, se += a * Ee, T += a * De, A += a * xe, N += a * Ie, a = w[6], E += a * be, B += a * ye, z += a * pe, j += a * le, U += a * ue, M += a * he, H += a * ce, te += a * re, G += a * de, ie += a * me, Q += a * ne, se += a * _e, T += a * Ee, A += a * De, N += a * xe, h += a * Ie, a = w[7], B += a * be, z += a * ye, j += a * pe, U += a * le, M += a * ue, H += a * he, te += a * ce, G += a * re, ie += a * de, Q += a * me, se += a * ne, T += a * _e, A += a * Ee, N += a * De, h += a * xe, S += a * Ie, a = w[8], z += a * be, j += a * ye, U += a * pe, M += a * le, H += a * ue, te += a * he, G += a * ce, ie += a * re, Q += a * de, se += a * me, T += a * ne, A += a * _e, N += a * Ee, h += a * De, S += a * xe, W += a * Ie, a = w[9], j += a * be, U += a * ye, M += a * pe, H += a * le, te += a * ue, G += a * he, ie += a * ce, Q += a * re, se += a * de, T += a * me, A += a * ne, N += a * _e, h += a * Ee, S += a * De, W += a * xe, X += a * Ie, a = w[10], U += a * be, M += a * ye, H += a * pe, te += a * le, G += a * ue, ie += a * he, Q += a * ce, se += a * re, T += a * de, A += a * me, N += a * ne, h += a * _e, S += a * Ee, W += a * De, X += a * xe, fe += a * Ie, a = w[11], M += a * be, H += a * ye, te += a * pe, G += a * le, ie += a * ue, Q += a * he, se += a * ce, T += a * re, A += a * de, N += a * me, h += a * ne, S += a * _e, W += a * Ee, X += a * De, fe += a * xe, ve += a * Ie, a = w[12], H += a * be, te += a * ye, G += a * pe, ie += a * le, Q += a * ue, se += a * he, T += a * ce, A += a * re, N += a * de, h += a * me, S += a * ne, W += a * _e, X += a * Ee, fe += a * De, ve += a * xe, ge += a * Ie, a = w[13], te += a * be, G += a * ye, ie += a * pe, Q += a * le, se += a * ue, T += a * he, A += a * ce, N += a * re, h += a * de, S += a * me, W += a * ne, X += a * _e, fe += a * Ee, ve += a * De, ge += a * xe, Se += a * Ie, a = w[14], G += a * be, ie += a * ye, Q += a * pe, se += a * le, T += a * ue, A += a * he, N += a * ce, h += a * re, S += a * de, W += a * me, X += a * ne, fe += a * _e, ve += a * Ee, ge += a * De, Se += a * xe, Me += a * Ie, a = w[15], ie += a * be, Q += a * ye, se += a * pe, T += a * le, A += a * ue, N += a * he, h += a * ce, S += a * re, W += a * de, X += a * me, fe += a * ne, ve += a * _e, ge += a * Ee, Se += a * De, Me += a * xe, $e += a * Ie, L += 38 * Q, v += 38 * se, R += 38 * T, $ += 38 * A, q += 38 * N, m += 38 * h, E += 38 * S, B += 38 * W, z += 38 * X, j += 38 * fe, U += 38 * ve, M += 38 * ge, H += 38 * Se, te += 38 * Me, G += 38 * $e, l = 1, a = L + l + 65535, l = Math.floor(a / 65536), L = a - l * 65536, a = v + l + 65535, l = Math.floor(a / 65536), v = a - l * 65536, a = R + l + 65535, l = Math.floor(a / 65536), R = a - l * 65536, a = $ + l + 65535, l = Math.floor(a / 65536), $ = a - l * 65536, a = q + l + 65535, l = Math.floor(a / 65536), q = a - l * 65536, a = m + l + 65535, l = Math.floor(a / 65536), m = a - l * 65536, a = E + l + 65535, l = Math.floor(a / 65536), E = a - l * 65536, a = B + l + 65535, l = Math.floor(a / 65536), B = a - l * 65536, a = z + l + 65535, l = Math.floor(a / 65536), z = a - l * 65536, a = j + l + 65535, l = Math.floor(a / 65536), j = a - l * 65536, a = U + l + 65535, l = Math.floor(a / 65536), U = a - l * 65536, a = M + l + 65535, l = Math.floor(a / 65536), M = a - l * 65536, a = H + l + 65535, l = Math.floor(a / 65536), H = a - l * 65536, a = te + l + 65535, l = Math.floor(a / 65536), te = a - l * 65536, a = G + l + 65535, l = Math.floor(a / 65536), G = a - l * 65536, a = ie + l + 65535, l = Math.floor(a / 65536), ie = a - l * 65536, L += l - 1 + 37 * (l - 1), l = 1, a = L + l + 65535, l = Math.floor(a / 65536), L = a - l * 65536, a = v + l + 65535, l = Math.floor(a / 65536), v = a - l * 65536, a = R + l + 65535, l = Math.floor(a / 65536), R = a - l * 65536, a = $ + l + 65535, l = Math.floor(a / 65536), $ = a - l * 65536, a = q + l + 65535, l = Math.floor(a / 65536), q = a - l * 65536, a = m + l + 65535, l = Math.floor(a / 65536), m = a - l * 65536, a = E + l + 65535, l = Math.floor(a / 65536), E = a - l * 65536, a = B + l + 65535, l = Math.floor(a / 65536), B = a - l * 65536, a = z + l + 65535, l = Math.floor(a / 65536), z = a - l * 65536, a = j + l + 65535, l = Math.floor(a / 65536), j = a - l * 65536, a = U + l + 65535, l = Math.floor(a / 65536), U = a - l * 65536, a = M + l + 65535, l = Math.floor(a / 65536), M = a - l * 65536, a = H + l + 65535, l = Math.floor(a / 65536), H = a - l * 65536, a = te + l + 65535, l = Math.floor(a / 65536), te = a - l * 65536, a = G + l + 65535, l = Math.floor(a / 65536), G = a - l * 65536, a = ie + l + 65535, l = Math.floor(a / 65536), ie = a - l * 65536, L += l - 1 + 37 * (l - 1), y[0] = L, y[1] = v, y[2] = R, y[3] = $, y[4] = q, y[5] = m, y[6] = E, y[7] = B, y[8] = z, y[9] = j, y[10] = U, y[11] = M, y[12] = H, y[13] = te, y[14] = G, y[15] = ie;\n    }\n    function O(y, w) {\n        x(y, w, w);\n    }\n    function _(y, w) {\n        const f = s();\n        for(let a = 0; a < 16; a++)f[a] = w[a];\n        for(let a = 253; a >= 0; a--)O(f, f), a !== 2 && a !== 4 && x(f, f, w);\n        for(let a = 0; a < 16; a++)y[a] = f[a];\n    }\n    function C(y, w) {\n        const f = new Uint8Array(32), a = new Float64Array(80), l = s(), L = s(), v = s(), R = s(), $ = s(), q = s();\n        for(let z = 0; z < 31; z++)f[z] = y[z];\n        f[31] = y[31] & 127 | 64, f[0] &= 248, d(a, w);\n        for(let z = 0; z < 16; z++)L[z] = a[z];\n        l[0] = R[0] = 1;\n        for(let z = 254; z >= 0; --z){\n            const j = f[z >>> 3] >>> (z & 7) & 1;\n            c(l, L, j), c(v, R, j), p($, l, v), b(l, l, v), p(v, L, R), b(L, L, R), O(R, $), O(q, l), x(l, v, l), x(v, L, $), p($, l, v), b(l, l, v), O(L, l), b(v, R, q), x(l, v, n), p(l, l, R), x(v, v, l), x(l, R, q), x(R, L, a), O(L, $), c(l, L, j), c(v, R, j);\n        }\n        for(let z = 0; z < 16; z++)a[z + 16] = l[z], a[z + 32] = v[z], a[z + 48] = L[z], a[z + 64] = R[z];\n        const m = a.subarray(32), E = a.subarray(16);\n        _(m, m), x(E, E, m);\n        const B = new Uint8Array(32);\n        return u(B, E), B;\n    }\n    i.scalarMult = C;\n    function F(y) {\n        return C(y, r);\n    }\n    i.scalarMultBase = F;\n    function K(y) {\n        if (y.length !== i.SECRET_KEY_LENGTH) throw new Error(`x25519: seed must be ${i.SECRET_KEY_LENGTH} bytes`);\n        const w = new Uint8Array(y);\n        return {\n            publicKey: F(w),\n            secretKey: w\n        };\n    }\n    i.generateKeyPairFromSeed = K;\n    function I(y) {\n        const w = (0, e.randomBytes)(32, y), f = K(w);\n        return (0, t.wipe)(w), f;\n    }\n    i.generateKeyPair = I;\n    function D(y, w, f = !1) {\n        if (y.length !== i.PUBLIC_KEY_LENGTH) throw new Error(\"X25519: incorrect secret key length\");\n        if (w.length !== i.PUBLIC_KEY_LENGTH) throw new Error(\"X25519: incorrect public key length\");\n        const a = C(y, w);\n        if (f) {\n            let l = 0;\n            for(let L = 0; L < a.length; L++)l |= a[L];\n            if (l === 0) throw new Error(\"X25519: invalid shared key\");\n        }\n        return a;\n    }\n    i.sharedKey = D;\n})(ms);\nvar Eo = globalThis && globalThis.__spreadArray || function(i, e, t) {\n    if (t || arguments.length === 2) for(var s = 0, r = e.length, n; s < r; s++)(n || !(s in e)) && (n || (n = Array.prototype.slice.call(e, 0, s)), n[s] = e[s]);\n    return i.concat(n || Array.prototype.slice.call(e));\n}, Df = /** @class */ function() {\n    function i(e, t, s) {\n        this.name = e, this.version = t, this.os = s, this.type = \"browser\";\n    }\n    return i;\n}(), xf = /** @class */ function() {\n    function i(e) {\n        this.version = e, this.type = \"node\", this.name = \"node\", this.os = process.platform;\n    }\n    return i;\n}(), Of = /** @class */ function() {\n    function i(e, t, s, r) {\n        this.name = e, this.version = t, this.os = s, this.bot = r, this.type = \"bot-device\";\n    }\n    return i;\n}(), Nf = /** @class */ function() {\n    function i() {\n        this.type = \"bot\", this.bot = !0, this.name = \"bot\", this.version = null, this.os = null;\n    }\n    return i;\n}(), Pf = /** @class */ function() {\n    function i() {\n        this.type = \"react-native\", this.name = \"react-native\", this.version = null, this.os = null;\n    }\n    return i;\n}(), Rf = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/, Cf = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/, So = 3, Af = [\n    [\n        \"aol\",\n        /AOLShield\\/([0-9\\._]+)/\n    ],\n    [\n        \"edge\",\n        /Edge\\/([0-9\\._]+)/\n    ],\n    [\n        \"edge-ios\",\n        /EdgiOS\\/([0-9\\._]+)/\n    ],\n    [\n        \"yandexbrowser\",\n        /YaBrowser\\/([0-9\\._]+)/\n    ],\n    [\n        \"kakaotalk\",\n        /KAKAOTALK\\s([0-9\\.]+)/\n    ],\n    [\n        \"samsung\",\n        /SamsungBrowser\\/([0-9\\.]+)/\n    ],\n    [\n        \"silk\",\n        /\\bSilk\\/([0-9._-]+)\\b/\n    ],\n    [\n        \"miui\",\n        /MiuiBrowser\\/([0-9\\.]+)$/\n    ],\n    [\n        \"beaker\",\n        /BeakerBrowser\\/([0-9\\.]+)/\n    ],\n    [\n        \"edge-chromium\",\n        /EdgA?\\/([0-9\\.]+)/\n    ],\n    [\n        \"chromium-webview\",\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"chrome\",\n        /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"phantomjs\",\n        /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"crios\",\n        /CriOS\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"firefox\",\n        /Firefox\\/([0-9\\.]+)(?:\\s|$)/\n    ],\n    [\n        \"fxios\",\n        /FxiOS\\/([0-9\\.]+)/\n    ],\n    [\n        \"opera-mini\",\n        /Opera Mini.*Version\\/([0-9\\.]+)/\n    ],\n    [\n        \"opera\",\n        /Opera\\/([0-9\\.]+)(?:\\s|$)/\n    ],\n    [\n        \"opera\",\n        /OPR\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"pie\",\n        /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/\n    ],\n    [\n        \"pie\",\n        /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/\n    ],\n    [\n        \"netfront\",\n        /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/\n    ],\n    [\n        \"ie\",\n        /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/\n    ],\n    [\n        \"ie\",\n        /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/\n    ],\n    [\n        \"ie\",\n        /MSIE\\s(7\\.0)/\n    ],\n    [\n        \"bb10\",\n        /BB10;\\sTouch.*Version\\/([0-9\\.]+)/\n    ],\n    [\n        \"android\",\n        /Android\\s([0-9\\.]+)/\n    ],\n    [\n        \"ios\",\n        /Version\\/([0-9\\._]+).*Mobile.*Safari.*/\n    ],\n    [\n        \"safari\",\n        /Version\\/([0-9\\._]+).*Safari/\n    ],\n    [\n        \"facebook\",\n        /FB[AS]V\\/([0-9\\.]+)/\n    ],\n    [\n        \"instagram\",\n        /Instagram\\s([0-9\\.]+)/\n    ],\n    [\n        \"ios-webview\",\n        /AppleWebKit\\/([0-9\\.]+).*Mobile/\n    ],\n    [\n        \"ios-webview\",\n        /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/\n    ],\n    [\n        \"curl\",\n        /^curl\\/([0-9\\.]+)$/\n    ],\n    [\n        \"searchbot\",\n        Rf\n    ]\n], Io = [\n    [\n        \"iOS\",\n        /iP(hone|od|ad)/\n    ],\n    [\n        \"Android OS\",\n        /Android/\n    ],\n    [\n        \"BlackBerry OS\",\n        /BlackBerry|BB10/\n    ],\n    [\n        \"Windows Mobile\",\n        /IEMobile/\n    ],\n    [\n        \"Amazon OS\",\n        /Kindle/\n    ],\n    [\n        \"Windows 3.11\",\n        /Win16/\n    ],\n    [\n        \"Windows 95\",\n        /(Windows 95)|(Win95)|(Windows_95)/\n    ],\n    [\n        \"Windows 98\",\n        /(Windows 98)|(Win98)/\n    ],\n    [\n        \"Windows 2000\",\n        /(Windows NT 5.0)|(Windows 2000)/\n    ],\n    [\n        \"Windows XP\",\n        /(Windows NT 5.1)|(Windows XP)/\n    ],\n    [\n        \"Windows Server 2003\",\n        /(Windows NT 5.2)/\n    ],\n    [\n        \"Windows Vista\",\n        /(Windows NT 6.0)/\n    ],\n    [\n        \"Windows 7\",\n        /(Windows NT 6.1)/\n    ],\n    [\n        \"Windows 8\",\n        /(Windows NT 6.2)/\n    ],\n    [\n        \"Windows 8.1\",\n        /(Windows NT 6.3)/\n    ],\n    [\n        \"Windows 10\",\n        /(Windows NT 10.0)/\n    ],\n    [\n        \"Windows ME\",\n        /Windows ME/\n    ],\n    [\n        \"Windows CE\",\n        /Windows CE|WinCE|Microsoft Pocket Internet Explorer/\n    ],\n    [\n        \"Open BSD\",\n        /OpenBSD/\n    ],\n    [\n        \"Sun OS\",\n        /SunOS/\n    ],\n    [\n        \"Chrome OS\",\n        /CrOS/\n    ],\n    [\n        \"Linux\",\n        /(Linux)|(X11)/\n    ],\n    [\n        \"Mac OS\",\n        /(Mac_PowerPC)|(Macintosh)/\n    ],\n    [\n        \"QNX\",\n        /QNX/\n    ],\n    [\n        \"BeOS\",\n        /BeOS/\n    ],\n    [\n        \"OS/2\",\n        /OS\\/2/\n    ]\n];\nfunction hn(i) {\n    return i ? Do(i) : typeof document > \"u\" && typeof navigator < \"u\" && navigator.product === \"ReactNative\" ? new Pf() : typeof navigator < \"u\" ? Do(navigator.userAgent) : Ff();\n}\nfunction Tf(i) {\n    return i !== \"\" && Af.reduce(function(e, t) {\n        var s = t[0], r = t[1];\n        if (e) return e;\n        var n = r.exec(i);\n        return !!n && [\n            s,\n            n\n        ];\n    }, !1);\n}\nfunction Do(i) {\n    var e = Tf(i);\n    if (!e) return null;\n    var t = e[0], s = e[1];\n    if (t === \"searchbot\") return new Nf();\n    var r = s[1] && s[1].split(\".\").join(\"_\").split(\"_\").slice(0, 3);\n    r ? r.length < So && (r = Eo(Eo([], r, !0), Uf(So - r.length), !0)) : r = [];\n    var n = r.join(\".\"), o = $f(i), c = Cf.exec(i);\n    return c && c[1] ? new Of(t, n, o, c[1]) : new Df(t, n, o);\n}\nfunction $f(i) {\n    for(var e = 0, t = Io.length; e < t; e++){\n        var s = Io[e], r = s[0], n = s[1], o = n.exec(i);\n        if (o) return r;\n    }\n    return null;\n}\nfunction Ff() {\n    var i = typeof process < \"u\" && process.version;\n    return i ? new xf(process.version.slice(1)) : null;\n}\nfunction Uf(i) {\n    for(var e = [], t = 0; t < i; t++)e.push(\"0\");\n    return e;\n}\nvar Pe = {};\nObject.defineProperty(Pe, \"__esModule\", {\n    value: !0\n});\nPe.getLocalStorage = Pe.getLocalStorageOrThrow = Pe.getCrypto = Pe.getCryptoOrThrow = ln = Pe.getLocation = Pe.getLocationOrThrow = bs = Pe.getNavigator = Pe.getNavigatorOrThrow = un = Pe.getDocument = Pe.getDocumentOrThrow = Pe.getFromWindowOrThrow = Pe.getFromWindow = void 0;\nfunction Ii(i) {\n    let e;\n    return  false && (0), e;\n}\nPe.getFromWindow = Ii;\nfunction Li(i) {\n    const e = Ii(i);\n    if (!e) throw new Error(`${i} is not defined in Window`);\n    return e;\n}\nPe.getFromWindowOrThrow = Li;\nfunction Lf() {\n    return Li(\"document\");\n}\nPe.getDocumentOrThrow = Lf;\nfunction Mf() {\n    return Ii(\"document\");\n}\nvar un = Pe.getDocument = Mf;\nfunction qf() {\n    return Li(\"navigator\");\n}\nPe.getNavigatorOrThrow = qf;\nfunction jf() {\n    return Ii(\"navigator\");\n}\nvar bs = Pe.getNavigator = jf;\nfunction zf() {\n    return Li(\"location\");\n}\nPe.getLocationOrThrow = zf;\nfunction Kf() {\n    return Ii(\"location\");\n}\nvar ln = Pe.getLocation = Kf;\nfunction Vf() {\n    return Li(\"crypto\");\n}\nPe.getCryptoOrThrow = Vf;\nfunction Bf() {\n    return Ii(\"crypto\");\n}\nPe.getCrypto = Bf;\nfunction kf() {\n    return Li(\"localStorage\");\n}\nPe.getLocalStorageOrThrow = kf;\nfunction Hf() {\n    return Ii(\"localStorage\");\n}\nPe.getLocalStorage = Hf;\nvar dn = {};\nObject.defineProperty(dn, \"__esModule\", {\n    value: !0\n});\nvar fn = dn.getWindowMetadata = void 0;\nconst xo = Pe;\nfunction Gf() {\n    let i, e;\n    try {\n        i = xo.getDocumentOrThrow(), e = xo.getLocationOrThrow();\n    } catch  {\n        return null;\n    }\n    function t() {\n        const b = i.getElementsByTagName(\"link\"), x = [];\n        for(let O = 0; O < b.length; O++){\n            const _ = b[O], C = _.getAttribute(\"rel\");\n            if (C && C.toLowerCase().indexOf(\"icon\") > -1) {\n                const F = _.getAttribute(\"href\");\n                if (F) if (F.toLowerCase().indexOf(\"https:\") === -1 && F.toLowerCase().indexOf(\"http:\") === -1 && F.indexOf(\"//\") !== 0) {\n                    let K = e.protocol + \"//\" + e.host;\n                    if (F.indexOf(\"/\") === 0) K += F;\n                    else {\n                        const I = e.pathname.split(\"/\");\n                        I.pop();\n                        const D = I.join(\"/\");\n                        K += D + \"/\" + F;\n                    }\n                    x.push(K);\n                } else if (F.indexOf(\"//\") === 0) {\n                    const K = e.protocol + F;\n                    x.push(K);\n                } else x.push(F);\n            }\n        }\n        return x;\n    }\n    function s(...b) {\n        const x = i.getElementsByTagName(\"meta\");\n        for(let O = 0; O < x.length; O++){\n            const _ = x[O], C = [\n                \"itemprop\",\n                \"property\",\n                \"name\"\n            ].map((F)=>_.getAttribute(F)).filter((F)=>F ? b.includes(F) : !1);\n            if (C.length && C) {\n                const F = _.getAttribute(\"content\");\n                if (F) return F;\n            }\n        }\n        return \"\";\n    }\n    function r() {\n        let b = s(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n        return b || (b = i.title), b;\n    }\n    function n() {\n        return s(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n    }\n    const o = r(), c = n(), u = e.origin, d = t();\n    return {\n        description: c,\n        url: u,\n        icons: d,\n        name: o\n    };\n}\nfn = dn.getWindowMetadata = Gf;\nvar ii = {}, Wf = (i)=>encodeURIComponent(i).replace(/[!'()*]/g, (e)=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`), Cc = \"%[a-f0-9]{2}\", Oo = new RegExp(\"(\" + Cc + \")|([^%]+?)\", \"gi\"), No = new RegExp(\"(\" + Cc + \")+\", \"gi\");\nfunction Vr(i, e) {\n    try {\n        return [\n            decodeURIComponent(i.join(\"\"))\n        ];\n    } catch  {}\n    if (i.length === 1) return i;\n    e = e || 1;\n    var t = i.slice(0, e), s = i.slice(e);\n    return Array.prototype.concat.call([], Vr(t), Vr(s));\n}\nfunction Yf(i) {\n    try {\n        return decodeURIComponent(i);\n    } catch  {\n        for(var e = i.match(Oo) || [], t = 1; t < e.length; t++)i = Vr(e, t).join(\"\"), e = i.match(Oo) || [];\n        return i;\n    }\n}\nfunction Jf(i) {\n    for(var e = {\n        \"%FE%FF\": \"��\",\n        \"%FF%FE\": \"��\"\n    }, t = No.exec(i); t;){\n        try {\n            e[t[0]] = decodeURIComponent(t[0]);\n        } catch  {\n            var s = Yf(t[0]);\n            s !== t[0] && (e[t[0]] = s);\n        }\n        t = No.exec(i);\n    }\n    e[\"%C2\"] = \"�\";\n    for(var r = Object.keys(e), n = 0; n < r.length; n++){\n        var o = r[n];\n        i = i.replace(new RegExp(o, \"g\"), e[o]);\n    }\n    return i;\n}\nvar Qf = function(i) {\n    if (typeof i != \"string\") throw new TypeError(\"Expected `encodedURI` to be of type `string`, got `\" + typeof i + \"`\");\n    try {\n        return i = i.replace(/\\+/g, \" \"), decodeURIComponent(i);\n    } catch  {\n        return Jf(i);\n    }\n}, Xf = (i, e)=>{\n    if (!(typeof i == \"string\" && typeof e == \"string\")) throw new TypeError(\"Expected the arguments to be of type `string`\");\n    if (e === \"\") return [\n        i\n    ];\n    const t = i.indexOf(e);\n    return t === -1 ? [\n        i\n    ] : [\n        i.slice(0, t),\n        i.slice(t + e.length)\n    ];\n}, Zf = function(i, e) {\n    for(var t = {}, s = Object.keys(i), r = Array.isArray(e), n = 0; n < s.length; n++){\n        var o = s[n], c = i[o];\n        (r ? e.indexOf(o) !== -1 : e(o, c, i)) && (t[o] = c);\n    }\n    return t;\n};\n(function(i) {\n    const e = Wf, t = Qf, s = Xf, r = Zf, n = (I)=>I == null, o = Symbol(\"encodeFragmentIdentifier\");\n    function c(I) {\n        switch(I.arrayFormat){\n            case \"index\":\n                return (D)=>(y, w)=>{\n                        const f = y.length;\n                        return w === void 0 || I.skipNull && w === null || I.skipEmptyString && w === \"\" ? y : w === null ? [\n                            ...y,\n                            [\n                                p(D, I),\n                                \"[\",\n                                f,\n                                \"]\"\n                            ].join(\"\")\n                        ] : [\n                            ...y,\n                            [\n                                p(D, I),\n                                \"[\",\n                                p(f, I),\n                                \"]=\",\n                                p(w, I)\n                            ].join(\"\")\n                        ];\n                    };\n            case \"bracket\":\n                return (D)=>(y, w)=>w === void 0 || I.skipNull && w === null || I.skipEmptyString && w === \"\" ? y : w === null ? [\n                            ...y,\n                            [\n                                p(D, I),\n                                \"[]\"\n                            ].join(\"\")\n                        ] : [\n                            ...y,\n                            [\n                                p(D, I),\n                                \"[]=\",\n                                p(w, I)\n                            ].join(\"\")\n                        ];\n            case \"colon-list-separator\":\n                return (D)=>(y, w)=>w === void 0 || I.skipNull && w === null || I.skipEmptyString && w === \"\" ? y : w === null ? [\n                            ...y,\n                            [\n                                p(D, I),\n                                \":list=\"\n                            ].join(\"\")\n                        ] : [\n                            ...y,\n                            [\n                                p(D, I),\n                                \":list=\",\n                                p(w, I)\n                            ].join(\"\")\n                        ];\n            case \"comma\":\n            case \"separator\":\n            case \"bracket-separator\":\n                {\n                    const D = I.arrayFormat === \"bracket-separator\" ? \"[]=\" : \"=\";\n                    return (y)=>(w, f)=>f === void 0 || I.skipNull && f === null || I.skipEmptyString && f === \"\" ? w : (f = f === null ? \"\" : f, w.length === 0 ? [\n                                [\n                                    p(y, I),\n                                    D,\n                                    p(f, I)\n                                ].join(\"\")\n                            ] : [\n                                [\n                                    w,\n                                    p(f, I)\n                                ].join(I.arrayFormatSeparator)\n                            ]);\n                }\n            default:\n                return (D)=>(y, w)=>w === void 0 || I.skipNull && w === null || I.skipEmptyString && w === \"\" ? y : w === null ? [\n                            ...y,\n                            p(D, I)\n                        ] : [\n                            ...y,\n                            [\n                                p(D, I),\n                                \"=\",\n                                p(w, I)\n                            ].join(\"\")\n                        ];\n        }\n    }\n    function u(I) {\n        let D;\n        switch(I.arrayFormat){\n            case \"index\":\n                return (y, w, f)=>{\n                    if (D = /\\[(\\d*)\\]$/.exec(y), y = y.replace(/\\[\\d*\\]$/, \"\"), !D) {\n                        f[y] = w;\n                        return;\n                    }\n                    f[y] === void 0 && (f[y] = {}), f[y][D[1]] = w;\n                };\n            case \"bracket\":\n                return (y, w, f)=>{\n                    if (D = /(\\[\\])$/.exec(y), y = y.replace(/\\[\\]$/, \"\"), !D) {\n                        f[y] = w;\n                        return;\n                    }\n                    if (f[y] === void 0) {\n                        f[y] = [\n                            w\n                        ];\n                        return;\n                    }\n                    f[y] = [].concat(f[y], w);\n                };\n            case \"colon-list-separator\":\n                return (y, w, f)=>{\n                    if (D = /(:list)$/.exec(y), y = y.replace(/:list$/, \"\"), !D) {\n                        f[y] = w;\n                        return;\n                    }\n                    if (f[y] === void 0) {\n                        f[y] = [\n                            w\n                        ];\n                        return;\n                    }\n                    f[y] = [].concat(f[y], w);\n                };\n            case \"comma\":\n            case \"separator\":\n                return (y, w, f)=>{\n                    const a = typeof w == \"string\" && w.includes(I.arrayFormatSeparator), l = typeof w == \"string\" && !a && b(w, I).includes(I.arrayFormatSeparator);\n                    w = l ? b(w, I) : w;\n                    const L = a || l ? w.split(I.arrayFormatSeparator).map((v)=>b(v, I)) : w === null ? w : b(w, I);\n                    f[y] = L;\n                };\n            case \"bracket-separator\":\n                return (y, w, f)=>{\n                    const a = /(\\[\\])$/.test(y);\n                    if (y = y.replace(/\\[\\]$/, \"\"), !a) {\n                        f[y] = w && b(w, I);\n                        return;\n                    }\n                    const l = w === null ? [] : w.split(I.arrayFormatSeparator).map((L)=>b(L, I));\n                    if (f[y] === void 0) {\n                        f[y] = l;\n                        return;\n                    }\n                    f[y] = [].concat(f[y], l);\n                };\n            default:\n                return (y, w, f)=>{\n                    if (f[y] === void 0) {\n                        f[y] = w;\n                        return;\n                    }\n                    f[y] = [].concat(f[y], w);\n                };\n        }\n    }\n    function d(I) {\n        if (typeof I != \"string\" || I.length !== 1) throw new TypeError(\"arrayFormatSeparator must be single character string\");\n    }\n    function p(I, D) {\n        return D.encode ? D.strict ? e(I) : encodeURIComponent(I) : I;\n    }\n    function b(I, D) {\n        return D.decode ? t(I) : I;\n    }\n    function x(I) {\n        return Array.isArray(I) ? I.sort() : typeof I == \"object\" ? x(Object.keys(I)).sort((D, y)=>Number(D) - Number(y)).map((D)=>I[D]) : I;\n    }\n    function O(I) {\n        const D = I.indexOf(\"#\");\n        return D !== -1 && (I = I.slice(0, D)), I;\n    }\n    function _(I) {\n        let D = \"\";\n        const y = I.indexOf(\"#\");\n        return y !== -1 && (D = I.slice(y)), D;\n    }\n    function C(I) {\n        I = O(I);\n        const D = I.indexOf(\"?\");\n        return D === -1 ? \"\" : I.slice(D + 1);\n    }\n    function F(I, D) {\n        return D.parseNumbers && !Number.isNaN(Number(I)) && typeof I == \"string\" && I.trim() !== \"\" ? I = Number(I) : D.parseBooleans && I !== null && (I.toLowerCase() === \"true\" || I.toLowerCase() === \"false\") && (I = I.toLowerCase() === \"true\"), I;\n    }\n    function K(I, D) {\n        D = Object.assign({\n            decode: !0,\n            sort: !0,\n            arrayFormat: \"none\",\n            arrayFormatSeparator: \",\",\n            parseNumbers: !1,\n            parseBooleans: !1\n        }, D), d(D.arrayFormatSeparator);\n        const y = u(D), w = /* @__PURE__ */ Object.create(null);\n        if (typeof I != \"string\" || (I = I.trim().replace(/^[?#&]/, \"\"), !I)) return w;\n        for (const f of I.split(\"&\")){\n            if (f === \"\") continue;\n            let [a, l] = s(D.decode ? f.replace(/\\+/g, \" \") : f, \"=\");\n            l = l === void 0 ? null : [\n                \"comma\",\n                \"separator\",\n                \"bracket-separator\"\n            ].includes(D.arrayFormat) ? l : b(l, D), y(b(a, D), l, w);\n        }\n        for (const f of Object.keys(w)){\n            const a = w[f];\n            if (typeof a == \"object\" && a !== null) for (const l of Object.keys(a))a[l] = F(a[l], D);\n            else w[f] = F(a, D);\n        }\n        return D.sort === !1 ? w : (D.sort === !0 ? Object.keys(w).sort() : Object.keys(w).sort(D.sort)).reduce((f, a)=>{\n            const l = w[a];\n            return l && typeof l == \"object\" && !Array.isArray(l) ? f[a] = x(l) : f[a] = l, f;\n        }, /* @__PURE__ */ Object.create(null));\n    }\n    i.extract = C, i.parse = K, i.stringify = (I, D)=>{\n        if (!I) return \"\";\n        D = Object.assign({\n            encode: !0,\n            strict: !0,\n            arrayFormat: \"none\",\n            arrayFormatSeparator: \",\"\n        }, D), d(D.arrayFormatSeparator);\n        const y = (l)=>D.skipNull && n(I[l]) || D.skipEmptyString && I[l] === \"\", w = c(D), f = {};\n        for (const l of Object.keys(I))y(l) || (f[l] = I[l]);\n        const a = Object.keys(f);\n        return D.sort !== !1 && a.sort(D.sort), a.map((l)=>{\n            const L = I[l];\n            return L === void 0 ? \"\" : L === null ? p(l, D) : Array.isArray(L) ? L.length === 0 && D.arrayFormat === \"bracket-separator\" ? p(l, D) + \"[]\" : L.reduce(w(l), []).join(\"&\") : p(l, D) + \"=\" + p(L, D);\n        }).filter((l)=>l.length > 0).join(\"&\");\n    }, i.parseUrl = (I, D)=>{\n        D = Object.assign({\n            decode: !0\n        }, D);\n        const [y, w] = s(I, \"#\");\n        return Object.assign({\n            url: y.split(\"?\")[0] || \"\",\n            query: K(C(I), D)\n        }, D && D.parseFragmentIdentifier && w ? {\n            fragmentIdentifier: b(w, D)\n        } : {});\n    }, i.stringifyUrl = (I, D)=>{\n        D = Object.assign({\n            encode: !0,\n            strict: !0,\n            [o]: !0\n        }, D);\n        const y = O(I.url).split(\"?\")[0] || \"\", w = i.extract(I.url), f = i.parse(w, {\n            sort: !1\n        }), a = Object.assign(f, I.query);\n        let l = i.stringify(a, D);\n        l && (l = `?${l}`);\n        let L = _(I.url);\n        return I.fragmentIdentifier && (L = `#${D[o] ? p(I.fragmentIdentifier, D) : I.fragmentIdentifier}`), `${y}${l}${L}`;\n    }, i.pick = (I, D, y)=>{\n        y = Object.assign({\n            parseFragmentIdentifier: !0,\n            [o]: !1\n        }, y);\n        const { url: w, query: f, fragmentIdentifier: a } = i.parseUrl(I, y);\n        return i.stringifyUrl({\n            url: w,\n            query: r(f, D),\n            fragmentIdentifier: a\n        }, y);\n    }, i.exclude = (I, D, y)=>{\n        const w = Array.isArray(D) ? (f)=>!D.includes(f) : (f, a)=>!D(f, a);\n        return i.pick(I, w, y);\n    };\n})(ii);\nconst Ac = {\n    waku: {\n        publish: \"waku_publish\",\n        batchPublish: \"waku_batchPublish\",\n        subscribe: \"waku_subscribe\",\n        batchSubscribe: \"waku_batchSubscribe\",\n        subscription: \"waku_subscription\",\n        unsubscribe: \"waku_unsubscribe\",\n        batchUnsubscribe: \"waku_batchUnsubscribe\"\n    },\n    irn: {\n        publish: \"irn_publish\",\n        batchPublish: \"irn_batchPublish\",\n        subscribe: \"irn_subscribe\",\n        batchSubscribe: \"irn_batchSubscribe\",\n        subscription: \"irn_subscription\",\n        unsubscribe: \"irn_unsubscribe\",\n        batchUnsubscribe: \"irn_batchUnsubscribe\"\n    },\n    iridium: {\n        publish: \"iridium_publish\",\n        batchPublish: \"iridium_batchPublish\",\n        subscribe: \"iridium_subscribe\",\n        batchSubscribe: \"iridium_batchSubscribe\",\n        subscription: \"iridium_subscription\",\n        unsubscribe: \"iridium_unsubscribe\",\n        batchUnsubscribe: \"iridium_batchUnsubscribe\"\n    }\n};\nfunction Tc(i, e) {\n    return i.includes(\":\") ? [\n        i\n    ] : e.chains || [];\n}\nconst $c = \"base10\", vt = \"base16\", Br = \"base64pad\", pn = \"utf8\", Fc = 0, Di = 1, ep = 0, Po = 1, kr = 12, gn = 32;\nfunction tp() {\n    const i = ms.generateKeyPair();\n    return {\n        privateKey: Ne(i.secretKey, vt),\n        publicKey: Ne(i.publicKey, vt)\n    };\n}\nfunction Hr() {\n    const i = li.randomBytes(gn);\n    return Ne(i, vt);\n}\nfunction ip(i, e) {\n    const t = ms.sharedKey(Ce(i, vt), Ce(e, vt), !0), s = new Rc(Si.SHA256, t).expand(gn);\n    return Ne(s, vt);\n}\nfunction sp(i) {\n    const e = Si.hash(Ce(i, vt));\n    return Ne(e, vt);\n}\nfunction Fi(i) {\n    const e = Si.hash(Ce(i, pn));\n    return Ne(e, vt);\n}\nfunction rp(i) {\n    return Ce(`${i}`, $c);\n}\nfunction ws(i) {\n    return Number(Ne(i, $c));\n}\nfunction np(i) {\n    const e = rp(typeof i.type < \"u\" ? i.type : Fc);\n    if (ws(e) === Di && typeof i.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n    const t = typeof i.senderPublicKey < \"u\" ? Ce(i.senderPublicKey, vt) : void 0, s = typeof i.iv < \"u\" ? Ce(i.iv, vt) : li.randomBytes(kr), r = new gs.ChaCha20Poly1305(Ce(i.symKey, vt)).seal(s, Ce(i.message, pn));\n    return ap({\n        type: e,\n        sealed: r,\n        iv: s,\n        senderPublicKey: t\n    });\n}\nfunction op(i) {\n    const e = new gs.ChaCha20Poly1305(Ce(i.symKey, vt)), { sealed: t, iv: s } = Ys(i.encoded), r = e.open(s, t);\n    if (r === null) throw new Error(\"Failed to decrypt\");\n    return Ne(r, pn);\n}\nfunction ap(i) {\n    if (ws(i.type) === Di) {\n        if (typeof i.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n        return Ne(ls([\n            i.type,\n            i.senderPublicKey,\n            i.iv,\n            i.sealed\n        ]), Br);\n    }\n    return Ne(ls([\n        i.type,\n        i.iv,\n        i.sealed\n    ]), Br);\n}\nfunction Ys(i) {\n    const e = Ce(i, Br), t = e.slice(ep, Po), s = Po;\n    if (ws(t) === Di) {\n        const c = s + gn, u = c + kr, d = e.slice(s, c), p = e.slice(c, u), b = e.slice(u);\n        return {\n            type: t,\n            sealed: b,\n            iv: p,\n            senderPublicKey: d\n        };\n    }\n    const r = s + kr, n = e.slice(s, r), o = e.slice(r);\n    return {\n        type: t,\n        sealed: o,\n        iv: n\n    };\n}\nfunction cp(i, e) {\n    const t = Ys(i);\n    return Uc({\n        type: ws(t.type),\n        senderPublicKey: typeof t.senderPublicKey < \"u\" ? Ne(t.senderPublicKey, vt) : void 0,\n        receiverPublicKey: e?.receiverPublicKey\n    });\n}\nfunction Uc(i) {\n    const e = i?.type || Fc;\n    if (e === Di) {\n        if (typeof i?.senderPublicKey > \"u\") throw new Error(\"missing sender public key\");\n        if (typeof i?.receiverPublicKey > \"u\") throw new Error(\"missing receiver public key\");\n    }\n    return {\n        type: e,\n        senderPublicKey: i?.senderPublicKey,\n        receiverPublicKey: i?.receiverPublicKey\n    };\n}\nfunction Ro(i) {\n    return i.type === Di && typeof i.senderPublicKey == \"string\" && typeof i.receiverPublicKey == \"string\";\n}\nvar hp = Object.defineProperty, Co = Object.getOwnPropertySymbols, up = Object.prototype.hasOwnProperty, lp = Object.prototype.propertyIsEnumerable, Ao = (i, e, t)=>e in i ? hp(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, To = (i, e)=>{\n    for(var t in e || (e = {}))up.call(e, t) && Ao(i, t, e[t]);\n    if (Co) for (var t of Co(e))lp.call(e, t) && Ao(i, t, e[t]);\n    return i;\n};\nconst dp = \"ReactNative\", Ot = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\"\n}, fp = \"js\";\nfunction yn() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction ur() {\n    return !un() && !!bs() && navigator.product === dp;\n}\nfunction vs() {\n    return !yn() && !!bs();\n}\nfunction _s() {\n    return ur() ? Ot.reactNative : yn() ? Ot.node : vs() ? Ot.browser : Ot.unknown;\n}\nfunction pp(i, e) {\n    let t = ii.parse(i);\n    return t = To(To({}, t), e), i = ii.stringify(t), i;\n}\nfunction gp() {\n    return fn() || {\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        icons: [\n            \"\"\n        ]\n    };\n}\nfunction yp() {\n    if (_s() === Ot.reactNative && typeof global < \"u\" && typeof (global == null ? void 0 : global.Platform) < \"u\") {\n        const { OS: t, Version: s } = global.Platform;\n        return [\n            t,\n            s\n        ].join(\"-\");\n    }\n    const i = hn();\n    if (i === null) return \"unknown\";\n    const e = i.os ? i.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n    return i.type === \"browser\" ? [\n        e,\n        i.name,\n        i.version\n    ].join(\"-\") : [\n        e,\n        i.version\n    ].join(\"-\");\n}\nfunction mp() {\n    var i;\n    const e = _s();\n    return e === Ot.browser ? [\n        e,\n        ((i = ln()) == null ? void 0 : i.host) || \"unknown\"\n    ].join(\":\") : e;\n}\nfunction bp(i, e, t) {\n    const s = yp(), r = mp();\n    return [\n        [\n            i,\n            e\n        ].join(\"-\"),\n        [\n            fp,\n            t\n        ].join(\"-\"),\n        s,\n        r\n    ].join(\"/\");\n}\nfunction wp({ protocol: i, version: e, relayUrl: t, sdkVersion: s, auth: r, projectId: n, useOnCloseEvent: o }) {\n    const c = t.split(\"?\"), u = bp(i, e, s), d = {\n        auth: r,\n        ua: u,\n        projectId: n,\n        useOnCloseEvent: o || void 0\n    }, p = pp(c[1] || \"\", d);\n    return c[0] + \"?\" + p;\n}\nfunction _i(i, e) {\n    return i.filter((t)=>e.includes(t)).length === i.length;\n}\nfunction Lc(i) {\n    return Object.fromEntries(i.entries());\n}\nfunction Mc(i) {\n    return new Map(Object.entries(i));\n}\nfunction Ai(i = V.FIVE_MINUTES, e) {\n    const t = V.toMiliseconds(i || V.FIVE_MINUTES);\n    let s, r, n;\n    return {\n        resolve: (o)=>{\n            n && s && (clearTimeout(n), s(o));\n        },\n        reject: (o)=>{\n            n && r && (clearTimeout(n), r(o));\n        },\n        done: ()=>new Promise((o, c)=>{\n                n = setTimeout(()=>{\n                    c(new Error(e));\n                }, t), s = o, r = c;\n            })\n    };\n}\nfunction ds(i, e, t) {\n    return new Promise(async (s, r)=>{\n        const n = setTimeout(()=>r(new Error(t)), e);\n        try {\n            const o = await i;\n            s(o);\n        } catch (o) {\n            r(o);\n        }\n        clearTimeout(n);\n    });\n}\nfunction qc(i, e) {\n    if (typeof e == \"string\" && e.startsWith(`${i}:`)) return e;\n    if (i.toLowerCase() === \"topic\") {\n        if (typeof e != \"string\") throw new Error('Value must be \"string\" for expirer target type: topic');\n        return `topic:${e}`;\n    } else if (i.toLowerCase() === \"id\") {\n        if (typeof e != \"number\") throw new Error('Value must be \"number\" for expirer target type: id');\n        return `id:${e}`;\n    }\n    throw new Error(`Unknown expirer target type: ${i}`);\n}\nfunction vp(i) {\n    return qc(\"topic\", i);\n}\nfunction _p(i) {\n    return qc(\"id\", i);\n}\nfunction jc(i) {\n    const [e, t] = i.split(\":\"), s = {\n        id: void 0,\n        topic: void 0\n    };\n    if (e === \"topic\" && typeof t == \"string\") s.topic = t;\n    else if (e === \"id\" && Number.isInteger(Number(t))) s.id = Number(t);\n    else throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${t}`);\n    return s;\n}\nfunction Mt(i, e) {\n    return V.fromMiliseconds((e || Date.now()) + V.toMiliseconds(i));\n}\nfunction ai(i) {\n    return Date.now() >= V.toMiliseconds(i);\n}\nfunction Be(i, e) {\n    return `${i}${e ? `:${e}` : \"\"}`;\n}\nasync function Ep({ id: i, topic: e, wcDeepLink: t }) {\n    try {\n        if (!t) return;\n        let r = (typeof t == \"string\" ? JSON.parse(t) : t)?.href;\n        if (typeof r != \"string\") return;\n        r.endsWith(\"/\") && (r = r.slice(0, -1));\n        const n = `${r}/wc?requestId=${i}&sessionTopic=${e}`, o = _s();\n        o === Ot.browser ? n.startsWith(\"https://\") ? window.open(n, \"_blank\", \"noreferrer noopener\") : window.open(n, \"_self\", \"noreferrer noopener\") : o === Ot.reactNative && typeof (global == null ? void 0 : global.Linking) < \"u\" && await global.Linking.openURL(n);\n    } catch (s) {\n        console.error(s);\n    }\n}\nconst Sp = \"irn\";\nfunction Gr(i) {\n    return i?.relay || {\n        protocol: Sp\n    };\n}\nfunction js(i) {\n    const e = Ac[i];\n    if (typeof e > \"u\") throw new Error(`Relay Protocol not supported: ${i}`);\n    return e;\n}\nvar Ip = Object.defineProperty, $o = Object.getOwnPropertySymbols, Dp = Object.prototype.hasOwnProperty, xp = Object.prototype.propertyIsEnumerable, Fo = (i, e, t)=>e in i ? Ip(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, Op = (i, e)=>{\n    for(var t in e || (e = {}))Dp.call(e, t) && Fo(i, t, e[t]);\n    if ($o) for (var t of $o(e))xp.call(e, t) && Fo(i, t, e[t]);\n    return i;\n};\nfunction Np(i, e = \"-\") {\n    const t = {}, s = \"relay\" + e;\n    return Object.keys(i).forEach((r)=>{\n        if (r.startsWith(s)) {\n            const n = r.replace(s, \"\"), o = i[r];\n            t[n] = o;\n        }\n    }), t;\n}\nfunction Pp(i) {\n    const e = i.indexOf(\":\"), t = i.indexOf(\"?\") !== -1 ? i.indexOf(\"?\") : void 0, s = i.substring(0, e), r = i.substring(e + 1, t).split(\"@\"), n = typeof t < \"u\" ? i.substring(t) : \"\", o = ii.parse(n);\n    return {\n        protocol: s,\n        topic: Rp(r[0]),\n        version: parseInt(r[1], 10),\n        symKey: o.symKey,\n        relay: Np(o)\n    };\n}\nfunction Rp(i) {\n    return i.startsWith(\"//\") ? i.substring(2) : i;\n}\nfunction Cp(i, e = \"-\") {\n    const t = \"relay\", s = {};\n    return Object.keys(i).forEach((r)=>{\n        const n = t + e + r;\n        i[r] && (s[n] = i[r]);\n    }), s;\n}\nfunction Ap(i) {\n    return `${i.protocol}:${i.topic}@${i.version}?` + ii.stringify(Op({\n        symKey: i.symKey\n    }, Cp(i.relay)));\n}\nfunction Mi(i) {\n    const e = [];\n    return i.forEach((t)=>{\n        const [s, r] = t.split(\":\");\n        e.push(`${s}:${r}`);\n    }), e;\n}\nfunction Tp(i) {\n    const e = [];\n    return Object.values(i).forEach((t)=>{\n        e.push(...Mi(t.accounts));\n    }), e;\n}\nfunction $p(i, e) {\n    const t = [];\n    return Object.values(i).forEach((s)=>{\n        Mi(s.accounts).includes(e) && t.push(...s.methods);\n    }), t;\n}\nfunction Fp(i, e) {\n    const t = [];\n    return Object.values(i).forEach((s)=>{\n        Mi(s.accounts).includes(e) && t.push(...s.events);\n    }), t;\n}\nfunction Up(i, e) {\n    const t = zs(i, e);\n    if (t) throw new Error(t.message);\n    const s = {};\n    for (const [r, n] of Object.entries(i))s[r] = {\n        methods: n.methods,\n        events: n.events,\n        chains: n.accounts.map((o)=>`${o.split(\":\")[0]}:${o.split(\":\")[1]}`)\n    };\n    return s;\n}\nconst Lp = {\n    INVALID_METHOD: {\n        message: \"Invalid method.\",\n        code: 1001\n    },\n    INVALID_EVENT: {\n        message: \"Invalid event.\",\n        code: 1002\n    },\n    INVALID_UPDATE_REQUEST: {\n        message: \"Invalid update request.\",\n        code: 1003\n    },\n    INVALID_EXTEND_REQUEST: {\n        message: \"Invalid extend request.\",\n        code: 1004\n    },\n    INVALID_SESSION_SETTLE_REQUEST: {\n        message: \"Invalid session settle request.\",\n        code: 1005\n    },\n    UNAUTHORIZED_METHOD: {\n        message: \"Unauthorized method.\",\n        code: 3001\n    },\n    UNAUTHORIZED_EVENT: {\n        message: \"Unauthorized event.\",\n        code: 3002\n    },\n    UNAUTHORIZED_UPDATE_REQUEST: {\n        message: \"Unauthorized update request.\",\n        code: 3003\n    },\n    UNAUTHORIZED_EXTEND_REQUEST: {\n        message: \"Unauthorized extend request.\",\n        code: 3004\n    },\n    USER_REJECTED: {\n        message: \"User rejected.\",\n        code: 5e3\n    },\n    USER_REJECTED_CHAINS: {\n        message: \"User rejected chains.\",\n        code: 5001\n    },\n    USER_REJECTED_METHODS: {\n        message: \"User rejected methods.\",\n        code: 5002\n    },\n    USER_REJECTED_EVENTS: {\n        message: \"User rejected events.\",\n        code: 5003\n    },\n    UNSUPPORTED_CHAINS: {\n        message: \"Unsupported chains.\",\n        code: 5100\n    },\n    UNSUPPORTED_METHODS: {\n        message: \"Unsupported methods.\",\n        code: 5101\n    },\n    UNSUPPORTED_EVENTS: {\n        message: \"Unsupported events.\",\n        code: 5102\n    },\n    UNSUPPORTED_ACCOUNTS: {\n        message: \"Unsupported accounts.\",\n        code: 5103\n    },\n    UNSUPPORTED_NAMESPACE_KEY: {\n        message: \"Unsupported namespace key.\",\n        code: 5104\n    },\n    USER_DISCONNECTED: {\n        message: \"User disconnected.\",\n        code: 6e3\n    },\n    SESSION_SETTLEMENT_FAILED: {\n        message: \"Session settlement failed.\",\n        code: 7e3\n    },\n    WC_METHOD_UNSUPPORTED: {\n        message: \"Unsupported wc_ method.\",\n        code: 10001\n    }\n}, Mp = {\n    NOT_INITIALIZED: {\n        message: \"Not initialized.\",\n        code: 1\n    },\n    NO_MATCHING_KEY: {\n        message: \"No matching key.\",\n        code: 2\n    },\n    RESTORE_WILL_OVERRIDE: {\n        message: \"Restore will override.\",\n        code: 3\n    },\n    RESUBSCRIBED: {\n        message: \"Resubscribed.\",\n        code: 4\n    },\n    MISSING_OR_INVALID: {\n        message: \"Missing or invalid.\",\n        code: 5\n    },\n    EXPIRED: {\n        message: \"Expired.\",\n        code: 6\n    },\n    UNKNOWN_TYPE: {\n        message: \"Unknown type.\",\n        code: 7\n    },\n    MISMATCHED_TOPIC: {\n        message: \"Mismatched topic.\",\n        code: 8\n    },\n    NON_CONFORMING_NAMESPACES: {\n        message: \"Non conforming namespaces.\",\n        code: 9\n    }\n};\nfunction Y(i, e) {\n    const { message: t, code: s } = Mp[i];\n    return {\n        message: e ? `${t} ${e}` : t,\n        code: s\n    };\n}\nfunction nt(i, e) {\n    const { message: t, code: s } = Lp[i];\n    return {\n        message: e ? `${t} ${e}` : t,\n        code: s\n    };\n}\nfunction Es(i, e) {\n    return Array.isArray(i) ? typeof e < \"u\" && i.length ? i.every(e) : !0 : !1;\n}\nfunction cs(i) {\n    return Object.getPrototypeOf(i) === Object.prototype && Object.keys(i).length;\n}\nfunction bt(i) {\n    return typeof i > \"u\";\n}\nfunction ot(i, e) {\n    return e && bt(i) ? !0 : typeof i == \"string\" && !!i.trim().length;\n}\nfunction mn(i, e) {\n    return e && bt(i) ? !0 : typeof i == \"number\" && !isNaN(i);\n}\nfunction qp(i, e) {\n    const { requiredNamespaces: t } = e, s = Object.keys(i.namespaces), r = Object.keys(t);\n    let n = !0;\n    return _i(r, s) ? (s.forEach((o)=>{\n        const { accounts: c, methods: u, events: d } = i.namespaces[o], p = Mi(c), b = t[o];\n        (!_i(Tc(o, b), p) || !_i(b.methods, u) || !_i(b.events, d)) && (n = !1);\n    }), n) : !1;\n}\nfunction Js(i) {\n    return ot(i, !1) && i.includes(\":\") ? i.split(\":\").length === 2 : !1;\n}\nfunction jp(i) {\n    if (ot(i, !1) && i.includes(\":\")) {\n        const e = i.split(\":\");\n        if (e.length === 3) {\n            const t = e[0] + \":\" + e[1];\n            return !!e[2] && Js(t);\n        }\n    }\n    return !1;\n}\nfunction zp(i) {\n    if (ot(i, !1)) try {\n        return typeof new URL(i) < \"u\";\n    } catch  {\n        return !1;\n    }\n    return !1;\n}\nfunction Kp(i) {\n    var e;\n    return (e = i?.proposer) == null ? void 0 : e.publicKey;\n}\nfunction Vp(i) {\n    return i?.topic;\n}\nfunction Bp(i, e) {\n    let t = null;\n    return ot(i?.publicKey, !1) || (t = Y(\"MISSING_OR_INVALID\", `${e} controller public key should be a string`)), t;\n}\nfunction Uo(i) {\n    let e = !0;\n    return Es(i) ? i.length && (e = i.every((t)=>ot(t, !1))) : e = !1, e;\n}\nfunction kp(i, e, t) {\n    let s = null;\n    return Es(e) && e.length ? e.forEach((r)=>{\n        s || Js(r) || (s = nt(\"UNSUPPORTED_CHAINS\", `${t}, chain ${r} should be a string and conform to \"namespace:chainId\" format`));\n    }) : Js(i) || (s = nt(\"UNSUPPORTED_CHAINS\", `${t}, chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }`)), s;\n}\nfunction Hp(i, e, t) {\n    let s = null;\n    return Object.entries(i).forEach(([r, n])=>{\n        if (s) return;\n        const o = kp(r, Tc(r, n), `${e} ${t}`);\n        o && (s = o);\n    }), s;\n}\nfunction Gp(i, e) {\n    let t = null;\n    return Es(i) ? i.forEach((s)=>{\n        t || jp(s) || (t = nt(\"UNSUPPORTED_ACCOUNTS\", `${e}, account ${s} should be a string and conform to \"namespace:chainId:address\" format`));\n    }) : t = nt(\"UNSUPPORTED_ACCOUNTS\", `${e}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`), t;\n}\nfunction Wp(i, e) {\n    let t = null;\n    return Object.values(i).forEach((s)=>{\n        if (t) return;\n        const r = Gp(s?.accounts, `${e} namespace`);\n        r && (t = r);\n    }), t;\n}\nfunction Yp(i, e) {\n    let t = null;\n    return Uo(i?.methods) ? Uo(i?.events) || (t = nt(\"UNSUPPORTED_EVENTS\", `${e}, events should be an array of strings or empty array for no events`)) : t = nt(\"UNSUPPORTED_METHODS\", `${e}, methods should be an array of strings or empty array for no methods`), t;\n}\nfunction zc(i, e) {\n    let t = null;\n    return Object.values(i).forEach((s)=>{\n        if (t) return;\n        const r = Yp(s, `${e}, namespace`);\n        r && (t = r);\n    }), t;\n}\nfunction Jp(i, e, t) {\n    let s = null;\n    if (i && cs(i)) {\n        const r = zc(i, e);\n        r && (s = r);\n        const n = Hp(i, e, t);\n        n && (s = n);\n    } else s = Y(\"MISSING_OR_INVALID\", `${e}, ${t} should be an object with data`);\n    return s;\n}\nfunction zs(i, e) {\n    let t = null;\n    if (i && cs(i)) {\n        const s = zc(i, e);\n        s && (t = s);\n        const r = Wp(i, e);\n        r && (t = r);\n    } else t = Y(\"MISSING_OR_INVALID\", `${e}, namespaces should be an object with data`);\n    return t;\n}\nfunction Kc(i) {\n    return ot(i.protocol, !0);\n}\nfunction Qp(i, e) {\n    let t = !1;\n    return e && !i ? t = !0 : i && Es(i) && i.length && i.forEach((s)=>{\n        t = Kc(s);\n    }), t;\n}\nfunction Xp(i) {\n    return typeof i == \"number\";\n}\nfunction St(i) {\n    return typeof i < \"u\" && typeof i !== null;\n}\nfunction Zp(i) {\n    return !(!i || typeof i != \"object\" || !i.code || !mn(i.code, !1) || !i.message || !ot(i.message, !1));\n}\nfunction eg(i) {\n    return !(bt(i) || !ot(i.method, !1));\n}\nfunction tg(i) {\n    return !(bt(i) || bt(i.result) && bt(i.error) || !mn(i.id, !1) || !ot(i.jsonrpc, !1));\n}\nfunction ig(i) {\n    return !(bt(i) || !ot(i.name, !1));\n}\nfunction Lo(i, e) {\n    return !(!Js(e) || !Tp(i).includes(e));\n}\nfunction sg(i, e, t) {\n    return ot(t, !1) ? $p(i, e).includes(t) : !1;\n}\nfunction rg(i, e, t) {\n    return ot(t, !1) ? Fp(i, e).includes(t) : !1;\n}\nfunction Mo(i, e, t) {\n    let s = null;\n    const r = ng(i), n = og(e), o = Object.keys(r), c = Object.keys(n), u = qo(Object.keys(i)), d = qo(Object.keys(e)), p = u.filter((b)=>!d.includes(b));\n    return p.length && (s = Y(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces keys don't satisfy requiredNamespaces.\n      Required: ${p.toString()}\n      Received: ${Object.keys(e).toString()}`)), _i(o, c) || (s = Y(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces chains don't satisfy required namespaces.\n      Required: ${o.toString()}\n      Approved: ${c.toString()}`)), Object.keys(e).forEach((b)=>{\n        if (!b.includes(\":\") || s) return;\n        const x = Mi(e[b].accounts);\n        x.includes(b) || (s = Y(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces accounts don't satisfy namespace accounts for ${b}\n        Required: ${b}\n        Approved: ${x.toString()}`));\n    }), o.forEach((b)=>{\n        s || (_i(r[b].methods, n[b].methods) ? _i(r[b].events, n[b].events) || (s = Y(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces events don't satisfy namespace events for ${b}`)) : s = Y(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces methods don't satisfy namespace methods for ${b}`));\n    }), s;\n}\nfunction ng(i) {\n    const e = {};\n    return Object.keys(i).forEach((t)=>{\n        var s;\n        t.includes(\":\") ? e[t] = i[t] : (s = i[t].chains) == null || s.forEach((r)=>{\n            e[r] = {\n                methods: i[t].methods,\n                events: i[t].events\n            };\n        });\n    }), e;\n}\nfunction qo(i) {\n    return [\n        ...new Set(i.map((e)=>e.includes(\":\") ? e.split(\":\")[0] : e))\n    ];\n}\nfunction og(i) {\n    const e = {};\n    return Object.keys(i).forEach((t)=>{\n        t.includes(\":\") ? e[t] = i[t] : Mi(i[t].accounts)?.forEach((r)=>{\n            e[r] = {\n                accounts: i[t].accounts.filter((n)=>n.includes(`${r}:`)),\n                methods: i[t].methods,\n                events: i[t].events\n            };\n        });\n    }), e;\n}\nfunction ag(i, e) {\n    return mn(i, !1) && i <= e.max && i >= e.min;\n}\nfunction jo() {\n    const i = _s();\n    return new Promise((e)=>{\n        switch(i){\n            case Ot.browser:\n                e(cg());\n                break;\n            case Ot.reactNative:\n                e(hg());\n                break;\n            case Ot.node:\n                e(ug());\n                break;\n            default:\n                e(!0);\n        }\n    });\n}\nfunction cg() {\n    return vs() && navigator?.onLine;\n}\nasync function hg() {\n    return ur() && typeof global < \"u\" && global != null && global.NetInfo ? (await (global == null ? void 0 : global.NetInfo.fetch()))?.isConnected : !0;\n}\nfunction ug() {\n    return !0;\n}\nfunction lg(i) {\n    switch(_s()){\n        case Ot.browser:\n            dg(i);\n            break;\n        case Ot.reactNative:\n            fg(i);\n            break;\n    }\n}\nfunction dg(i) {\n    vs() && (window.addEventListener(\"online\", ()=>i(!0)), window.addEventListener(\"offline\", ()=>i(!1)));\n}\nfunction fg(i) {\n    ur() && typeof global < \"u\" && global != null && global.NetInfo && global?.NetInfo.addEventListener((e)=>i(e?.isConnected));\n}\nconst xr = {};\nlet $s = class {\n    static get(e) {\n        return xr[e];\n    }\n    static set(e, t) {\n        xr[e] = t;\n    }\n    static delete(e) {\n        delete xr[e];\n    }\n};\nconst pg = \"PARSE_ERROR\", gg = \"INVALID_REQUEST\", yg = \"METHOD_NOT_FOUND\", mg = \"INVALID_PARAMS\", Vc = \"INTERNAL_ERROR\", bn = \"SERVER_ERROR\", bg = [\n    -32700,\n    -32600,\n    -32601,\n    -32602,\n    -32603\n], hs = {\n    [pg]: {\n        code: -32700,\n        message: \"Parse error\"\n    },\n    [gg]: {\n        code: -32600,\n        message: \"Invalid Request\"\n    },\n    [yg]: {\n        code: -32601,\n        message: \"Method not found\"\n    },\n    [mg]: {\n        code: -32602,\n        message: \"Invalid params\"\n    },\n    [Vc]: {\n        code: -32603,\n        message: \"Internal error\"\n    },\n    [bn]: {\n        code: -32e3,\n        message: \"Server error\"\n    }\n}, Bc = bn;\nfunction wg(i) {\n    return bg.includes(i);\n}\nfunction zo(i) {\n    return Object.keys(hs).includes(i) ? hs[i] : hs[Bc];\n}\nfunction vg(i) {\n    const e = Object.values(hs).find((t)=>t.code === i);\n    return e || hs[Bc];\n}\nfunction _g(i, e, t) {\n    return i.message.includes(\"getaddrinfo ENOTFOUND\") || i.message.includes(\"connect ECONNREFUSED\") ? new Error(`Unavailable ${t} RPC url at ${e}`) : i;\n}\nvar kc = {}, Qt = {}, Ko;\nfunction Eg() {\n    if (Ko) return Qt;\n    Ko = 1, Object.defineProperty(Qt, \"__esModule\", {\n        value: !0\n    }), Qt.isBrowserCryptoAvailable = Qt.getSubtleCrypto = Qt.getBrowerCrypto = void 0;\n    function i() {\n        return (_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c === null || _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c === void 0 ? void 0 : _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.crypto) || (_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c === null || _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c === void 0 ? void 0 : _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.msCrypto) || {};\n    }\n    Qt.getBrowerCrypto = i;\n    function e() {\n        const s = i();\n        return s.subtle || s.webkitSubtle;\n    }\n    Qt.getSubtleCrypto = e;\n    function t() {\n        return !!i() && !!e();\n    }\n    return Qt.isBrowserCryptoAvailable = t, Qt;\n}\nvar Xt = {}, Vo;\nfunction Sg() {\n    if (Vo) return Xt;\n    Vo = 1, Object.defineProperty(Xt, \"__esModule\", {\n        value: !0\n    }), Xt.isBrowser = Xt.isNode = Xt.isReactNative = void 0;\n    function i() {\n        return typeof document > \"u\" && typeof navigator < \"u\" && navigator.product === \"ReactNative\";\n    }\n    Xt.isReactNative = i;\n    function e() {\n        return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n    }\n    Xt.isNode = e;\n    function t() {\n        return !i() && !e();\n    }\n    return Xt.isBrowser = t, Xt;\n}\n(function(i) {\n    Object.defineProperty(i, \"__esModule\", {\n        value: !0\n    });\n    const e = Ft;\n    e.__exportStar(Eg(), i), e.__exportStar(Sg(), i);\n})(kc);\nfunction wn(i = 3) {\n    const e = Date.now() * Math.pow(10, i), t = Math.floor(Math.random() * Math.pow(10, i));\n    return e + t;\n}\nfunction vn(i = 6) {\n    return BigInt(wn(i));\n}\nfunction ti(i, e, t) {\n    return {\n        id: t || wn(),\n        jsonrpc: \"2.0\",\n        method: i,\n        params: e\n    };\n}\nfunction xi(i, e) {\n    return {\n        id: i,\n        jsonrpc: \"2.0\",\n        result: e\n    };\n}\nfunction qi(i, e, t) {\n    return {\n        id: i,\n        jsonrpc: \"2.0\",\n        error: Ig(e, t)\n    };\n}\nfunction Ig(i, e) {\n    return typeof i > \"u\" ? zo(Vc) : (typeof i == \"string\" && (i = Object.assign(Object.assign({}, zo(bn)), {\n        message: i\n    })), typeof e < \"u\" && (i.data = e), wg(i.code) && (i = vg(i.code)), i);\n}\nclass Hc {\n}\nclass Dg extends Hc {\n    constructor(e){\n        super();\n    }\n}\nclass xg extends Hc {\n    constructor(){\n        super();\n    }\n}\nclass Og extends xg {\n    constructor(e){\n        super();\n    }\n}\nconst Ng = \"^wss?:\";\nfunction Pg(i) {\n    const e = i.match(new RegExp(/^\\w+:/, \"gi\"));\n    if (!(!e || !e.length)) return e[0];\n}\nfunction Rg(i, e) {\n    const t = Pg(i);\n    return typeof t > \"u\" ? !1 : new RegExp(e).test(t);\n}\nfunction Bo(i) {\n    return Rg(i, Ng);\n}\nfunction Cg(i) {\n    return new RegExp(\"wss?://localhost(:d{2,5})?\").test(i);\n}\nfunction Gc(i) {\n    return typeof i == \"object\" && \"id\" in i && \"jsonrpc\" in i && i.jsonrpc === \"2.0\";\n}\nfunction ji(i) {\n    return Gc(i) && \"method\" in i;\n}\nfunction Oi(i) {\n    return Gc(i) && (ht(i) || Ge(i));\n}\nfunction ht(i) {\n    return \"result\" in i;\n}\nfunction Ge(i) {\n    return \"error\" in i;\n}\nclass _n extends Og {\n    constructor(e){\n        super(e), this.events = new We.EventEmitter(), this.hasRegisteredEventListeners = !1, this.connection = this.setConnection(e), this.connection.connected && this.registerEventListeners();\n    }\n    async connect(e = this.connection) {\n        await this.open(e);\n    }\n    async disconnect() {\n        await this.close();\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async request(e, t) {\n        return this.requestStrict(ti(e.method, e.params || [], e.id || vn().toString()), t);\n    }\n    async requestStrict(e, t) {\n        return new Promise(async (s, r)=>{\n            if (!this.connection.connected) try {\n                await this.open();\n            } catch (n) {\n                r(n);\n            }\n            this.events.on(`${e.id}`, (n)=>{\n                Ge(n) ? r(n.error) : s(n.result);\n            });\n            try {\n                await this.connection.send(e, t);\n            } catch (n) {\n                r(n);\n            }\n        });\n    }\n    setConnection(e = this.connection) {\n        return e;\n    }\n    onPayload(e) {\n        this.events.emit(\"payload\", e), Oi(e) ? this.events.emit(`${e.id}`, e) : this.events.emit(\"message\", {\n            type: e.method,\n            data: e.params\n        });\n    }\n    onClose(e) {\n        e && e.code === 3e3 && this.events.emit(\"error\", new Error(`WebSocket connection closed abnormally with code: ${e.code} ${e.reason ? `(${e.reason})` : \"\"}`)), this.events.emit(\"disconnect\");\n    }\n    async open(e = this.connection) {\n        this.connection === e && this.connection.connected || (this.connection.connected && this.close(), typeof e == \"string\" && (await this.connection.open(e), e = this.connection), this.connection = this.setConnection(e), await this.connection.open(), this.registerEventListeners(), this.events.emit(\"connect\"));\n    }\n    async close() {\n        await this.connection.close();\n    }\n    registerEventListeners() {\n        this.hasRegisteredEventListeners || (this.connection.on(\"payload\", (e)=>this.onPayload(e)), this.connection.on(\"close\", (e)=>this.onClose(e)), this.connection.on(\"error\", (e)=>this.events.emit(\"error\", e)), this.connection.on(\"register_error\", (e)=>this.onClose()), this.hasRegisteredEventListeners = !0);\n    }\n}\nconst Ag = ()=>typeof WebSocket < \"u\" ? WebSocket : typeof global < \"u\" && typeof global.WebSocket < \"u\" ? global.WebSocket :  false ? 0 : typeof self < \"u\" && typeof self.WebSocket < \"u\" ? self.WebSocket : require(\"ws\"), Tg = ()=>typeof WebSocket < \"u\" || typeof global < \"u\" && typeof global.WebSocket < \"u\" ||  false && 0 || typeof self < \"u\" && typeof self.WebSocket < \"u\", ko = (i)=>i.split(\"?\")[0], Ho = 10, $g = Ag();\nclass Wc {\n    constructor(e){\n        if (this.url = e, this.events = new We.EventEmitter(), this.registering = !1, !Bo(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n        this.url = e;\n    }\n    get connected() {\n        return typeof this.socket < \"u\";\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async open(e = this.url) {\n        await this.register(e);\n    }\n    async close() {\n        return new Promise((e, t)=>{\n            if (typeof this.socket > \"u\") {\n                t(new Error(\"Connection already closed\"));\n                return;\n            }\n            this.socket.onclose = (s)=>{\n                this.onClose(s), e();\n            }, this.socket.close();\n        });\n    }\n    async send(e, t) {\n        typeof this.socket > \"u\" && (this.socket = await this.register());\n        try {\n            this.socket.send(rr(e));\n        } catch (s) {\n            this.onError(e.id, s);\n        }\n    }\n    register(e = this.url) {\n        if (!Bo(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n        if (this.registering) {\n            const t = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= t || this.events.listenerCount(\"open\") >= t) && this.events.setMaxListeners(t + 1), new Promise((s, r)=>{\n                this.events.once(\"register_error\", (n)=>{\n                    this.resetMaxListeners(), r(n);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.socket > \"u\") return r(new Error(\"WebSocket connection is missing or invalid\"));\n                    s(this.socket);\n                });\n            });\n        }\n        return this.url = e, this.registering = !0, new Promise((t, s)=>{\n            const r = kc.isReactNative() ? void 0 : {\n                rejectUnauthorized: !Cg(e)\n            }, n = new $g(e, [], r);\n            Tg() ? n.onerror = (o)=>{\n                const c = o;\n                s(this.emitError(c.error));\n            } : n.on(\"error\", (o)=>{\n                s(this.emitError(o));\n            }), n.onopen = ()=>{\n                this.onOpen(n), t(n);\n            };\n        });\n    }\n    onOpen(e) {\n        e.onmessage = (t)=>this.onPayload(t), e.onclose = (t)=>this.onClose(t), this.socket = e, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose(e) {\n        this.socket = void 0, this.registering = !1, this.events.emit(\"close\", e);\n    }\n    onPayload(e) {\n        if (typeof e.data > \"u\") return;\n        const t = typeof e.data == \"string\" ? rn(e.data) : e.data;\n        this.events.emit(\"payload\", t);\n    }\n    onError(e, t) {\n        const s = this.parseError(t), r = s.message || s.toString(), n = qi(e, r);\n        this.events.emit(\"payload\", n);\n    }\n    parseError(e, t = this.url) {\n        return _g(e, ko(t), \"WS\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > Ho && this.events.setMaxListeners(Ho);\n    }\n    emitError(e) {\n        const t = this.parseError(new Error(e?.message || `WebSocket connection failed for host: ${ko(this.url)}`));\n        return this.events.emit(\"register_error\", t), t;\n    }\n}\nvar Qs = {\n    exports: {}\n};\nQs.exports;\n(function(i, e) {\n    var t = 200, s = \"__lodash_hash_undefined__\", r = 1, n = 2, o = 9007199254740991, c = \"[object Arguments]\", u = \"[object Array]\", d = \"[object AsyncFunction]\", p = \"[object Boolean]\", b = \"[object Date]\", x = \"[object Error]\", O = \"[object Function]\", _ = \"[object GeneratorFunction]\", C = \"[object Map]\", F = \"[object Number]\", K = \"[object Null]\", I = \"[object Object]\", D = \"[object Promise]\", y = \"[object Proxy]\", w = \"[object RegExp]\", f = \"[object Set]\", a = \"[object String]\", l = \"[object Symbol]\", L = \"[object Undefined]\", v = \"[object WeakMap]\", R = \"[object ArrayBuffer]\", $ = \"[object DataView]\", q = \"[object Float32Array]\", m = \"[object Float64Array]\", E = \"[object Int8Array]\", B = \"[object Int16Array]\", z = \"[object Int32Array]\", j = \"[object Uint8Array]\", U = \"[object Uint8ClampedArray]\", M = \"[object Uint16Array]\", H = \"[object Uint32Array]\", te = /[\\\\^$.*+?()[\\]{}|]/g, G = /^\\[object .+?Constructor\\]$/, ie = /^(?:0|[1-9]\\d*)$/, Q = {};\n    Q[q] = Q[m] = Q[E] = Q[B] = Q[z] = Q[j] = Q[U] = Q[M] = Q[H] = !0, Q[c] = Q[u] = Q[R] = Q[p] = Q[$] = Q[b] = Q[x] = Q[O] = Q[C] = Q[F] = Q[I] = Q[w] = Q[f] = Q[a] = Q[v] = !1;\n    var se = typeof _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c == \"object\" && _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c && _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.Object === Object && _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c, T = typeof self == \"object\" && self && self.Object === Object && self, A = se || T || Function(\"return this\")(), N = e && !e.nodeType && e, h = N && !0 && i && !i.nodeType && i, S = h && h.exports === N, W = S && se.process, X = function() {\n        try {\n            return W && W.binding && W.binding(\"util\");\n        } catch  {}\n    }(), fe = X && X.isTypedArray;\n    function ve(g, P) {\n        for(var k = -1, Z = g == null ? 0 : g.length, Re = 0, ae = []; ++k < Z;){\n            var Le = g[k];\n            P(Le, k, g) && (ae[Re++] = Le);\n        }\n        return ae;\n    }\n    function ge(g, P) {\n        for(var k = -1, Z = P.length, Re = g.length; ++k < Z;)g[Re + k] = P[k];\n        return g;\n    }\n    function Se(g, P) {\n        for(var k = -1, Z = g == null ? 0 : g.length; ++k < Z;)if (P(g[k], k, g)) return !0;\n        return !1;\n    }\n    function Me(g, P) {\n        for(var k = -1, Z = Array(g); ++k < g;)Z[k] = P(k);\n        return Z;\n    }\n    function $e(g) {\n        return function(P) {\n            return g(P);\n        };\n    }\n    function be(g, P) {\n        return g.has(P);\n    }\n    function ye(g, P) {\n        return g?.[P];\n    }\n    function pe(g) {\n        var P = -1, k = Array(g.size);\n        return g.forEach(function(Z, Re) {\n            k[++P] = [\n                Re,\n                Z\n            ];\n        }), k;\n    }\n    function le(g, P) {\n        return function(k) {\n            return g(P(k));\n        };\n    }\n    function ue(g) {\n        var P = -1, k = Array(g.size);\n        return g.forEach(function(Z) {\n            k[++P] = Z;\n        }), k;\n    }\n    var he = Array.prototype, ce = Function.prototype, re = Object.prototype, de = A[\"__core-js_shared__\"], me = ce.toString, ne = re.hasOwnProperty, _e = function() {\n        var g = /[^.]+$/.exec(de && de.keys && de.keys.IE_PROTO || \"\");\n        return g ? \"Symbol(src)_1.\" + g : \"\";\n    }(), Ee = re.toString, De = RegExp(\"^\" + me.call(ne).replace(te, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\"), xe = S ? A.Buffer : void 0, Ie = A.Symbol, Ut = A.Uint8Array, qt = re.propertyIsEnumerable, si = he.splice, Dt = Ie ? Ie.toStringTag : void 0, fi = Object.getOwnPropertySymbols, Ki = xe ? xe.isBuffer : void 0, Os = le(Object.keys, Object), qe = Pi(A, \"DataView\"), Fe = Pi(A, \"Map\"), je = Pi(A, \"Promise\"), ze = Pi(A, \"Set\"), Ke = Pi(A, \"WeakMap\"), Ue = Pi(Object, \"create\"), Qe = gi(qe), Xe = gi(Fe), Ze = gi(je), et = gi(ze), tt = gi(Ke), Ye = Ie ? Ie.prototype : void 0, Ve = Ye ? Ye.valueOf : void 0;\n    function Ae(g) {\n        var P = -1, k = g == null ? 0 : g.length;\n        for(this.clear(); ++P < k;){\n            var Z = g[P];\n            this.set(Z[0], Z[1]);\n        }\n    }\n    function it() {\n        this.__data__ = Ue ? Ue(null) : {}, this.size = 0;\n    }\n    function st(g) {\n        var P = this.has(g) && delete this.__data__[g];\n        return this.size -= P ? 1 : 0, P;\n    }\n    function kh(g) {\n        var P = this.__data__;\n        if (Ue) {\n            var k = P[g];\n            return k === s ? void 0 : k;\n        }\n        return ne.call(P, g) ? P[g] : void 0;\n    }\n    function Hh(g) {\n        var P = this.__data__;\n        return Ue ? P[g] !== void 0 : ne.call(P, g);\n    }\n    function Gh(g, P) {\n        var k = this.__data__;\n        return this.size += this.has(g) ? 0 : 1, k[g] = Ue && P === void 0 ? s : P, this;\n    }\n    Ae.prototype.clear = it, Ae.prototype.delete = st, Ae.prototype.get = kh, Ae.prototype.has = Hh, Ae.prototype.set = Gh;\n    function Yt(g) {\n        var P = -1, k = g == null ? 0 : g.length;\n        for(this.clear(); ++P < k;){\n            var Z = g[P];\n            this.set(Z[0], Z[1]);\n        }\n    }\n    function Wh() {\n        this.__data__ = [], this.size = 0;\n    }\n    function Yh(g) {\n        var P = this.__data__, k = Ps(P, g);\n        if (k < 0) return !1;\n        var Z = P.length - 1;\n        return k == Z ? P.pop() : si.call(P, k, 1), --this.size, !0;\n    }\n    function Jh(g) {\n        var P = this.__data__, k = Ps(P, g);\n        return k < 0 ? void 0 : P[k][1];\n    }\n    function Qh(g) {\n        return Ps(this.__data__, g) > -1;\n    }\n    function Xh(g, P) {\n        var k = this.__data__, Z = Ps(k, g);\n        return Z < 0 ? (++this.size, k.push([\n            g,\n            P\n        ])) : k[Z][1] = P, this;\n    }\n    Yt.prototype.clear = Wh, Yt.prototype.delete = Yh, Yt.prototype.get = Jh, Yt.prototype.has = Qh, Yt.prototype.set = Xh;\n    function pi(g) {\n        var P = -1, k = g == null ? 0 : g.length;\n        for(this.clear(); ++P < k;){\n            var Z = g[P];\n            this.set(Z[0], Z[1]);\n        }\n    }\n    function Zh() {\n        this.size = 0, this.__data__ = {\n            hash: new Ae(),\n            map: new (Fe || Yt)(),\n            string: new Ae()\n        };\n    }\n    function eu(g) {\n        var P = Rs(this, g).delete(g);\n        return this.size -= P ? 1 : 0, P;\n    }\n    function tu(g) {\n        return Rs(this, g).get(g);\n    }\n    function iu(g) {\n        return Rs(this, g).has(g);\n    }\n    function su(g, P) {\n        var k = Rs(this, g), Z = k.size;\n        return k.set(g, P), this.size += k.size == Z ? 0 : 1, this;\n    }\n    pi.prototype.clear = Zh, pi.prototype.delete = eu, pi.prototype.get = tu, pi.prototype.has = iu, pi.prototype.set = su;\n    function Ns(g) {\n        var P = -1, k = g == null ? 0 : g.length;\n        for(this.__data__ = new pi(); ++P < k;)this.add(g[P]);\n    }\n    function ru(g) {\n        return this.__data__.set(g, s), this;\n    }\n    function nu(g) {\n        return this.__data__.has(g);\n    }\n    Ns.prototype.add = Ns.prototype.push = ru, Ns.prototype.has = nu;\n    function ri(g) {\n        var P = this.__data__ = new Yt(g);\n        this.size = P.size;\n    }\n    function ou() {\n        this.__data__ = new Yt(), this.size = 0;\n    }\n    function au(g) {\n        var P = this.__data__, k = P.delete(g);\n        return this.size = P.size, k;\n    }\n    function cu(g) {\n        return this.__data__.get(g);\n    }\n    function hu(g) {\n        return this.__data__.has(g);\n    }\n    function uu(g, P) {\n        var k = this.__data__;\n        if (k instanceof Yt) {\n            var Z = k.__data__;\n            if (!Fe || Z.length < t - 1) return Z.push([\n                g,\n                P\n            ]), this.size = ++k.size, this;\n            k = this.__data__ = new pi(Z);\n        }\n        return k.set(g, P), this.size = k.size, this;\n    }\n    ri.prototype.clear = ou, ri.prototype.delete = au, ri.prototype.get = cu, ri.prototype.has = hu, ri.prototype.set = uu;\n    function lu(g, P) {\n        var k = Cs(g), Z = !k && xu(g), Re = !k && !Z && gr(g), ae = !k && !Z && !Re && Kn(g), Le = k || Z || Re || ae, rt = Le ? Me(g.length, String) : [], ct = rt.length;\n        for(var Te in g)(P || ne.call(g, Te)) && !(Le && // Safari 9 has enumerable `arguments.length` in strict mode.\n        (Te == \"length\" || // Node.js 0.10 has enumerable non-index properties on buffers.\n        Re && (Te == \"offset\" || Te == \"parent\") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n        ae && (Te == \"buffer\" || Te == \"byteLength\" || Te == \"byteOffset\") || // Skip index properties.\n        _u(Te, ct))) && rt.push(Te);\n        return rt;\n    }\n    function Ps(g, P) {\n        for(var k = g.length; k--;)if (Mn(g[k][0], P)) return k;\n        return -1;\n    }\n    function du(g, P, k) {\n        var Z = P(g);\n        return Cs(g) ? Z : ge(Z, k(g));\n    }\n    function Vi(g) {\n        return g == null ? g === void 0 ? L : K : Dt && Dt in Object(g) ? wu(g) : Du(g);\n    }\n    function $n(g) {\n        return Bi(g) && Vi(g) == c;\n    }\n    function Fn(g, P, k, Z, Re) {\n        return g === P ? !0 : g == null || P == null || !Bi(g) && !Bi(P) ? g !== g && P !== P : fu(g, P, k, Z, Fn, Re);\n    }\n    function fu(g, P, k, Z, Re, ae) {\n        var Le = Cs(g), rt = Cs(P), ct = Le ? u : ni(g), Te = rt ? u : ni(P);\n        ct = ct == c ? I : ct, Te = Te == c ? I : Te;\n        var xt = ct == I, Lt = Te == I, ft = ct == Te;\n        if (ft && gr(g)) {\n            if (!gr(P)) return !1;\n            Le = !0, xt = !1;\n        }\n        if (ft && !xt) return ae || (ae = new ri()), Le || Kn(g) ? Un(g, P, k, Z, Re, ae) : mu(g, P, ct, k, Z, Re, ae);\n        if (!(k & r)) {\n            var Rt = xt && ne.call(g, \"__wrapped__\"), Ct = Lt && ne.call(P, \"__wrapped__\");\n            if (Rt || Ct) {\n                var oi = Rt ? g.value() : g, Jt = Ct ? P.value() : P;\n                return ae || (ae = new ri()), Re(oi, Jt, k, Z, ae);\n            }\n        }\n        return ft ? (ae || (ae = new ri()), bu(g, P, k, Z, Re, ae)) : !1;\n    }\n    function pu(g) {\n        if (!zn(g) || Su(g)) return !1;\n        var P = qn(g) ? De : G;\n        return P.test(gi(g));\n    }\n    function gu(g) {\n        return Bi(g) && jn(g.length) && !!Q[Vi(g)];\n    }\n    function yu(g) {\n        if (!Iu(g)) return Os(g);\n        var P = [];\n        for(var k in Object(g))ne.call(g, k) && k != \"constructor\" && P.push(k);\n        return P;\n    }\n    function Un(g, P, k, Z, Re, ae) {\n        var Le = k & r, rt = g.length, ct = P.length;\n        if (rt != ct && !(Le && ct > rt)) return !1;\n        var Te = ae.get(g);\n        if (Te && ae.get(P)) return Te == P;\n        var xt = -1, Lt = !0, ft = k & n ? new Ns() : void 0;\n        for(ae.set(g, P), ae.set(P, g); ++xt < rt;){\n            var Rt = g[xt], Ct = P[xt];\n            if (Z) var oi = Le ? Z(Ct, Rt, xt, P, g, ae) : Z(Rt, Ct, xt, g, P, ae);\n            if (oi !== void 0) {\n                if (oi) continue;\n                Lt = !1;\n                break;\n            }\n            if (ft) {\n                if (!Se(P, function(Jt, yi) {\n                    if (!be(ft, yi) && (Rt === Jt || Re(Rt, Jt, k, Z, ae))) return ft.push(yi);\n                })) {\n                    Lt = !1;\n                    break;\n                }\n            } else if (!(Rt === Ct || Re(Rt, Ct, k, Z, ae))) {\n                Lt = !1;\n                break;\n            }\n        }\n        return ae.delete(g), ae.delete(P), Lt;\n    }\n    function mu(g, P, k, Z, Re, ae, Le) {\n        switch(k){\n            case $:\n                if (g.byteLength != P.byteLength || g.byteOffset != P.byteOffset) return !1;\n                g = g.buffer, P = P.buffer;\n            case R:\n                return !(g.byteLength != P.byteLength || !ae(new Ut(g), new Ut(P)));\n            case p:\n            case b:\n            case F:\n                return Mn(+g, +P);\n            case x:\n                return g.name == P.name && g.message == P.message;\n            case w:\n            case a:\n                return g == P + \"\";\n            case C:\n                var rt = pe;\n            case f:\n                var ct = Z & r;\n                if (rt || (rt = ue), g.size != P.size && !ct) return !1;\n                var Te = Le.get(g);\n                if (Te) return Te == P;\n                Z |= n, Le.set(g, P);\n                var xt = Un(rt(g), rt(P), Z, Re, ae, Le);\n                return Le.delete(g), xt;\n            case l:\n                if (Ve) return Ve.call(g) == Ve.call(P);\n        }\n        return !1;\n    }\n    function bu(g, P, k, Z, Re, ae) {\n        var Le = k & r, rt = Ln(g), ct = rt.length, Te = Ln(P), xt = Te.length;\n        if (ct != xt && !Le) return !1;\n        for(var Lt = ct; Lt--;){\n            var ft = rt[Lt];\n            if (!(Le ? ft in P : ne.call(P, ft))) return !1;\n        }\n        var Rt = ae.get(g);\n        if (Rt && ae.get(P)) return Rt == P;\n        var Ct = !0;\n        ae.set(g, P), ae.set(P, g);\n        for(var oi = Le; ++Lt < ct;){\n            ft = rt[Lt];\n            var Jt = g[ft], yi = P[ft];\n            if (Z) var Vn = Le ? Z(yi, Jt, ft, P, g, ae) : Z(Jt, yi, ft, g, P, ae);\n            if (!(Vn === void 0 ? Jt === yi || Re(Jt, yi, k, Z, ae) : Vn)) {\n                Ct = !1;\n                break;\n            }\n            oi || (oi = ft == \"constructor\");\n        }\n        if (Ct && !oi) {\n            var As = g.constructor, Ts = P.constructor;\n            As != Ts && \"constructor\" in g && \"constructor\" in P && !(typeof As == \"function\" && As instanceof As && typeof Ts == \"function\" && Ts instanceof Ts) && (Ct = !1);\n        }\n        return ae.delete(g), ae.delete(P), Ct;\n    }\n    function Ln(g) {\n        return du(g, Pu, vu);\n    }\n    function Rs(g, P) {\n        var k = g.__data__;\n        return Eu(P) ? k[typeof P == \"string\" ? \"string\" : \"hash\"] : k.map;\n    }\n    function Pi(g, P) {\n        var k = ye(g, P);\n        return pu(k) ? k : void 0;\n    }\n    function wu(g) {\n        var P = ne.call(g, Dt), k = g[Dt];\n        try {\n            g[Dt] = void 0;\n            var Z = !0;\n        } catch  {}\n        var Re = Ee.call(g);\n        return Z && (P ? g[Dt] = k : delete g[Dt]), Re;\n    }\n    var vu = fi ? function(g) {\n        return g == null ? [] : (g = Object(g), ve(fi(g), function(P) {\n            return qt.call(g, P);\n        }));\n    } : Ru, ni = Vi;\n    (qe && ni(new qe(new ArrayBuffer(1))) != $ || Fe && ni(new Fe()) != C || je && ni(je.resolve()) != D || ze && ni(new ze()) != f || Ke && ni(new Ke()) != v) && (ni = function(g) {\n        var P = Vi(g), k = P == I ? g.constructor : void 0, Z = k ? gi(k) : \"\";\n        if (Z) switch(Z){\n            case Qe:\n                return $;\n            case Xe:\n                return C;\n            case Ze:\n                return D;\n            case et:\n                return f;\n            case tt:\n                return v;\n        }\n        return P;\n    });\n    function _u(g, P) {\n        return P = P ?? o, !!P && (typeof g == \"number\" || ie.test(g)) && g > -1 && g % 1 == 0 && g < P;\n    }\n    function Eu(g) {\n        var P = typeof g;\n        return P == \"string\" || P == \"number\" || P == \"symbol\" || P == \"boolean\" ? g !== \"__proto__\" : g === null;\n    }\n    function Su(g) {\n        return !!_e && _e in g;\n    }\n    function Iu(g) {\n        var P = g && g.constructor, k = typeof P == \"function\" && P.prototype || re;\n        return g === k;\n    }\n    function Du(g) {\n        return Ee.call(g);\n    }\n    function gi(g) {\n        if (g != null) {\n            try {\n                return me.call(g);\n            } catch  {}\n            try {\n                return g + \"\";\n            } catch  {}\n        }\n        return \"\";\n    }\n    function Mn(g, P) {\n        return g === P || g !== g && P !== P;\n    }\n    var xu = $n(function() {\n        return arguments;\n    }()) ? $n : function(g) {\n        return Bi(g) && ne.call(g, \"callee\") && !qt.call(g, \"callee\");\n    }, Cs = Array.isArray;\n    function Ou(g) {\n        return g != null && jn(g.length) && !qn(g);\n    }\n    var gr = Ki || Cu;\n    function Nu(g, P) {\n        return Fn(g, P);\n    }\n    function qn(g) {\n        if (!zn(g)) return !1;\n        var P = Vi(g);\n        return P == O || P == _ || P == d || P == y;\n    }\n    function jn(g) {\n        return typeof g == \"number\" && g > -1 && g % 1 == 0 && g <= o;\n    }\n    function zn(g) {\n        var P = typeof g;\n        return g != null && (P == \"object\" || P == \"function\");\n    }\n    function Bi(g) {\n        return g != null && typeof g == \"object\";\n    }\n    var Kn = fe ? $e(fe) : gu;\n    function Pu(g) {\n        return Ou(g) ? lu(g) : yu(g);\n    }\n    function Ru() {\n        return [];\n    }\n    function Cu() {\n        return !1;\n    }\n    i.exports = Nu;\n})(Qs, Qs.exports);\nvar Fg = Qs.exports;\nconst Yc = /* @__PURE__ */ (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.e)(Fg);\nfunction Ug(i, e) {\n    if (i.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var t = new Uint8Array(256), s = 0; s < t.length; s++)t[s] = 255;\n    for(var r = 0; r < i.length; r++){\n        var n = i.charAt(r), o = n.charCodeAt(0);\n        if (t[o] !== 255) throw new TypeError(n + \" is ambiguous\");\n        t[o] = r;\n    }\n    var c = i.length, u = i.charAt(0), d = Math.log(c) / Math.log(256), p = Math.log(256) / Math.log(c);\n    function b(_) {\n        if (_ instanceof Uint8Array || (ArrayBuffer.isView(_) ? _ = new Uint8Array(_.buffer, _.byteOffset, _.byteLength) : Array.isArray(_) && (_ = Uint8Array.from(_))), !(_ instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (_.length === 0) return \"\";\n        for(var C = 0, F = 0, K = 0, I = _.length; K !== I && _[K] === 0;)K++, C++;\n        for(var D = (I - K) * p + 1 >>> 0, y = new Uint8Array(D); K !== I;){\n            for(var w = _[K], f = 0, a = D - 1; (w !== 0 || f < F) && a !== -1; a--, f++)w += 256 * y[a] >>> 0, y[a] = w % c >>> 0, w = w / c >>> 0;\n            if (w !== 0) throw new Error(\"Non-zero carry\");\n            F = f, K++;\n        }\n        for(var l = D - F; l !== D && y[l] === 0;)l++;\n        for(var L = u.repeat(C); l < D; ++l)L += i.charAt(y[l]);\n        return L;\n    }\n    function x(_) {\n        if (typeof _ != \"string\") throw new TypeError(\"Expected String\");\n        if (_.length === 0) return new Uint8Array();\n        var C = 0;\n        if (_[C] !== \" \") {\n            for(var F = 0, K = 0; _[C] === u;)F++, C++;\n            for(var I = (_.length - C) * d + 1 >>> 0, D = new Uint8Array(I); _[C];){\n                var y = t[_.charCodeAt(C)];\n                if (y === 255) return;\n                for(var w = 0, f = I - 1; (y !== 0 || w < K) && f !== -1; f--, w++)y += c * D[f] >>> 0, D[f] = y % 256 >>> 0, y = y / 256 >>> 0;\n                if (y !== 0) throw new Error(\"Non-zero carry\");\n                K = w, C++;\n            }\n            if (_[C] !== \" \") {\n                for(var a = I - K; a !== I && D[a] === 0;)a++;\n                for(var l = new Uint8Array(F + (I - a)), L = F; a !== I;)l[L++] = D[a++];\n                return l;\n            }\n        }\n    }\n    function O(_) {\n        var C = x(_);\n        if (C) return C;\n        throw new Error(`Non-${e} character`);\n    }\n    return {\n        encode: b,\n        decodeUnsafe: x,\n        decode: O\n    };\n}\nvar Lg = Ug, Mg = Lg;\nconst Jc = (i)=>{\n    if (i instanceof Uint8Array && i.constructor.name === \"Uint8Array\") return i;\n    if (i instanceof ArrayBuffer) return new Uint8Array(i);\n    if (ArrayBuffer.isView(i)) return new Uint8Array(i.buffer, i.byteOffset, i.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, qg = (i)=>new TextEncoder().encode(i), jg = (i)=>new TextDecoder().decode(i);\nlet zg = class {\n    constructor(e, t, s){\n        this.name = e, this.prefix = t, this.baseEncode = s;\n    }\n    encode(e) {\n        if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;\n        throw Error(\"Unknown type, must be binary type\");\n    }\n}, Kg = class {\n    constructor(e, t, s){\n        if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;\n    }\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return Qc(this, e);\n    }\n}, Vg = class {\n    constructor(e){\n        this.decoders = e;\n    }\n    or(e) {\n        return Qc(this, e);\n    }\n    decode(e) {\n        const t = e[0], s = this.decoders[t];\n        if (s) return s.decode(e);\n        throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n};\nconst Qc = (i, e)=>new Vg({\n        ...i.decoders || {\n            [i.prefix]: i\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nlet Bg = class {\n    constructor(e, t, s, r){\n        this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = r, this.encoder = new zg(e, t, s), this.decoder = new Kg(e, t, r);\n    }\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n};\nconst lr = ({ name: i, prefix: e, encode: t, decode: s })=>new Bg(i, e, t, s), Ss = ({ prefix: i, name: e, alphabet: t })=>{\n    const { encode: s, decode: r } = Mg(t, e);\n    return lr({\n        prefix: i,\n        name: e,\n        encode: s,\n        decode: (n)=>Jc(r(n))\n    });\n}, kg = (i, e, t, s)=>{\n    const r = {};\n    for(let p = 0; p < e.length; ++p)r[e[p]] = p;\n    let n = i.length;\n    for(; i[n - 1] === \"=\";)--n;\n    const o = new Uint8Array(n * t / 8 | 0);\n    let c = 0, u = 0, d = 0;\n    for(let p = 0; p < n; ++p){\n        const b = r[i[p]];\n        if (b === void 0) throw new SyntaxError(`Non-${s} character`);\n        u = u << t | b, c += t, c >= 8 && (c -= 8, o[d++] = 255 & u >> c);\n    }\n    if (c >= t || 255 & u << 8 - c) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, Hg = (i, e, t)=>{\n    const s = e[e.length - 1] === \"=\", r = (1 << t) - 1;\n    let n = \"\", o = 0, c = 0;\n    for(let u = 0; u < i.length; ++u)for(c = c << 8 | i[u], o += 8; o > t;)o -= t, n += e[r & c >> o];\n    if (o && (n += e[r & c << t - o]), s) for(; n.length * t & 7;)n += \"=\";\n    return n;\n}, lt = ({ name: i, prefix: e, bitsPerChar: t, alphabet: s })=>lr({\n        prefix: e,\n        name: i,\n        encode (r) {\n            return Hg(r, s, t);\n        },\n        decode (r) {\n            return kg(r, s, t, i);\n        }\n    }), Gg = lr({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (i)=>jg(i),\n    decode: (i)=>qg(i)\n});\nvar Wg = Object.freeze({\n    __proto__: null,\n    identity: Gg\n});\nconst Yg = lt({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar Jg = Object.freeze({\n    __proto__: null,\n    base2: Yg\n});\nconst Qg = lt({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar Xg = Object.freeze({\n    __proto__: null,\n    base8: Qg\n});\nconst Zg = Ss({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar ey = Object.freeze({\n    __proto__: null,\n    base10: Zg\n});\nconst ty = lt({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), iy = lt({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar sy = Object.freeze({\n    __proto__: null,\n    base16: ty,\n    base16upper: iy\n});\nconst ry = lt({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), ny = lt({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), oy = lt({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), ay = lt({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), cy = lt({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), hy = lt({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), uy = lt({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), ly = lt({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), dy = lt({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar fy = Object.freeze({\n    __proto__: null,\n    base32: ry,\n    base32upper: ny,\n    base32pad: oy,\n    base32padupper: ay,\n    base32hex: cy,\n    base32hexupper: hy,\n    base32hexpad: uy,\n    base32hexpadupper: ly,\n    base32z: dy\n});\nconst py = Ss({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), gy = Ss({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar yy = Object.freeze({\n    __proto__: null,\n    base36: py,\n    base36upper: gy\n});\nconst my = Ss({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), by = Ss({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar wy = Object.freeze({\n    __proto__: null,\n    base58btc: my,\n    base58flickr: by\n});\nconst vy = lt({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), _y = lt({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), Ey = lt({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), Sy = lt({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar Iy = Object.freeze({\n    __proto__: null,\n    base64: vy,\n    base64pad: _y,\n    base64url: Ey,\n    base64urlpad: Sy\n});\nconst Xc = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), Dy = Xc.reduce((i, e, t)=>(i[t] = e, i), []), xy = Xc.reduce((i, e, t)=>(i[e.codePointAt(0)] = t, i), []);\nfunction Oy(i) {\n    return i.reduce((e, t)=>(e += Dy[t], e), \"\");\n}\nfunction Ny(i) {\n    const e = [];\n    for (const t of i){\n        const s = xy[t.codePointAt(0)];\n        if (s === void 0) throw new Error(`Non-base256emoji character: ${t}`);\n        e.push(s);\n    }\n    return new Uint8Array(e);\n}\nconst Py = lr({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: Oy,\n    decode: Ny\n});\nvar Ry = Object.freeze({\n    __proto__: null,\n    base256emoji: Py\n}), Cy = Zc, Go = 128, Ay = 127, Ty = ~Ay, $y = Math.pow(2, 31);\nfunction Zc(i, e, t) {\n    e = e || [], t = t || 0;\n    for(var s = t; i >= $y;)e[t++] = i & 255 | Go, i /= 128;\n    for(; i & Ty;)e[t++] = i & 255 | Go, i >>>= 7;\n    return e[t] = i | 0, Zc.bytes = t - s + 1, e;\n}\nvar Fy = Wr, Uy = 128, Wo = 127;\nfunction Wr(i, s) {\n    var t = 0, s = s || 0, r = 0, n = s, o, c = i.length;\n    do {\n        if (n >= c) throw Wr.bytes = 0, new RangeError(\"Could not decode varint\");\n        o = i[n++], t += r < 28 ? (o & Wo) << r : (o & Wo) * Math.pow(2, r), r += 7;\n    }while (o >= Uy);\n    return Wr.bytes = n - s, t;\n}\nvar Ly = Math.pow(2, 7), My = Math.pow(2, 14), qy = Math.pow(2, 21), jy = Math.pow(2, 28), zy = Math.pow(2, 35), Ky = Math.pow(2, 42), Vy = Math.pow(2, 49), By = Math.pow(2, 56), ky = Math.pow(2, 63), Hy = function(i) {\n    return i < Ly ? 1 : i < My ? 2 : i < qy ? 3 : i < jy ? 4 : i < zy ? 5 : i < Ky ? 6 : i < Vy ? 7 : i < By ? 8 : i < ky ? 9 : 10;\n}, Gy = {\n    encode: Cy,\n    decode: Fy,\n    encodingLength: Hy\n}, eh = Gy;\nconst Yo = (i, e, t = 0)=>(eh.encode(i, e, t), e), Jo = (i)=>eh.encodingLength(i), Yr = (i, e)=>{\n    const t = e.byteLength, s = Jo(i), r = s + Jo(t), n = new Uint8Array(r + t);\n    return Yo(i, n, 0), Yo(t, n, s), n.set(e, r), new Wy(i, t, e, n);\n};\nlet Wy = class {\n    constructor(e, t, s, r){\n        this.code = e, this.size = t, this.digest = s, this.bytes = r;\n    }\n};\nconst th = ({ name: i, code: e, encode: t })=>new Yy(i, e, t);\nlet Yy = class {\n    constructor(e, t, s){\n        this.name = e, this.code = t, this.encode = s;\n    }\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const t = this.encode(e);\n            return t instanceof Uint8Array ? Yr(this.code, t) : t.then((s)=>Yr(this.code, s));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n};\nconst ih = (i)=>async (e)=>new Uint8Array(await crypto.subtle.digest(i, e)), Jy = th({\n    name: \"sha2-256\",\n    code: 18,\n    encode: ih(\"SHA-256\")\n}), Qy = th({\n    name: \"sha2-512\",\n    code: 19,\n    encode: ih(\"SHA-512\")\n});\nvar Xy = Object.freeze({\n    __proto__: null,\n    sha256: Jy,\n    sha512: Qy\n});\nconst sh = 0, Zy = \"identity\", rh = Jc, e1 = (i)=>Yr(sh, rh(i)), t1 = {\n    code: sh,\n    name: Zy,\n    encode: rh,\n    digest: e1\n};\nvar i1 = Object.freeze({\n    __proto__: null,\n    identity: t1\n});\nnew TextEncoder(), new TextDecoder();\nconst Qo = {\n    ...Wg,\n    ...Jg,\n    ...Xg,\n    ...ey,\n    ...sy,\n    ...fy,\n    ...yy,\n    ...wy,\n    ...Iy,\n    ...Ry\n};\n({\n    ...Xy,\n    ...i1\n});\nfunction nh(i) {\n    return globalThis.Buffer != null ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : i;\n}\nfunction s1(i = 0) {\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? nh(globalThis.Buffer.allocUnsafe(i)) : new Uint8Array(i);\n}\nfunction oh(i, e, t, s) {\n    return {\n        name: i,\n        prefix: e,\n        encoder: {\n            name: i,\n            prefix: e,\n            encode: t\n        },\n        decoder: {\n            decode: s\n        }\n    };\n}\nconst Xo = oh(\"utf8\", \"u\", (i)=>\"u\" + new TextDecoder(\"utf8\").decode(i), (i)=>new TextEncoder().encode(i.substring(1))), Or = oh(\"ascii\", \"a\", (i)=>{\n    let e = \"a\";\n    for(let t = 0; t < i.length; t++)e += String.fromCharCode(i[t]);\n    return e;\n}, (i)=>{\n    i = i.substring(1);\n    const e = s1(i.length);\n    for(let t = 0; t < i.length; t++)e[t] = i.charCodeAt(t);\n    return e;\n}), r1 = {\n    utf8: Xo,\n    \"utf-8\": Xo,\n    hex: Qo.base16,\n    latin1: Or,\n    ascii: Or,\n    binary: Or,\n    ...Qo\n};\nfunction n1(i, e = \"utf8\") {\n    const t = r1[e];\n    if (!t) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? nh(globalThis.Buffer.from(i, \"utf-8\")) : t.decoder.decode(`${t.prefix}${i}`);\n}\nconst ah = \"wc\", o1 = 2, En = \"core\", hi = `${ah}@2:${En}:`, a1 = {\n    name: En,\n    logger: \"error\"\n}, c1 = {\n    database: \":memory:\"\n}, h1 = \"crypto\", Zo = \"client_ed25519_seed\", u1 = V.ONE_DAY, l1 = \"keychain\", d1 = \"0.3\", f1 = \"messages\", p1 = \"0.3\", g1 = V.SIX_HOURS, y1 = \"publisher\", ch = \"irn\", m1 = \"error\", hh = \"wss://relay.walletconnect.com\", ea = \"wss://relay.walletconnect.org\", b1 = \"relayer\", gt = {\n    message: \"relayer_message\",\n    message_ack: \"relayer_message_ack\",\n    connect: \"relayer_connect\",\n    disconnect: \"relayer_disconnect\",\n    error: \"relayer_error\",\n    connection_stalled: \"relayer_connection_stalled\",\n    transport_closed: \"relayer_transport_closed\",\n    publish: \"relayer_publish\"\n}, w1 = \"_subscription\", Zt = {\n    payload: \"payload\",\n    connect: \"connect\",\n    disconnect: \"disconnect\",\n    error: \"error\"\n}, v1 = V.ONE_SECOND, _1 = \"2.10.1\", E1 = 1e4, S1 = \"0.3\", I1 = \"WALLETCONNECT_CLIENT_ID\", Vt = {\n    created: \"subscription_created\",\n    deleted: \"subscription_deleted\",\n    expired: \"subscription_expired\",\n    disabled: \"subscription_disabled\",\n    sync: \"subscription_sync\",\n    resubscribed: \"subscription_resubscribed\"\n}, D1 = \"subscription\", x1 = \"0.3\", O1 = V.FIVE_SECONDS * 1e3, N1 = \"pairing\", P1 = \"0.3\", Xi = {\n    wc_pairingDelete: {\n        req: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1e3\n        },\n        res: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1001\n        }\n    },\n    wc_pairingPing: {\n        req: {\n            ttl: V.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1002\n        },\n        res: {\n            ttl: V.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1003\n        }\n    },\n    unregistered_method: {\n        req: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        },\n        res: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        }\n    }\n}, os = {\n    create: \"pairing_create\",\n    expire: \"pairing_expire\",\n    delete: \"pairing_delete\",\n    ping: \"pairing_ping\"\n}, zt = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, R1 = \"history\", C1 = \"0.3\", A1 = \"expirer\", Tt = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n}, T1 = \"0.3\", Nr = \"verify-api\", Ks = \"https://verify.walletconnect.com\", ta = \"https://verify.walletconnect.org\";\nlet $1 = class {\n    constructor(e, t){\n        this.core = e, this.logger = t, this.keychain = /* @__PURE__ */ new Map(), this.name = l1, this.version = d1, this.initialized = !1, this.storagePrefix = hi, this.init = async ()=>{\n            if (!this.initialized) {\n                const s = await this.getKeyChain();\n                typeof s < \"u\" && (this.keychain = s), this.initialized = !0;\n            }\n        }, this.has = (s)=>(this.isInitialized(), this.keychain.has(s)), this.set = async (s, r)=>{\n            this.isInitialized(), this.keychain.set(s, r), await this.persist();\n        }, this.get = (s)=>{\n            this.isInitialized();\n            const r = this.keychain.get(s);\n            if (typeof r > \"u\") {\n                const { message: n } = Y(\"NO_MATCHING_KEY\", `${this.name}: ${s}`);\n                throw new Error(n);\n            }\n            return r;\n        }, this.del = async (s)=>{\n            this.isInitialized(), this.keychain.delete(s), await this.persist();\n        }, this.core = e, this.logger = ee.generateChildLogger(t, this.name);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    async setKeyChain(e) {\n        await this.core.storage.setItem(this.storageKey, Lc(e));\n    }\n    async getKeyChain() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? Mc(e) : void 0;\n    }\n    async persist() {\n        await this.setKeyChain(this.keychain);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}, F1 = class {\n    constructor(e, t, s){\n        this.core = e, this.logger = t, this.name = h1, this.initialized = !1, this.init = async ()=>{\n            this.initialized || (await this.keychain.init(), this.initialized = !0);\n        }, this.hasKeys = (r)=>(this.isInitialized(), this.keychain.has(r)), this.getClientId = async ()=>{\n            this.isInitialized();\n            const r = await this.getClientSeed(), n = Ws(r);\n            return an(n.publicKey);\n        }, this.generateKeyPair = ()=>{\n            this.isInitialized();\n            const r = tp();\n            return this.setPrivateKey(r.publicKey, r.privateKey);\n        }, this.signJWT = async (r)=>{\n            this.isInitialized();\n            const n = await this.getClientSeed(), o = Ws(n), c = Hr();\n            return await Ic(c, r, u1, o);\n        }, this.generateSharedKey = (r, n, o)=>{\n            this.isInitialized();\n            const c = this.getPrivateKey(r), u = ip(c, n);\n            return this.setSymKey(u, o);\n        }, this.setSymKey = async (r, n)=>{\n            this.isInitialized();\n            const o = n || sp(r);\n            return await this.keychain.set(o, r), o;\n        }, this.deleteKeyPair = async (r)=>{\n            this.isInitialized(), await this.keychain.del(r);\n        }, this.deleteSymKey = async (r)=>{\n            this.isInitialized(), await this.keychain.del(r);\n        }, this.encode = async (r, n, o)=>{\n            this.isInitialized();\n            const c = Uc(o), u = rr(n);\n            if (Ro(c)) {\n                const x = c.senderPublicKey, O = c.receiverPublicKey;\n                r = await this.generateSharedKey(x, O);\n            }\n            const d = this.getSymKey(r), { type: p, senderPublicKey: b } = c;\n            return np({\n                type: p,\n                symKey: d,\n                message: u,\n                senderPublicKey: b\n            });\n        }, this.decode = async (r, n, o)=>{\n            this.isInitialized();\n            const c = cp(n, o);\n            if (Ro(c)) {\n                const u = c.receiverPublicKey, d = c.senderPublicKey;\n                r = await this.generateSharedKey(u, d);\n            }\n            try {\n                const u = this.getSymKey(r), d = op({\n                    symKey: u,\n                    encoded: n\n                });\n                return rn(d);\n            } catch (u) {\n                this.logger.error(`Failed to decode message from topic: '${r}', clientId: '${await this.getClientId()}'`), this.logger.error(u);\n            }\n        }, this.getPayloadType = (r)=>{\n            const n = Ys(r);\n            return ws(n.type);\n        }, this.getPayloadSenderPublicKey = (r)=>{\n            const n = Ys(r);\n            return n.senderPublicKey ? Ne(n.senderPublicKey, vt) : void 0;\n        }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.keychain = s || new $1(this.core, this.logger);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    async setPrivateKey(e, t) {\n        return await this.keychain.set(e, t), e;\n    }\n    getPrivateKey(e) {\n        return this.keychain.get(e);\n    }\n    async getClientSeed() {\n        let e = \"\";\n        try {\n            e = this.keychain.get(Zo);\n        } catch  {\n            e = Hr(), await this.keychain.set(Zo, e);\n        }\n        return n1(e, \"base16\");\n    }\n    getSymKey(e) {\n        return this.keychain.get(e);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}, U1 = class extends gl {\n    constructor(e, t){\n        super(e, t), this.logger = e, this.core = t, this.messages = /* @__PURE__ */ new Map(), this.name = f1, this.version = p1, this.initialized = !1, this.storagePrefix = hi, this.init = async ()=>{\n            if (!this.initialized) {\n                this.logger.trace(\"Initialized\");\n                try {\n                    const s = await this.getRelayerMessages();\n                    typeof s < \"u\" && (this.messages = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                        type: \"method\",\n                        method: \"restore\",\n                        size: this.messages.size\n                    });\n                } catch (s) {\n                    this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s);\n                } finally{\n                    this.initialized = !0;\n                }\n            }\n        }, this.set = async (s, r)=>{\n            this.isInitialized();\n            const n = Fi(r);\n            let o = this.messages.get(s);\n            return typeof o > \"u\" && (o = {}), typeof o[n] < \"u\" || (o[n] = r, this.messages.set(s, o), await this.persist()), n;\n        }, this.get = (s)=>{\n            this.isInitialized();\n            let r = this.messages.get(s);\n            return typeof r > \"u\" && (r = {}), r;\n        }, this.has = (s, r)=>{\n            this.isInitialized();\n            const n = this.get(s), o = Fi(r);\n            return typeof n[o] < \"u\";\n        }, this.del = async (s)=>{\n            this.isInitialized(), this.messages.delete(s), await this.persist();\n        }, this.logger = ee.generateChildLogger(e, this.name), this.core = t;\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    async setRelayerMessages(e) {\n        await this.core.storage.setItem(this.storageKey, Lc(e));\n    }\n    async getRelayerMessages() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? Mc(e) : void 0;\n    }\n    async persist() {\n        await this.setRelayerMessages(this.messages);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}, L1 = class extends yl {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.events = new We.EventEmitter(), this.name = y1, this.queue = /* @__PURE__ */ new Map(), this.publishTimeout = V.toMiliseconds(V.TEN_SECONDS), this.needsTransportRestart = !1, this.publish = async (s, r, n)=>{\n            var o;\n            this.logger.debug(\"Publishing Payload\"), this.logger.trace({\n                type: \"method\",\n                method: \"publish\",\n                params: {\n                    topic: s,\n                    message: r,\n                    opts: n\n                }\n            });\n            try {\n                const c = n?.ttl || g1, u = Gr(n), d = n?.prompt || !1, p = n?.tag || 0, b = n?.id || vn().toString(), x = {\n                    topic: s,\n                    message: r,\n                    opts: {\n                        ttl: c,\n                        relay: u,\n                        prompt: d,\n                        tag: p,\n                        id: b\n                    }\n                }, O = setTimeout(()=>this.queue.set(b, x), this.publishTimeout);\n                try {\n                    await await ds(this.rpcPublish(s, r, c, u, d, p, b), this.publishTimeout, \"Failed to publish payload, please try again.\"), this.removeRequestFromQueue(b), this.relayer.events.emit(gt.publish, x);\n                } catch (_) {\n                    if (this.logger.debug(\"Publishing Payload stalled\"), this.needsTransportRestart = !0, (o = n?.internal) != null && o.throwOnFailedPublish) throw this.removeRequestFromQueue(b), _;\n                    return;\n                } finally{\n                    clearTimeout(O);\n                }\n                this.logger.debug(\"Successfully Published Payload\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"publish\",\n                    params: {\n                        topic: s,\n                        message: r,\n                        opts: n\n                    }\n                });\n            } catch (c) {\n                throw this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(c), c;\n            }\n        }, this.on = (s, r)=>{\n            this.events.on(s, r);\n        }, this.once = (s, r)=>{\n            this.events.once(s, r);\n        }, this.off = (s, r)=>{\n            this.events.off(s, r);\n        }, this.removeListener = (s, r)=>{\n            this.events.removeListener(s, r);\n        }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.registerEventListeners();\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    rpcPublish(e, t, s, r, n, o, c) {\n        var u, d, p, b;\n        const x = {\n            method: js(r.protocol).publish,\n            params: {\n                topic: e,\n                message: t,\n                ttl: s,\n                prompt: n,\n                tag: o\n            },\n            id: c\n        };\n        return bt((u = x.params) == null ? void 0 : u.prompt) && ((d = x.params) == null || delete d.prompt), bt((p = x.params) == null ? void 0 : p.tag) && ((b = x.params) == null || delete b.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"message\",\n            direction: \"outgoing\",\n            request: x\n        }), this.relayer.request(x);\n    }\n    removeRequestFromQueue(e) {\n        this.queue.delete(e);\n    }\n    checkQueue() {\n        this.queue.forEach(async (e)=>{\n            const { topic: t, message: s, opts: r } = e;\n            await this.publish(t, s, r);\n        });\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, ()=>{\n            if (this.needsTransportRestart) {\n                this.needsTransportRestart = !1, this.relayer.events.emit(gt.connection_stalled);\n                return;\n            }\n            this.checkQueue();\n        }), this.relayer.on(gt.message_ack, (e)=>{\n            this.removeRequestFromQueue(e.id.toString());\n        });\n    }\n}, M1 = class {\n    constructor(){\n        this.map = /* @__PURE__ */ new Map(), this.set = (e, t)=>{\n            const s = this.get(e);\n            this.exists(e, t) || this.map.set(e, [\n                ...s,\n                t\n            ]);\n        }, this.get = (e)=>this.map.get(e) || [], this.exists = (e, t)=>this.get(e).includes(t), this.delete = (e, t)=>{\n            if (typeof t > \"u\") {\n                this.map.delete(e);\n                return;\n            }\n            if (!this.map.has(e)) return;\n            const s = this.get(e);\n            if (!this.exists(e, t)) return;\n            const r = s.filter((n)=>n !== t);\n            if (!r.length) {\n                this.map.delete(e);\n                return;\n            }\n            this.map.set(e, r);\n        }, this.clear = ()=>{\n            this.map.clear();\n        };\n    }\n    get topics() {\n        return Array.from(this.map.keys());\n    }\n};\nvar q1 = Object.defineProperty, j1 = Object.defineProperties, z1 = Object.getOwnPropertyDescriptors, ia = Object.getOwnPropertySymbols, K1 = Object.prototype.hasOwnProperty, V1 = Object.prototype.propertyIsEnumerable, sa = (i, e, t)=>e in i ? q1(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, Zi = (i, e)=>{\n    for(var t in e || (e = {}))K1.call(e, t) && sa(i, t, e[t]);\n    if (ia) for (var t of ia(e))V1.call(e, t) && sa(i, t, e[t]);\n    return i;\n}, Pr = (i, e)=>j1(i, z1(e));\nlet B1 = class extends wl {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.subscriptions = /* @__PURE__ */ new Map(), this.topicMap = new M1(), this.events = new We.EventEmitter(), this.name = D1, this.version = x1, this.pending = /* @__PURE__ */ new Map(), this.cached = [], this.initialized = !1, this.pendingSubscriptionWatchLabel = \"pending_sub_watch_label\", this.pollingInterval = 20, this.storagePrefix = hi, this.subscribeTimeout = 1e4, this.restartInProgress = !1, this.batchSubscribeTopicsLimit = 500, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), this.registerEventListeners(), this.clientId = await this.relayer.core.crypto.getClientId());\n        }, this.subscribe = async (s, r)=>{\n            await this.restartToComplete(), this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"subscribe\",\n                params: {\n                    topic: s,\n                    opts: r\n                }\n            });\n            try {\n                const n = Gr(r), o = {\n                    topic: s,\n                    relay: n\n                };\n                this.pending.set(s, o);\n                const c = await this.rpcSubscribe(s, n);\n                return this.onSubscribe(c, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"subscribe\",\n                    params: {\n                        topic: s,\n                        opts: r\n                    }\n                }), c;\n            } catch (n) {\n                throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(n), n;\n            }\n        }, this.unsubscribe = async (s, r)=>{\n            await this.restartToComplete(), this.isInitialized(), typeof r?.id < \"u\" ? await this.unsubscribeById(s, r.id, r) : await this.unsubscribeByTopic(s, r);\n        }, this.isSubscribed = async (s)=>this.topics.includes(s) ? !0 : await new Promise((r, n)=>{\n                const o = new V.Watch();\n                o.start(this.pendingSubscriptionWatchLabel);\n                const c = setInterval(()=>{\n                    !this.pending.has(s) && this.topics.includes(s) && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), r(!0)), o.elapsed(this.pendingSubscriptionWatchLabel) >= O1 && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), n(new Error(\"Subscription resolution timeout\")));\n                }, this.pollingInterval);\n            }).catch(()=>!1), this.on = (s, r)=>{\n            this.events.on(s, r);\n        }, this.once = (s, r)=>{\n            this.events.once(s, r);\n        }, this.off = (s, r)=>{\n            this.events.off(s, r);\n        }, this.removeListener = (s, r)=>{\n            this.events.removeListener(s, r);\n        }, this.restart = async ()=>{\n            this.restartInProgress = !0, await this.restore(), await this.reset(), this.restartInProgress = !1;\n        }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.clientId = \"\";\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    get length() {\n        return this.subscriptions.size;\n    }\n    get ids() {\n        return Array.from(this.subscriptions.keys());\n    }\n    get values() {\n        return Array.from(this.subscriptions.values());\n    }\n    get topics() {\n        return this.topicMap.topics;\n    }\n    hasSubscription(e, t) {\n        let s = !1;\n        try {\n            s = this.getSubscription(e).topic === t;\n        } catch  {}\n        return s;\n    }\n    onEnable() {\n        this.cached = [], this.initialized = !0;\n    }\n    onDisable() {\n        this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n    }\n    async unsubscribeByTopic(e, t) {\n        const s = this.topicMap.get(e);\n        await Promise.all(s.map(async (r)=>await this.unsubscribeById(e, r, t)));\n    }\n    async unsubscribeById(e, t, s) {\n        this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({\n            type: \"method\",\n            method: \"unsubscribe\",\n            params: {\n                topic: e,\n                id: t,\n                opts: s\n            }\n        });\n        try {\n            const r = Gr(s);\n            await this.rpcUnsubscribe(e, t, r);\n            const n = nt(\"USER_DISCONNECTED\", `${this.name}, ${e}`);\n            await this.onUnsubscribe(e, t, n), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"unsubscribe\",\n                params: {\n                    topic: e,\n                    id: t,\n                    opts: s\n                }\n            });\n        } catch (r) {\n            throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(r), r;\n        }\n    }\n    async rpcSubscribe(e, t) {\n        const s = {\n            method: js(t.protocol).subscribe,\n            params: {\n                topic: e\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        });\n        try {\n            await await ds(this.relayer.request(s), this.subscribeTimeout);\n        } catch  {\n            this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(gt.connection_stalled);\n        }\n        return Fi(e + this.clientId);\n    }\n    async rpcBatchSubscribe(e) {\n        if (!e.length) return;\n        const t = e[0].relay, s = {\n            method: js(t.protocol).batchSubscribe,\n            params: {\n                topics: e.map((r)=>r.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        });\n        try {\n            return await await ds(this.relayer.request(s), this.subscribeTimeout);\n        } catch  {\n            this.logger.debug(\"Outgoing Relay Payload stalled\"), this.relayer.events.emit(gt.connection_stalled);\n        }\n    }\n    rpcUnsubscribe(e, t, s) {\n        const r = {\n            method: js(s.protocol).unsubscribe,\n            params: {\n                topic: e,\n                id: t\n            }\n        };\n        return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: r\n        }), this.relayer.request(r);\n    }\n    onSubscribe(e, t) {\n        this.setSubscription(e, Pr(Zi({}, t), {\n            id: e\n        })), this.pending.delete(t.topic);\n    }\n    onBatchSubscribe(e) {\n        e.length && e.forEach((t)=>{\n            this.setSubscription(t.id, Zi({}, t)), this.pending.delete(t.topic);\n        });\n    }\n    async onUnsubscribe(e, t, s) {\n        this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, s), await this.relayer.messages.del(e);\n    }\n    async setRelayerSubscriptions(e) {\n        await this.relayer.core.storage.setItem(this.storageKey, e);\n    }\n    async getRelayerSubscriptions() {\n        return await this.relayer.core.storage.getItem(this.storageKey);\n    }\n    setSubscription(e, t) {\n        this.subscriptions.has(e) || (this.logger.debug(\"Setting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"setSubscription\",\n            id: e,\n            subscription: t\n        }), this.addSubscription(e, t));\n    }\n    addSubscription(e, t) {\n        this.subscriptions.set(e, Zi({}, t)), this.topicMap.set(t.topic, e), this.events.emit(Vt.created, t);\n    }\n    getSubscription(e) {\n        this.logger.debug(\"Getting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"getSubscription\",\n            id: e\n        });\n        const t = this.subscriptions.get(e);\n        if (!t) {\n            const { message: s } = Y(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(s);\n        }\n        return t;\n    }\n    deleteSubscription(e, t) {\n        this.logger.debug(\"Deleting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"deleteSubscription\",\n            id: e,\n            reason: t\n        });\n        const s = this.getSubscription(e);\n        this.subscriptions.delete(e), this.topicMap.delete(s.topic, e), this.events.emit(Vt.deleted, Pr(Zi({}, s), {\n            reason: t\n        }));\n    }\n    async persist() {\n        await this.setRelayerSubscriptions(this.values), this.events.emit(Vt.sync);\n    }\n    async reset() {\n        if (this.cached.length) {\n            const e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n            for(let t = 0; t < e; t++){\n                const s = this.cached.splice(0, this.batchSubscribeTopicsLimit);\n                await this.batchSubscribe(s);\n            }\n        }\n        this.events.emit(Vt.resubscribed);\n    }\n    async restore() {\n        try {\n            const e = await this.getRelayerSubscriptions();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.subscriptions.size) {\n                const { message: t } = Y(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                subscriptions: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);\n        }\n    }\n    async batchSubscribe(e) {\n        if (!e.length) return;\n        const t = await this.rpcBatchSubscribe(e);\n        Es(t) && this.onBatchSubscribe(t.map((s, r)=>Pr(Zi({}, e[r]), {\n                id: s\n            })));\n    }\n    async onConnect() {\n        this.restartInProgress || (await this.restart(), this.onEnable());\n    }\n    onDisconnect() {\n        this.onDisable();\n    }\n    async checkPending() {\n        if (!this.initialized || this.relayer.transportExplicitlyClosed) return;\n        const e = [];\n        this.pending.forEach((t)=>{\n            e.push(t);\n        }), await this.batchSubscribe(e);\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, async ()=>{\n            await this.checkPending();\n        }), this.relayer.on(gt.connect, async ()=>{\n            await this.onConnect();\n        }), this.relayer.on(gt.disconnect, ()=>{\n            this.onDisconnect();\n        }), this.events.on(Vt.created, async (e)=>{\n            const t = Vt.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        }), this.events.on(Vt.deleted, async (e)=>{\n            const t = Vt.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async restartToComplete() {\n        this.restartInProgress && await new Promise((e)=>{\n            const t = setInterval(()=>{\n                this.restartInProgress || (clearInterval(t), e());\n            }, this.pollingInterval);\n        });\n    }\n};\nvar k1 = Object.defineProperty, ra = Object.getOwnPropertySymbols, H1 = Object.prototype.hasOwnProperty, G1 = Object.prototype.propertyIsEnumerable, na = (i, e, t)=>e in i ? k1(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, W1 = (i, e)=>{\n    for(var t in e || (e = {}))H1.call(e, t) && na(i, t, e[t]);\n    if (ra) for (var t of ra(e))G1.call(e, t) && na(i, t, e[t]);\n    return i;\n};\nlet Y1 = class extends ml {\n    constructor(e){\n        super(e), this.protocol = \"wc\", this.version = 2, this.events = new We.EventEmitter(), this.name = b1, this.transportExplicitlyClosed = !1, this.initialized = !1, this.connectionAttemptInProgress = !1, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = [\n            \"socket hang up\",\n            \"socket stalled\"\n        ], this.hasExperiencedNetworkDisruption = !1, this.request = async (t)=>{\n            this.logger.debug(\"Publishing Request Payload\");\n            try {\n                return await this.toEstablishConnection(), await this.provider.request(t);\n            } catch (s) {\n                throw this.logger.debug(\"Failed to Publish Request\"), this.logger.error(s), s;\n            }\n        }, this.onPayloadHandler = (t)=>{\n            this.onProviderPayload(t);\n        }, this.onConnectHandler = ()=>{\n            this.events.emit(gt.connect);\n        }, this.onDisconnectHandler = ()=>{\n            this.onProviderDisconnect();\n        }, this.onProviderErrorHandler = (t)=>{\n            this.logger.error(t), this.events.emit(gt.error, t), this.logger.info(\"Fatal socket error received, closing transport\"), this.transportClose();\n        }, this.registerProviderListeners = ()=>{\n            this.provider.on(Zt.payload, this.onPayloadHandler), this.provider.on(Zt.connect, this.onConnectHandler), this.provider.on(Zt.disconnect, this.onDisconnectHandler), this.provider.on(Zt.error, this.onProviderErrorHandler);\n        }, this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? ee.generateChildLogger(e.logger, this.name) : ee.pino(ee.getDefaultLoggerOptions({\n            level: e.logger || m1\n        })), this.messages = new U1(this.logger, e.core), this.subscriber = new B1(this, this.logger), this.publisher = new L1(this, this.logger), this.relayUrl = e?.relayUrl || hh, this.projectId = e.projectId, this.provider = {};\n    }\n    async init() {\n        this.logger.trace(\"Initialized\"), this.registerEventListeners(), await this.createProvider(), await Promise.all([\n            this.messages.init(),\n            this.subscriber.init()\n        ]);\n        try {\n            await this.transportOpen();\n        } catch  {\n            this.logger.warn(`Connection via ${this.relayUrl} failed, attempting to connect via failover domain ${ea}...`), await this.restartTransport(ea);\n        }\n        this.initialized = !0, setTimeout(async ()=>{\n            this.subscriber.topics.length === 0 && (this.logger.info(\"No topics subscribed to after init, closing transport\"), await this.transportClose(), this.transportExplicitlyClosed = !1);\n        }, E1);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get connected() {\n        return this.provider.connection.connected;\n    }\n    get connecting() {\n        return this.provider.connection.connecting;\n    }\n    async publish(e, t, s) {\n        this.isInitialized(), await this.publisher.publish(e, t, s), await this.recordMessageEvent({\n            topic: e,\n            message: t,\n            publishedAt: Date.now()\n        });\n    }\n    async subscribe(e, t) {\n        var s;\n        this.isInitialized();\n        let r = ((s = this.subscriber.topicMap.get(e)) == null ? void 0 : s[0]) || \"\";\n        return r || (await Promise.all([\n            new Promise((n)=>{\n                this.subscriber.once(Vt.created, (o)=>{\n                    o.topic === e && n();\n                });\n            }),\n            new Promise(async (n)=>{\n                r = await this.subscriber.subscribe(e, t), n();\n            })\n        ]), r);\n    }\n    async unsubscribe(e, t) {\n        this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async transportClose() {\n        this.transportExplicitlyClosed = !0, this.hasExperiencedNetworkDisruption && this.connected ? await ds(this.provider.disconnect(), 1e3, \"provider.disconnect()\").catch(()=>this.onProviderDisconnect()) : this.connected && await this.provider.disconnect();\n    }\n    async transportOpen(e) {\n        if (this.transportExplicitlyClosed = !1, await this.confirmOnlineStateOrThrow(), !this.connectionAttemptInProgress) {\n            e && e !== this.relayUrl && (this.relayUrl = e, await this.transportClose(), await this.createProvider()), this.connectionAttemptInProgress = !0;\n            try {\n                await Promise.all([\n                    new Promise((t)=>{\n                        if (!this.initialized) return t();\n                        this.subscriber.once(Vt.resubscribed, ()=>{\n                            t();\n                        });\n                    }),\n                    new Promise(async (t, s)=>{\n                        try {\n                            await ds(this.provider.connect(), 1e4, `Socket stalled when trying to connect to ${this.relayUrl}`);\n                        } catch (r) {\n                            s(r);\n                            return;\n                        }\n                        t();\n                    })\n                ]);\n            } catch (t) {\n                this.logger.error(t);\n                const s = t;\n                if (!this.isConnectionStalled(s.message)) throw t;\n                this.provider.events.emit(Zt.disconnect);\n            } finally{\n                this.connectionAttemptInProgress = !1, this.hasExperiencedNetworkDisruption = !1;\n            }\n        }\n    }\n    async restartTransport(e) {\n        await this.confirmOnlineStateOrThrow(), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.transportClose(), await this.createProvider(), await this.transportOpen());\n    }\n    async confirmOnlineStateOrThrow() {\n        if (!await jo()) throw new Error(\"No internet connection detected. Please restart your network and try again.\");\n    }\n    isConnectionStalled(e) {\n        return this.staleConnectionErrors.some((t)=>e.includes(t));\n    }\n    async createProvider() {\n        this.provider.connection && this.unregisterProviderListeners();\n        const e = await this.core.crypto.signJWT(this.relayUrl);\n        this.provider = new _n(new Wc(wp({\n            sdkVersion: _1,\n            protocol: this.protocol,\n            version: this.version,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId,\n            auth: e,\n            useOnCloseEvent: !0\n        }))), this.registerProviderListeners();\n    }\n    async recordMessageEvent(e) {\n        const { topic: t, message: s } = e;\n        await this.messages.set(t, s);\n    }\n    async shouldIgnoreMessageEvent(e) {\n        const { topic: t, message: s } = e;\n        if (!s || s.length === 0) return this.logger.debug(`Ignoring invalid/empty message: ${s}`), !0;\n        if (!await this.subscriber.isSubscribed(t)) return this.logger.debug(`Ignoring message for non-subscribed topic ${t}`), !0;\n        const r = this.messages.has(t, s);\n        return r && this.logger.debug(`Ignoring duplicate message: ${s}`), r;\n    }\n    async onProviderPayload(e) {\n        if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"incoming\",\n            payload: e\n        }), ji(e)) {\n            if (!e.method.endsWith(w1)) return;\n            const t = e.params, { topic: s, message: r, publishedAt: n } = t.data, o = {\n                topic: s,\n                message: r,\n                publishedAt: n\n            };\n            this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(W1({\n                type: \"event\",\n                event: t.id\n            }, o)), this.events.emit(t.id, o), await this.acknowledgePayload(e), await this.onMessageEvent(o);\n        } else Oi(e) && this.events.emit(gt.message_ack, e);\n    }\n    async onMessageEvent(e) {\n        await this.shouldIgnoreMessageEvent(e) || (this.events.emit(gt.message, e), await this.recordMessageEvent(e));\n    }\n    async acknowledgePayload(e) {\n        const t = xi(e.id, !0);\n        await this.provider.connection.send(t);\n    }\n    unregisterProviderListeners() {\n        this.provider.off(Zt.payload, this.onPayloadHandler), this.provider.off(Zt.connect, this.onConnectHandler), this.provider.off(Zt.disconnect, this.onDisconnectHandler), this.provider.off(Zt.error, this.onProviderErrorHandler);\n    }\n    async registerEventListeners() {\n        this.events.on(gt.connection_stalled, ()=>{\n            this.restartTransport().catch((t)=>this.logger.error(t));\n        });\n        let e = await jo();\n        lg(async (t)=>{\n            this.initialized && e !== t && (e = t, t ? await this.restartTransport().catch((s)=>this.logger.error(s)) : (this.hasExperiencedNetworkDisruption = !0, await this.transportClose().catch((s)=>this.logger.error(s))));\n        });\n    }\n    onProviderDisconnect() {\n        this.events.emit(gt.disconnect), this.attemptToReconnect();\n    }\n    attemptToReconnect() {\n        this.transportExplicitlyClosed || (this.logger.info(\"attemptToReconnect called. Connecting...\"), setTimeout(async ()=>{\n            await this.restartTransport().catch((e)=>this.logger.error(e));\n        }, V.toMiliseconds(v1)));\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async toEstablishConnection() {\n        if (await this.confirmOnlineStateOrThrow(), !this.connected) {\n            if (this.connectionAttemptInProgress) return await new Promise((e)=>{\n                const t = setInterval(()=>{\n                    this.connected && (clearInterval(t), e());\n                }, this.connectionStatusPollingInterval);\n            });\n            await this.restartTransport();\n        }\n    }\n};\nvar J1 = Object.defineProperty, oa = Object.getOwnPropertySymbols, Q1 = Object.prototype.hasOwnProperty, X1 = Object.prototype.propertyIsEnumerable, aa = (i, e, t)=>e in i ? J1(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, ca = (i, e)=>{\n    for(var t in e || (e = {}))Q1.call(e, t) && aa(i, t, e[t]);\n    if (oa) for (var t of oa(e))X1.call(e, t) && aa(i, t, e[t]);\n    return i;\n};\nlet dr = class extends bl {\n    constructor(e, t, s, r = hi, n = void 0){\n        super(e, t, s, r), this.core = e, this.logger = t, this.name = s, this.map = /* @__PURE__ */ new Map(), this.version = S1, this.cached = [], this.initialized = !1, this.storagePrefix = hi, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((o)=>{\n                this.getKey && o !== null && !bt(o) ? this.map.set(this.getKey(o), o) : Kp(o) ? this.map.set(o.id, o) : Vp(o) && this.map.set(o.topic, o);\n            }), this.cached = [], this.initialized = !0);\n        }, this.set = async (o, c)=>{\n            this.isInitialized(), this.map.has(o) ? await this.update(o, c) : (this.logger.debug(\"Setting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                key: o,\n                value: c\n            }), this.map.set(o, c), await this.persist());\n        }, this.get = (o)=>(this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                key: o\n            }), this.getData(o)), this.getAll = (o)=>(this.isInitialized(), o ? this.values.filter((c)=>Object.keys(o).every((u)=>Yc(c[u], o[u]))) : this.values), this.update = async (o, c)=>{\n            this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                key: o,\n                update: c\n            });\n            const u = ca(ca({}, this.getData(o)), c);\n            this.map.set(o, u), await this.persist();\n        }, this.delete = async (o, c)=>{\n            this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                key: o,\n                reason: c\n            }), this.map.delete(o), await this.persist());\n        }, this.logger = ee.generateChildLogger(t, this.name), this.storagePrefix = r, this.getKey = n;\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    get length() {\n        return this.map.size;\n    }\n    get keys() {\n        return Array.from(this.map.keys());\n    }\n    get values() {\n        return Array.from(this.map.values());\n    }\n    async setDataStore(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getDataStore() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getData(e) {\n        const t = this.map.get(e);\n        if (!t) {\n            const { message: s } = Y(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.error(s), new Error(s);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setDataStore(this.values);\n    }\n    async restore() {\n        try {\n            const e = await this.getDataStore();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.map.size) {\n                const { message: t } = Y(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                value: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}, Z1 = class {\n    constructor(e, t){\n        this.core = e, this.logger = t, this.name = N1, this.version = P1, this.events = new ir(), this.initialized = !1, this.storagePrefix = hi, this.ignoredPayloadTypes = [\n            Di\n        ], this.registeredMethods = [], this.init = async ()=>{\n            this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n        }, this.register = ({ methods: s })=>{\n            this.isInitialized(), this.registeredMethods = [\n                .../* @__PURE__ */ new Set([\n                    ...this.registeredMethods,\n                    ...s\n                ])\n            ];\n        }, this.create = async ()=>{\n            this.isInitialized();\n            const s = Hr(), r = await this.core.crypto.setSymKey(s), n = Mt(V.FIVE_MINUTES), o = {\n                protocol: ch\n            }, c = {\n                topic: r,\n                expiry: n,\n                relay: o,\n                active: !1\n            }, u = Ap({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: r,\n                symKey: s,\n                relay: o\n            });\n            return await this.pairings.set(r, c), await this.core.relayer.subscribe(r), this.core.expirer.set(r, n), {\n                topic: r,\n                uri: u\n            };\n        }, this.pair = async (s)=>{\n            this.isInitialized(), this.isValidPair(s);\n            const { topic: r, symKey: n, relay: o } = Pp(s.uri);\n            let c;\n            if (this.pairings.keys.includes(r) && (c = this.pairings.get(r), c.active)) throw new Error(`Pairing already exists: ${r}. Please try again with a new connection URI.`);\n            this.core.crypto.keychain.has(r) || (await this.core.crypto.setSymKey(n, r), await this.core.relayer.subscribe(r, {\n                relay: o\n            }));\n            const u = Mt(V.FIVE_MINUTES), d = {\n                topic: r,\n                relay: o,\n                expiry: u,\n                active: !1\n            };\n            return await this.pairings.set(r, d), this.core.expirer.set(r, u), s.activatePairing && await this.activate({\n                topic: r\n            }), this.events.emit(os.create, d), d;\n        }, this.activate = async ({ topic: s })=>{\n            this.isInitialized();\n            const r = Mt(V.THIRTY_DAYS);\n            await this.pairings.update(s, {\n                active: !0,\n                expiry: r\n            }), this.core.expirer.set(s, r);\n        }, this.ping = async (s)=>{\n            this.isInitialized(), await this.isValidPing(s);\n            const { topic: r } = s;\n            if (this.pairings.keys.includes(r)) {\n                const n = await this.sendRequest(r, \"wc_pairingPing\", {}), { done: o, resolve: c, reject: u } = Ai();\n                this.events.once(Be(\"pairing_ping\", n), ({ error: d })=>{\n                    d ? u(d) : c();\n                }), await o();\n            }\n        }, this.updateExpiry = async ({ topic: s, expiry: r })=>{\n            this.isInitialized(), await this.pairings.update(s, {\n                expiry: r\n            });\n        }, this.updateMetadata = async ({ topic: s, metadata: r })=>{\n            this.isInitialized(), await this.pairings.update(s, {\n                peerMetadata: r\n            });\n        }, this.getPairings = ()=>(this.isInitialized(), this.pairings.values), this.disconnect = async (s)=>{\n            this.isInitialized(), await this.isValidDisconnect(s);\n            const { topic: r } = s;\n            this.pairings.keys.includes(r) && (await this.sendRequest(r, \"wc_pairingDelete\", nt(\"USER_DISCONNECTED\")), await this.deletePairing(r));\n        }, this.sendRequest = async (s, r, n)=>{\n            const o = ti(r, n), c = await this.core.crypto.encode(s, o), u = Xi[r].req;\n            return this.core.history.set(s, o), this.core.relayer.publish(s, c, u), o.id;\n        }, this.sendResult = async (s, r, n)=>{\n            const o = xi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = Xi[u.request.method].res;\n            await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);\n        }, this.sendError = async (s, r, n)=>{\n            const o = qi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = Xi[u.request.method] ? Xi[u.request.method].res : Xi.unregistered_method.res;\n            await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);\n        }, this.deletePairing = async (s, r)=>{\n            await this.core.relayer.unsubscribe(s), await Promise.all([\n                this.pairings.delete(s, nt(\"USER_DISCONNECTED\")),\n                this.core.crypto.deleteSymKey(s),\n                r ? Promise.resolve() : this.core.expirer.del(s)\n            ]);\n        }, this.cleanup = async ()=>{\n            const s = this.pairings.getAll().filter((r)=>ai(r.expiry));\n            await Promise.all(s.map((r)=>this.deletePairing(r.topic)));\n        }, this.onRelayEventRequest = (s)=>{\n            const { topic: r, payload: n } = s;\n            switch(n.method){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingRequest(r, n);\n                case \"wc_pairingDelete\":\n                    return this.onPairingDeleteRequest(r, n);\n                default:\n                    return this.onUnknownRpcMethodRequest(r, n);\n            }\n        }, this.onRelayEventResponse = async (s)=>{\n            const { topic: r, payload: n } = s, o = (await this.core.history.get(r, n.id)).request.method;\n            switch(o){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingResponse(r, n);\n                default:\n                    return this.onUnknownRpcMethodResponse(o);\n            }\n        }, this.onPairingPingRequest = async (s, r)=>{\n            const { id: n } = r;\n            try {\n                this.isValidPing({\n                    topic: s\n                }), await this.sendResult(n, s, !0), this.events.emit(os.ping, {\n                    id: n,\n                    topic: s\n                });\n            } catch (o) {\n                await this.sendError(n, s, o), this.logger.error(o);\n            }\n        }, this.onPairingPingResponse = (s, r)=>{\n            const { id: n } = r;\n            setTimeout(()=>{\n                ht(r) ? this.events.emit(Be(\"pairing_ping\", n), {}) : Ge(r) && this.events.emit(Be(\"pairing_ping\", n), {\n                    error: r.error\n                });\n            }, 500);\n        }, this.onPairingDeleteRequest = async (s, r)=>{\n            const { id: n } = r;\n            try {\n                this.isValidDisconnect({\n                    topic: s\n                }), await this.deletePairing(s), this.events.emit(os.delete, {\n                    id: n,\n                    topic: s\n                });\n            } catch (o) {\n                await this.sendError(n, s, o), this.logger.error(o);\n            }\n        }, this.onUnknownRpcMethodRequest = async (s, r)=>{\n            const { id: n, method: o } = r;\n            try {\n                if (this.registeredMethods.includes(o)) return;\n                const c = nt(\"WC_METHOD_UNSUPPORTED\", o);\n                await this.sendError(n, s, c), this.logger.error(c);\n            } catch (c) {\n                await this.sendError(n, s, c), this.logger.error(c);\n            }\n        }, this.onUnknownRpcMethodResponse = (s)=>{\n            this.registeredMethods.includes(s) || this.logger.error(nt(\"WC_METHOD_UNSUPPORTED\", s));\n        }, this.isValidPair = (s)=>{\n            if (!St(s)) {\n                const { message: r } = Y(\"MISSING_OR_INVALID\", `pair() params: ${s}`);\n                throw new Error(r);\n            }\n            if (!zp(s.uri)) {\n                const { message: r } = Y(\"MISSING_OR_INVALID\", `pair() uri: ${s.uri}`);\n                throw new Error(r);\n            }\n        }, this.isValidPing = async (s)=>{\n            if (!St(s)) {\n                const { message: n } = Y(\"MISSING_OR_INVALID\", `ping() params: ${s}`);\n                throw new Error(n);\n            }\n            const { topic: r } = s;\n            await this.isValidPairingTopic(r);\n        }, this.isValidDisconnect = async (s)=>{\n            if (!St(s)) {\n                const { message: n } = Y(\"MISSING_OR_INVALID\", `disconnect() params: ${s}`);\n                throw new Error(n);\n            }\n            const { topic: r } = s;\n            await this.isValidPairingTopic(r);\n        }, this.isValidPairingTopic = async (s)=>{\n            if (!ot(s, !1)) {\n                const { message: r } = Y(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${s}`);\n                throw new Error(r);\n            }\n            if (!this.pairings.keys.includes(s)) {\n                const { message: r } = Y(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${s}`);\n                throw new Error(r);\n            }\n            if (ai(this.pairings.get(s).expiry)) {\n                await this.deletePairing(s);\n                const { message: r } = Y(\"EXPIRED\", `pairing topic: ${s}`);\n                throw new Error(r);\n            }\n        }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.pairings = new dr(this.core, this.logger, this.name, this.storagePrefix);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    registerRelayerEvents() {\n        this.core.relayer.on(gt.message, async (e)=>{\n            const { topic: t, message: s } = e;\n            if (!this.pairings.keys.includes(t) || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s))) return;\n            const r = await this.core.crypto.decode(t, s);\n            try {\n                ji(r) ? (this.core.history.set(t, r), this.onRelayEventRequest({\n                    topic: t,\n                    payload: r\n                })) : Oi(r) && (await this.core.history.resolve(r), await this.onRelayEventResponse({\n                    topic: t,\n                    payload: r\n                }), this.core.history.delete(t, r.id));\n            } catch (n) {\n                this.logger.error(n);\n            }\n        });\n    }\n    registerExpirerEvents() {\n        this.core.expirer.on(Tt.expired, async (e)=>{\n            const { topic: t } = jc(e.target);\n            t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(os.expire, {\n                topic: t\n            }));\n        });\n    }\n}, em = class extends pl {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = R1, this.version = C1, this.cached = [], this.initialized = !1, this.storagePrefix = hi, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s)=>this.records.set(s.id, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.set = (s, r, n)=>{\n            if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                topic: s,\n                request: r,\n                chainId: n\n            }), this.records.has(r.id)) return;\n            const o = {\n                id: r.id,\n                topic: s,\n                request: {\n                    method: r.method,\n                    params: r.params || null\n                },\n                chainId: n,\n                expiry: Mt(V.THIRTY_DAYS)\n            };\n            this.records.set(o.id, o), this.events.emit(zt.created, o);\n        }, this.resolve = async (s)=>{\n            if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                response: s\n            }), !this.records.has(s.id)) return;\n            const r = await this.getRecord(s.id);\n            typeof r.response > \"u\" && (r.response = Ge(s) ? {\n                error: s.error\n            } : {\n                result: s.result\n            }, this.records.set(r.id, r), this.events.emit(zt.updated, r));\n        }, this.get = async (s, r)=>(this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                topic: s,\n                id: r\n            }), await this.getRecord(r)), this.delete = (s, r)=>{\n            this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                id: r\n            }), this.values.forEach((n)=>{\n                if (n.topic === s) {\n                    if (typeof r < \"u\" && n.id !== r) return;\n                    this.records.delete(n.id), this.events.emit(zt.deleted, n);\n                }\n            });\n        }, this.exists = async (s, r)=>(this.isInitialized(), this.records.has(r) ? (await this.getRecord(r)).topic === s : !1), this.on = (s, r)=>{\n            this.events.on(s, r);\n        }, this.once = (s, r)=>{\n            this.events.once(s, r);\n        }, this.off = (s, r)=>{\n            this.events.off(s, r);\n        }, this.removeListener = (s, r)=>{\n            this.events.removeListener(s, r);\n        }, this.logger = ee.generateChildLogger(t, this.name);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    get size() {\n        return this.records.size;\n    }\n    get keys() {\n        return Array.from(this.records.keys());\n    }\n    get values() {\n        return Array.from(this.records.values());\n    }\n    get pending() {\n        const e = [];\n        return this.values.forEach((t)=>{\n            if (typeof t.response < \"u\") return;\n            const s = {\n                topic: t.topic,\n                request: ti(t.request.method, t.request.params, t.id),\n                chainId: t.chainId\n            };\n            return e.push(s);\n        }), e;\n    }\n    async setJsonRpcRecords(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getJsonRpcRecords() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getRecord(e) {\n        this.isInitialized();\n        const t = this.records.get(e);\n        if (!t) {\n            const { message: s } = Y(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(s);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setJsonRpcRecords(this.values), this.events.emit(zt.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getJsonRpcRecords();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.records.size) {\n                const { message: t } = Y(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                records: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);\n        }\n    }\n    registerEventListeners() {\n        this.events.on(zt.created, (e)=>{\n            const t = zt.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        }), this.events.on(zt.updated, (e)=>{\n            const t = zt.updated;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        }), this.events.on(zt.deleted, (e)=>{\n            const t = zt.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        }), this.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, ()=>{\n            this.cleanup();\n        });\n    }\n    cleanup() {\n        try {\n            this.records.forEach((e)=>{\n                V.toMiliseconds(e.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${e.id}`), this.delete(e.topic, e.id));\n            });\n        } catch (e) {\n            this.logger.warn(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}, tm = class extends vl {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.expirations = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = A1, this.version = T1, this.cached = [], this.initialized = !1, this.storagePrefix = hi, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s)=>this.expirations.set(s.target, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.has = (s)=>{\n            try {\n                const r = this.formatTarget(s);\n                return typeof this.getExpiration(r) < \"u\";\n            } catch  {\n                return !1;\n            }\n        }, this.set = (s, r)=>{\n            this.isInitialized();\n            const n = this.formatTarget(s), o = {\n                target: n,\n                expiry: r\n            };\n            this.expirations.set(n, o), this.checkExpiry(n, o), this.events.emit(Tt.created, {\n                target: n,\n                expiration: o\n            });\n        }, this.get = (s)=>{\n            this.isInitialized();\n            const r = this.formatTarget(s);\n            return this.getExpiration(r);\n        }, this.del = (s)=>{\n            if (this.isInitialized(), this.has(s)) {\n                const r = this.formatTarget(s), n = this.getExpiration(r);\n                this.expirations.delete(r), this.events.emit(Tt.deleted, {\n                    target: r,\n                    expiration: n\n                });\n            }\n        }, this.on = (s, r)=>{\n            this.events.on(s, r);\n        }, this.once = (s, r)=>{\n            this.events.once(s, r);\n        }, this.off = (s, r)=>{\n            this.events.off(s, r);\n        }, this.removeListener = (s, r)=>{\n            this.events.removeListener(s, r);\n        }, this.logger = ee.generateChildLogger(t, this.name);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    get length() {\n        return this.expirations.size;\n    }\n    get keys() {\n        return Array.from(this.expirations.keys());\n    }\n    get values() {\n        return Array.from(this.expirations.values());\n    }\n    formatTarget(e) {\n        if (typeof e == \"string\") return vp(e);\n        if (typeof e == \"number\") return _p(e);\n        const { message: t } = Y(\"UNKNOWN_TYPE\", `Target type: ${typeof e}`);\n        throw new Error(t);\n    }\n    async setExpirations(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getExpirations() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    async persist() {\n        await this.setExpirations(this.values), this.events.emit(Tt.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getExpirations();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.expirations.size) {\n                const { message: t } = Y(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                expirations: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);\n        }\n    }\n    getExpiration(e) {\n        const t = this.expirations.get(e);\n        if (!t) {\n            const { message: s } = Y(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.error(s), new Error(s);\n        }\n        return t;\n    }\n    checkExpiry(e, t) {\n        const { expiry: s } = t;\n        V.toMiliseconds(s) - Date.now() <= 0 && this.expire(e, t);\n    }\n    expire(e, t) {\n        this.expirations.delete(e), this.events.emit(Tt.expired, {\n            target: e,\n            expiration: t\n        });\n    }\n    checkExpirations() {\n        this.core.relayer.connected && this.expirations.forEach((e, t)=>this.checkExpiry(t, e));\n    }\n    registerEventListeners() {\n        this.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, ()=>this.checkExpirations()), this.events.on(Tt.created, (e)=>{\n            const t = Tt.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(Tt.expired, (e)=>{\n            const t = Tt.expired;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(Tt.deleted, (e)=>{\n            const t = Tt.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}, im = class extends _l {\n    constructor(e, t){\n        super(e, t), this.projectId = e, this.logger = t, this.name = Nr, this.initialized = !1, this.queue = [], this.verifyDisabled = !1, this.init = async (s)=>{\n            if (this.verifyDisabled || ur() || !vs()) return;\n            const r = s?.verifyUrl || Ks;\n            this.verifyUrl !== r && this.removeIframe(), this.verifyUrl = r;\n            try {\n                await this.createIframe();\n            } catch (n) {\n                this.logger.info(`Verify iframe failed to load: ${this.verifyUrl}`), this.logger.info(n);\n            }\n            if (!this.initialized) {\n                this.removeIframe(), this.verifyUrl = ta;\n                try {\n                    await this.createIframe();\n                } catch (n) {\n                    this.logger.info(`Verify iframe failed to load: ${this.verifyUrl}`), this.logger.info(n), this.verifyDisabled = !0;\n                }\n            }\n        }, this.register = async (s)=>{\n            this.initialized ? this.sendPost(s.attestationId) : (this.addToQueue(s.attestationId), await this.init());\n        }, this.resolve = async (s)=>{\n            if (this.isDevEnv) return \"\";\n            const r = s?.verifyUrl || Ks;\n            let n;\n            try {\n                n = await this.fetchAttestation(s.attestationId, r);\n            } catch (o) {\n                this.logger.info(`failed to resolve attestation: ${s.attestationId} from url: ${r}`), this.logger.info(o), n = await this.fetchAttestation(s.attestationId, ta);\n            }\n            return n;\n        }, this.fetchAttestation = async (s, r)=>{\n            this.logger.info(`resolving attestation: ${s} from url: ${r}`);\n            const n = this.startAbortTimer(V.ONE_SECOND * 2), o = await fetch(`${r}/attestation/${s}`, {\n                signal: this.abortController.signal\n            });\n            return clearTimeout(n), o.status === 200 ? await o.json() : void 0;\n        }, this.addToQueue = (s)=>{\n            this.queue.push(s);\n        }, this.processQueue = ()=>{\n            this.queue.length !== 0 && (this.queue.forEach((s)=>this.sendPost(s)), this.queue = []);\n        }, this.sendPost = (s)=>{\n            var r;\n            try {\n                if (!this.iframe) return;\n                (r = this.iframe.contentWindow) == null || r.postMessage(s, \"*\"), this.logger.info(`postMessage sent: ${s} ${this.verifyUrl}`);\n            } catch  {}\n        }, this.createIframe = async ()=>{\n            let s;\n            const r = (n)=>{\n                n.data === \"verify_ready\" && (this.initialized = !0, this.processQueue(), window.removeEventListener(\"message\", r), s());\n            };\n            await Promise.race([\n                new Promise((n)=>{\n                    if (document.getElementById(Nr)) return n();\n                    window.addEventListener(\"message\", r);\n                    const o = document.createElement(\"iframe\");\n                    o.id = Nr, o.src = `${this.verifyUrl}/${this.projectId}`, o.style.display = \"none\", document.body.append(o), this.iframe = o, s = n;\n                }),\n                new Promise((n, o)=>setTimeout(()=>{\n                        window.removeEventListener(\"message\", r), o(\"verify iframe load timeout\");\n                    }, V.toMiliseconds(V.FIVE_SECONDS)))\n            ]);\n        }, this.removeIframe = ()=>{\n            this.iframe && (this.iframe.remove(), this.iframe = void 0, this.initialized = !1);\n        }, this.logger = ee.generateChildLogger(t, this.name), this.verifyUrl = Ks, this.abortController = new AbortController(), this.isDevEnv = yn() && process.env.IS_VITEST;\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    startAbortTimer(e) {\n        return this.abortController = new AbortController(), setTimeout(()=>this.abortController.abort(), V.toMiliseconds(e));\n    }\n};\nvar sm = Object.defineProperty, ha = Object.getOwnPropertySymbols, rm = Object.prototype.hasOwnProperty, nm = Object.prototype.propertyIsEnumerable, ua = (i, e, t)=>e in i ? sm(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, la = (i, e)=>{\n    for(var t in e || (e = {}))rm.call(e, t) && ua(i, t, e[t]);\n    if (ha) for (var t of ha(e))nm.call(e, t) && ua(i, t, e[t]);\n    return i;\n};\nlet om = class uh extends fl {\n    constructor(e){\n        super(e), this.protocol = ah, this.version = o1, this.name = En, this.events = new We.EventEmitter(), this.initialized = !1, this.on = (s, r)=>this.events.on(s, r), this.once = (s, r)=>this.events.once(s, r), this.off = (s, r)=>this.events.off(s, r), this.removeListener = (s, r)=>this.events.removeListener(s, r), this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || hh;\n        const t = typeof e?.logger < \"u\" && typeof e?.logger != \"string\" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({\n            level: e?.logger || a1.logger\n        }));\n        this.logger = ee.generateChildLogger(t, this.name), this.heartbeat = new Wt.HeartBeat(), this.crypto = new F1(this, this.logger, e?.keychain), this.history = new em(this, this.logger), this.expirer = new tm(this, this.logger), this.storage = e != null && e.storage ? e.storage : new nc(la(la({}, c1), e?.storageOptions)), this.relayer = new Y1({\n            core: this,\n            logger: this.logger,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId\n        }), this.pairing = new Z1(this, this.logger), this.verify = new im(this.projectId || \"\", this.logger);\n    }\n    static async init(e) {\n        const t = new uh(e);\n        await t.initialize();\n        const s = await t.crypto.getClientId();\n        return await t.storage.setItem(I1, s), t;\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    async start() {\n        this.initialized || await this.initialize();\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n        } catch (e) {\n            throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;\n        }\n    }\n};\nconst am = om, lh = \"wc\", dh = 2, fh = \"client\", Sn = `${lh}@${dh}:${fh}:`, Rr = {\n    name: fh,\n    logger: \"error\",\n    controller: !1,\n    relayUrl: \"wss://relay.walletconnect.com\"\n}, da = \"WALLETCONNECT_DEEPLINK_CHOICE\", cm = \"proposal\", hm = \"Proposal expired\", um = \"session\", Fs = V.SEVEN_DAYS, lm = \"engine\", es = {\n    wc_sessionPropose: {\n        req: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1100\n        },\n        res: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1101\n        }\n    },\n    wc_sessionSettle: {\n        req: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1102\n        },\n        res: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1103\n        }\n    },\n    wc_sessionUpdate: {\n        req: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1104\n        },\n        res: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1105\n        }\n    },\n    wc_sessionExtend: {\n        req: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1106\n        },\n        res: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1107\n        }\n    },\n    wc_sessionRequest: {\n        req: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1108\n        },\n        res: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1109\n        }\n    },\n    wc_sessionEvent: {\n        req: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1110\n        },\n        res: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1111\n        }\n    },\n    wc_sessionDelete: {\n        req: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1112\n        },\n        res: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1113\n        }\n    },\n    wc_sessionPing: {\n        req: {\n            ttl: V.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1114\n        },\n        res: {\n            ttl: V.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1115\n        }\n    }\n}, Cr = {\n    min: V.FIVE_MINUTES,\n    max: V.SEVEN_DAYS\n}, ei = {\n    idle: \"IDLE\",\n    active: \"ACTIVE\"\n}, dm = \"request\", fm = [\n    \"wc_sessionPropose\",\n    \"wc_sessionRequest\",\n    \"wc_authRequest\"\n];\nvar pm = Object.defineProperty, gm = Object.defineProperties, ym = Object.getOwnPropertyDescriptors, fa = Object.getOwnPropertySymbols, mm = Object.prototype.hasOwnProperty, bm = Object.prototype.propertyIsEnumerable, pa = (i, e, t)=>e in i ? pm(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, Et = (i, e)=>{\n    for(var t in e || (e = {}))mm.call(e, t) && pa(i, t, e[t]);\n    if (fa) for (var t of fa(e))bm.call(e, t) && pa(i, t, e[t]);\n    return i;\n}, ts = (i, e)=>gm(i, ym(e));\nlet wm = class extends Sl {\n    constructor(e){\n        super(e), this.name = lm, this.events = new ir(), this.initialized = !1, this.ignoredPayloadTypes = [\n            Di\n        ], this.requestQueue = {\n            state: ei.idle,\n            queue: []\n        }, this.sessionRequestQueue = {\n            state: ei.idle,\n            queue: []\n        }, this.requestQueueDelay = V.ONE_SECOND, this.init = async ()=>{\n            this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), this.client.core.pairing.register({\n                methods: Object.keys(es)\n            }), this.initialized = !0, setTimeout(()=>{\n                this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();\n            }, V.toMiliseconds(this.requestQueueDelay)));\n        }, this.connect = async (t)=>{\n            await this.isInitialized();\n            const s = ts(Et({}, t), {\n                requiredNamespaces: t.requiredNamespaces || {},\n                optionalNamespaces: t.optionalNamespaces || {}\n            });\n            await this.isValidConnect(s);\n            const { pairingTopic: r, requiredNamespaces: n, optionalNamespaces: o, sessionProperties: c, relays: u } = s;\n            let d = r, p, b = !1;\n            if (d && (b = this.client.core.pairing.pairings.get(d).active), !d || !b) {\n                const { topic: D, uri: y } = await this.client.core.pairing.create();\n                d = D, p = y;\n            }\n            const x = await this.client.core.crypto.generateKeyPair(), O = Et({\n                requiredNamespaces: n,\n                optionalNamespaces: o,\n                relays: u ?? [\n                    {\n                        protocol: ch\n                    }\n                ],\n                proposer: {\n                    publicKey: x,\n                    metadata: this.client.metadata\n                }\n            }, c && {\n                sessionProperties: c\n            }), { reject: _, resolve: C, done: F } = Ai(V.FIVE_MINUTES, hm);\n            if (this.events.once(Be(\"session_connect\"), async ({ error: D, session: y })=>{\n                if (D) _(D);\n                else if (y) {\n                    y.self.publicKey = x;\n                    const w = ts(Et({}, y), {\n                        requiredNamespaces: y.requiredNamespaces,\n                        optionalNamespaces: y.optionalNamespaces\n                    });\n                    await this.client.session.set(y.topic, w), await this.setExpiry(y.topic, y.expiry), d && await this.client.core.pairing.updateMetadata({\n                        topic: d,\n                        metadata: y.peer.metadata\n                    }), C(w);\n                }\n            }), !d) {\n                const { message: D } = Y(\"NO_MATCHING_KEY\", `connect() pairing topic: ${d}`);\n                throw new Error(D);\n            }\n            const K = await this.sendRequest({\n                topic: d,\n                method: \"wc_sessionPropose\",\n                params: O\n            }), I = Mt(V.FIVE_MINUTES);\n            return await this.setProposal(K, Et({\n                id: K,\n                expiry: I\n            }, O)), {\n                uri: p,\n                approval: F\n            };\n        }, this.pair = async (t)=>(await this.isInitialized(), await this.client.core.pairing.pair(t)), this.approve = async (t)=>{\n            await this.isInitialized(), await this.isValidApprove(t);\n            const { id: s, relayProtocol: r, namespaces: n, sessionProperties: o } = t, c = this.client.proposal.get(s);\n            let { pairingTopic: u, proposer: d, requiredNamespaces: p, optionalNamespaces: b } = c;\n            u = u || \"\", cs(p) || (p = Up(n, \"approve()\"));\n            const x = await this.client.core.crypto.generateKeyPair(), O = d.publicKey, _ = await this.client.core.crypto.generateSharedKey(x, O);\n            u && s && (await this.client.core.pairing.updateMetadata({\n                topic: u,\n                metadata: d.metadata\n            }), await this.sendResult({\n                id: s,\n                topic: u,\n                result: {\n                    relay: {\n                        protocol: r ?? \"irn\"\n                    },\n                    responderPublicKey: x\n                }\n            }), await this.client.proposal.delete(s, nt(\"USER_DISCONNECTED\")), await this.client.core.pairing.activate({\n                topic: u\n            }));\n            const C = Et({\n                relay: {\n                    protocol: r ?? \"irn\"\n                },\n                namespaces: n,\n                requiredNamespaces: p,\n                optionalNamespaces: b,\n                pairingTopic: u,\n                controller: {\n                    publicKey: x,\n                    metadata: this.client.metadata\n                },\n                expiry: Mt(Fs)\n            }, o && {\n                sessionProperties: o\n            });\n            await this.client.core.relayer.subscribe(_), await this.sendRequest({\n                topic: _,\n                method: \"wc_sessionSettle\",\n                params: C,\n                throwOnFailedPublish: !0\n            });\n            const F = ts(Et({}, C), {\n                topic: _,\n                pairingTopic: u,\n                acknowledged: !1,\n                self: C.controller,\n                peer: {\n                    publicKey: d.publicKey,\n                    metadata: d.metadata\n                },\n                controller: x\n            });\n            return await this.client.session.set(_, F), await this.setExpiry(_, Mt(Fs)), {\n                topic: _,\n                acknowledged: ()=>new Promise((K)=>setTimeout(()=>K(this.client.session.get(_)), 500))\n            };\n        }, this.reject = async (t)=>{\n            await this.isInitialized(), await this.isValidReject(t);\n            const { id: s, reason: r } = t, { pairingTopic: n } = this.client.proposal.get(s);\n            n && (await this.sendError(s, n, r), await this.client.proposal.delete(s, nt(\"USER_DISCONNECTED\")));\n        }, this.update = async (t)=>{\n            await this.isInitialized(), await this.isValidUpdate(t);\n            const { topic: s, namespaces: r } = t, n = await this.sendRequest({\n                topic: s,\n                method: \"wc_sessionUpdate\",\n                params: {\n                    namespaces: r\n                }\n            }), { done: o, resolve: c, reject: u } = Ai();\n            return this.events.once(Be(\"session_update\", n), ({ error: d })=>{\n                d ? u(d) : c();\n            }), await this.client.session.update(s, {\n                namespaces: r\n            }), {\n                acknowledged: o\n            };\n        }, this.extend = async (t)=>{\n            await this.isInitialized(), await this.isValidExtend(t);\n            const { topic: s } = t, r = await this.sendRequest({\n                topic: s,\n                method: \"wc_sessionExtend\",\n                params: {}\n            }), { done: n, resolve: o, reject: c } = Ai();\n            return this.events.once(Be(\"session_extend\", r), ({ error: u })=>{\n                u ? c(u) : o();\n            }), await this.setExpiry(s, Mt(Fs)), {\n                acknowledged: n\n            };\n        }, this.request = async (t)=>{\n            await this.isInitialized(), await this.isValidRequest(t);\n            const { chainId: s, request: r, topic: n, expiry: o } = t, c = wn(), { done: u, resolve: d, reject: p } = Ai(o);\n            return this.events.once(Be(\"session_request\", c), ({ error: b, result: x })=>{\n                b ? p(b) : d(x);\n            }), await Promise.all([\n                new Promise(async (b)=>{\n                    await this.sendRequest({\n                        clientRpcId: c,\n                        topic: n,\n                        method: \"wc_sessionRequest\",\n                        params: {\n                            request: r,\n                            chainId: s\n                        },\n                        expiry: o,\n                        throwOnFailedPublish: !0\n                    }).catch((x)=>p(x)), this.client.events.emit(\"session_request_sent\", {\n                        topic: n,\n                        request: r,\n                        chainId: s,\n                        id: c\n                    }), b();\n                }),\n                new Promise(async (b)=>{\n                    const x = await this.client.core.storage.getItem(da);\n                    Ep({\n                        id: c,\n                        topic: n,\n                        wcDeepLink: x\n                    }), b();\n                }),\n                u()\n            ]).then((b)=>b[2]);\n        }, this.respond = async (t)=>{\n            await this.isInitialized(), await this.isValidRespond(t);\n            const { topic: s, response: r } = t, { id: n } = r;\n            ht(r) ? await this.sendResult({\n                id: n,\n                topic: s,\n                result: r.result,\n                throwOnFailedPublish: !0\n            }) : Ge(r) && await this.sendError(n, s, r.error), this.cleanupAfterResponse(t);\n        }, this.ping = async (t)=>{\n            await this.isInitialized(), await this.isValidPing(t);\n            const { topic: s } = t;\n            if (this.client.session.keys.includes(s)) {\n                const r = await this.sendRequest({\n                    topic: s,\n                    method: \"wc_sessionPing\",\n                    params: {}\n                }), { done: n, resolve: o, reject: c } = Ai();\n                this.events.once(Be(\"session_ping\", r), ({ error: u })=>{\n                    u ? c(u) : o();\n                }), await n();\n            } else this.client.core.pairing.pairings.keys.includes(s) && await this.client.core.pairing.ping({\n                topic: s\n            });\n        }, this.emit = async (t)=>{\n            await this.isInitialized(), await this.isValidEmit(t);\n            const { topic: s, event: r, chainId: n } = t;\n            await this.sendRequest({\n                topic: s,\n                method: \"wc_sessionEvent\",\n                params: {\n                    event: r,\n                    chainId: n\n                }\n            });\n        }, this.disconnect = async (t)=>{\n            await this.isInitialized(), await this.isValidDisconnect(t);\n            const { topic: s } = t;\n            this.client.session.keys.includes(s) ? (await this.sendRequest({\n                topic: s,\n                method: \"wc_sessionDelete\",\n                params: nt(\"USER_DISCONNECTED\"),\n                throwOnFailedPublish: !0\n            }), await this.deleteSession(s)) : await this.client.core.pairing.disconnect({\n                topic: s\n            });\n        }, this.find = (t)=>(this.isInitialized(), this.client.session.getAll().filter((s)=>qp(s, t))), this.getPendingSessionRequests = ()=>(this.isInitialized(), this.client.pendingRequest.getAll()), this.cleanupDuplicatePairings = async (t)=>{\n            if (t.pairingTopic) try {\n                const s = this.client.core.pairing.pairings.get(t.pairingTopic), r = this.client.core.pairing.pairings.getAll().filter((n)=>{\n                    var o, c;\n                    return ((o = n.peerMetadata) == null ? void 0 : o.url) && ((c = n.peerMetadata) == null ? void 0 : c.url) === t.peer.metadata.url && n.topic && n.topic !== s.topic;\n                });\n                if (r.length === 0) return;\n                this.client.logger.info(`Cleaning up ${r.length} duplicate pairing(s)`), await Promise.all(r.map((n)=>this.client.core.pairing.disconnect({\n                        topic: n.topic\n                    }))), this.client.logger.info(\"Duplicate pairings clean up finished\");\n            } catch (s) {\n                this.client.logger.error(s);\n            }\n        }, this.deleteSession = async (t, s)=>{\n            const { self: r } = this.client.session.get(t);\n            await this.client.core.relayer.unsubscribe(t), this.client.session.delete(t, nt(\"USER_DISCONNECTED\")), this.client.core.crypto.keychain.has(r.publicKey) && await this.client.core.crypto.deleteKeyPair(r.publicKey), this.client.core.crypto.keychain.has(t) && await this.client.core.crypto.deleteSymKey(t), s || this.client.core.expirer.del(t), this.client.core.storage.removeItem(da).catch((n)=>this.client.logger.warn(n));\n        }, this.deleteProposal = async (t, s)=>{\n            await Promise.all([\n                this.client.proposal.delete(t, nt(\"USER_DISCONNECTED\")),\n                s ? Promise.resolve() : this.client.core.expirer.del(t)\n            ]);\n        }, this.deletePendingSessionRequest = async (t, s, r = !1)=>{\n            await Promise.all([\n                this.client.pendingRequest.delete(t, s),\n                r ? Promise.resolve() : this.client.core.expirer.del(t)\n            ]), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((n)=>n.id !== t), r && (this.sessionRequestQueue.state = ei.idle);\n        }, this.setExpiry = async (t, s)=>{\n            this.client.session.keys.includes(t) && await this.client.session.update(t, {\n                expiry: s\n            }), this.client.core.expirer.set(t, s);\n        }, this.setProposal = async (t, s)=>{\n            await this.client.proposal.set(t, s), this.client.core.expirer.set(t, s.expiry);\n        }, this.setPendingSessionRequest = async (t)=>{\n            const s = es.wc_sessionRequest.req.ttl, { id: r, topic: n, params: o, verifyContext: c } = t;\n            await this.client.pendingRequest.set(r, {\n                id: r,\n                topic: n,\n                params: o,\n                verifyContext: c\n            }), s && this.client.core.expirer.set(r, Mt(s));\n        }, this.sendRequest = async (t)=>{\n            const { topic: s, method: r, params: n, expiry: o, relayRpcId: c, clientRpcId: u, throwOnFailedPublish: d } = t, p = ti(r, n, u);\n            if (vs() && fm.includes(r)) {\n                const O = Fi(JSON.stringify(p));\n                this.client.core.verify.register({\n                    attestationId: O\n                });\n            }\n            const b = await this.client.core.crypto.encode(s, p), x = es[r].req;\n            return o && (x.ttl = o), c && (x.id = c), this.client.core.history.set(s, p), d ? (x.internal = ts(Et({}, x.internal), {\n                throwOnFailedPublish: !0\n            }), await this.client.core.relayer.publish(s, b, x)) : this.client.core.relayer.publish(s, b, x).catch((O)=>this.client.logger.error(O)), p.id;\n        }, this.sendResult = async (t)=>{\n            const { id: s, topic: r, result: n, throwOnFailedPublish: o } = t, c = xi(s, n), u = await this.client.core.crypto.encode(r, c), d = await this.client.core.history.get(r, s), p = es[d.request.method].res;\n            o ? (p.internal = ts(Et({}, p.internal), {\n                throwOnFailedPublish: !0\n            }), await this.client.core.relayer.publish(r, u, p)) : this.client.core.relayer.publish(r, u, p).catch((b)=>this.client.logger.error(b)), await this.client.core.history.resolve(c);\n        }, this.sendError = async (t, s, r)=>{\n            const n = qi(t, r), o = await this.client.core.crypto.encode(s, n), c = await this.client.core.history.get(s, t), u = es[c.request.method].res;\n            this.client.core.relayer.publish(s, o, u), await this.client.core.history.resolve(n);\n        }, this.cleanup = async ()=>{\n            const t = [], s = [];\n            this.client.session.getAll().forEach((r)=>{\n                ai(r.expiry) && t.push(r.topic);\n            }), this.client.proposal.getAll().forEach((r)=>{\n                ai(r.expiry) && s.push(r.id);\n            }), await Promise.all([\n                ...t.map((r)=>this.deleteSession(r)),\n                ...s.map((r)=>this.deleteProposal(r))\n            ]);\n        }, this.onRelayEventRequest = async (t)=>{\n            this.requestQueue.queue.push(t), await this.processRequestsQueue();\n        }, this.processRequestsQueue = async ()=>{\n            if (this.requestQueue.state === ei.active) {\n                this.client.logger.info(\"Request queue already active, skipping...\");\n                return;\n            }\n            for(this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0;){\n                this.requestQueue.state = ei.active;\n                const t = this.requestQueue.queue.shift();\n                if (t) try {\n                    this.processRequest(t), await new Promise((s)=>setTimeout(s, 300));\n                } catch (s) {\n                    this.client.logger.warn(s);\n                }\n            }\n            this.requestQueue.state = ei.idle;\n        }, this.processRequest = (t)=>{\n            const { topic: s, payload: r } = t, n = r.method;\n            switch(n){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeRequest(s, r);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleRequest(s, r);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateRequest(s, r);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendRequest(s, r);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingRequest(s, r);\n                case \"wc_sessionDelete\":\n                    return this.onSessionDeleteRequest(s, r);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequest(s, r);\n                case \"wc_sessionEvent\":\n                    return this.onSessionEventRequest(s, r);\n                default:\n                    return this.client.logger.info(`Unsupported request method ${n}`);\n            }\n        }, this.onRelayEventResponse = async (t)=>{\n            const { topic: s, payload: r } = t, n = (await this.client.core.history.get(s, r.id)).request.method;\n            switch(n){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeResponse(s, r);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleResponse(s, r);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateResponse(s, r);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendResponse(s, r);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingResponse(s, r);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequestResponse(s, r);\n                default:\n                    return this.client.logger.info(`Unsupported response method ${n}`);\n            }\n        }, this.onRelayEventUnknownPayload = (t)=>{\n            const { topic: s } = t, { message: r } = Y(\"MISSING_OR_INVALID\", `Decoded payload on topic ${s} is not identifiable as a JSON-RPC request or a response.`);\n            throw new Error(r);\n        }, this.onSessionProposeRequest = async (t, s)=>{\n            const { params: r, id: n } = s;\n            try {\n                this.isValidConnect(Et({}, s.params));\n                const o = Mt(V.FIVE_MINUTES), c = Et({\n                    id: n,\n                    pairingTopic: t,\n                    expiry: o\n                }, r);\n                await this.setProposal(n, c);\n                const u = Fi(JSON.stringify(s)), d = await this.getVerifyContext(u, c.proposer.metadata);\n                this.client.events.emit(\"session_proposal\", {\n                    id: n,\n                    params: c,\n                    verifyContext: d\n                });\n            } catch (o) {\n                await this.sendError(n, t, o), this.client.logger.error(o);\n            }\n        }, this.onSessionProposeResponse = async (t, s)=>{\n            const { id: r } = s;\n            if (ht(s)) {\n                const { result: n } = s;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    result: n\n                });\n                const o = this.client.proposal.get(r);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    proposal: o\n                });\n                const c = o.proposer.publicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    selfPublicKey: c\n                });\n                const u = n.responderPublicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    peerPublicKey: u\n                });\n                const d = await this.client.core.crypto.generateSharedKey(c, u);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    sessionTopic: d\n                });\n                const p = await this.client.core.relayer.subscribe(d);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    subscriptionId: p\n                }), await this.client.core.pairing.activate({\n                    topic: t\n                });\n            } else Ge(s) && (await this.client.proposal.delete(r, nt(\"USER_DISCONNECTED\")), this.events.emit(Be(\"session_connect\"), {\n                error: s.error\n            }));\n        }, this.onSessionSettleRequest = async (t, s)=>{\n            const { id: r, params: n } = s;\n            try {\n                this.isValidSessionSettleRequest(n);\n                const { relay: o, controller: c, expiry: u, namespaces: d, requiredNamespaces: p, optionalNamespaces: b, sessionProperties: x, pairingTopic: O } = s.params, _ = Et({\n                    topic: t,\n                    relay: o,\n                    expiry: u,\n                    namespaces: d,\n                    acknowledged: !0,\n                    pairingTopic: O,\n                    requiredNamespaces: p,\n                    optionalNamespaces: b,\n                    controller: c.publicKey,\n                    self: {\n                        publicKey: \"\",\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: c.publicKey,\n                        metadata: c.metadata\n                    }\n                }, x && {\n                    sessionProperties: x\n                });\n                await this.sendResult({\n                    id: s.id,\n                    topic: t,\n                    result: !0\n                }), this.events.emit(Be(\"session_connect\"), {\n                    session: _\n                }), this.cleanupDuplicatePairings(_);\n            } catch (o) {\n                await this.sendError(r, t, o), this.client.logger.error(o);\n            }\n        }, this.onSessionSettleResponse = async (t, s)=>{\n            const { id: r } = s;\n            ht(s) ? (await this.client.session.update(t, {\n                acknowledged: !0\n            }), this.events.emit(Be(\"session_approve\", r), {})) : Ge(s) && (await this.client.session.delete(t, nt(\"USER_DISCONNECTED\")), this.events.emit(Be(\"session_approve\", r), {\n                error: s.error\n            }));\n        }, this.onSessionUpdateRequest = async (t, s)=>{\n            const { params: r, id: n } = s;\n            try {\n                const o = `${t}_session_update`, c = $s.get(o);\n                if (c && this.isRequestOutOfSync(c, n)) {\n                    this.client.logger.info(`Discarding out of sync request - ${n}`);\n                    return;\n                }\n                this.isValidUpdate(Et({\n                    topic: t\n                }, r)), await this.client.session.update(t, {\n                    namespaces: r.namespaces\n                }), await this.sendResult({\n                    id: n,\n                    topic: t,\n                    result: !0\n                }), this.client.events.emit(\"session_update\", {\n                    id: n,\n                    topic: t,\n                    params: r\n                }), $s.set(o, n);\n            } catch (o) {\n                await this.sendError(n, t, o), this.client.logger.error(o);\n            }\n        }, this.isRequestOutOfSync = (t, s)=>parseInt(s.toString().slice(0, -3)) <= parseInt(t.toString().slice(0, -3)), this.onSessionUpdateResponse = (t, s)=>{\n            const { id: r } = s;\n            ht(s) ? this.events.emit(Be(\"session_update\", r), {}) : Ge(s) && this.events.emit(Be(\"session_update\", r), {\n                error: s.error\n            });\n        }, this.onSessionExtendRequest = async (t, s)=>{\n            const { id: r } = s;\n            try {\n                this.isValidExtend({\n                    topic: t\n                }), await this.setExpiry(t, Mt(Fs)), await this.sendResult({\n                    id: r,\n                    topic: t,\n                    result: !0\n                }), this.client.events.emit(\"session_extend\", {\n                    id: r,\n                    topic: t\n                });\n            } catch (n) {\n                await this.sendError(r, t, n), this.client.logger.error(n);\n            }\n        }, this.onSessionExtendResponse = (t, s)=>{\n            const { id: r } = s;\n            ht(s) ? this.events.emit(Be(\"session_extend\", r), {}) : Ge(s) && this.events.emit(Be(\"session_extend\", r), {\n                error: s.error\n            });\n        }, this.onSessionPingRequest = async (t, s)=>{\n            const { id: r } = s;\n            try {\n                this.isValidPing({\n                    topic: t\n                }), await this.sendResult({\n                    id: r,\n                    topic: t,\n                    result: !0\n                }), this.client.events.emit(\"session_ping\", {\n                    id: r,\n                    topic: t\n                });\n            } catch (n) {\n                await this.sendError(r, t, n), this.client.logger.error(n);\n            }\n        }, this.onSessionPingResponse = (t, s)=>{\n            const { id: r } = s;\n            setTimeout(()=>{\n                ht(s) ? this.events.emit(Be(\"session_ping\", r), {}) : Ge(s) && this.events.emit(Be(\"session_ping\", r), {\n                    error: s.error\n                });\n            }, 500);\n        }, this.onSessionDeleteRequest = async (t, s)=>{\n            const { id: r } = s;\n            try {\n                this.isValidDisconnect({\n                    topic: t,\n                    reason: s.params\n                }), await Promise.all([\n                    new Promise((n)=>{\n                        this.client.core.relayer.once(gt.publish, async ()=>{\n                            n(await this.deleteSession(t));\n                        });\n                    }),\n                    this.sendResult({\n                        id: r,\n                        topic: t,\n                        result: !0\n                    })\n                ]), this.client.events.emit(\"session_delete\", {\n                    id: r,\n                    topic: t\n                });\n            } catch (n) {\n                this.client.logger.error(n);\n            }\n        }, this.onSessionRequest = async (t, s)=>{\n            const { id: r, params: n } = s;\n            try {\n                this.isValidRequest(Et({\n                    topic: t\n                }, n));\n                const o = Fi(JSON.stringify(ti(\"wc_sessionRequest\", n, r))), c = this.client.session.get(t), u = await this.getVerifyContext(o, c.peer.metadata), d = {\n                    id: r,\n                    topic: t,\n                    params: n,\n                    verifyContext: u\n                };\n                await this.setPendingSessionRequest(d), this.addSessionRequestToSessionRequestQueue(d), this.processSessionRequestQueue();\n            } catch (o) {\n                await this.sendError(r, t, o), this.client.logger.error(o);\n            }\n        }, this.onSessionRequestResponse = (t, s)=>{\n            const { id: r } = s;\n            ht(s) ? this.events.emit(Be(\"session_request\", r), {\n                result: s.result\n            }) : Ge(s) && this.events.emit(Be(\"session_request\", r), {\n                error: s.error\n            });\n        }, this.onSessionEventRequest = async (t, s)=>{\n            const { id: r, params: n } = s;\n            try {\n                const o = `${t}_session_event_${n.event.name}`, c = $s.get(o);\n                if (c && this.isRequestOutOfSync(c, r)) {\n                    this.client.logger.info(`Discarding out of sync request - ${r}`);\n                    return;\n                }\n                this.isValidEmit(Et({\n                    topic: t\n                }, n)), this.client.events.emit(\"session_event\", {\n                    id: r,\n                    topic: t,\n                    params: n\n                }), $s.set(o, r);\n            } catch (o) {\n                await this.sendError(r, t, o), this.client.logger.error(o);\n            }\n        }, this.addSessionRequestToSessionRequestQueue = (t)=>{\n            this.sessionRequestQueue.queue.push(t);\n        }, this.cleanupAfterResponse = (t)=>{\n            this.deletePendingSessionRequest(t.response.id, {\n                message: \"fulfilled\",\n                code: 0\n            }), setTimeout(()=>{\n                this.sessionRequestQueue.state = ei.idle, this.processSessionRequestQueue();\n            }, V.toMiliseconds(this.requestQueueDelay));\n        }, this.processSessionRequestQueue = ()=>{\n            if (this.sessionRequestQueue.state === ei.active) {\n                this.client.logger.info(\"session request queue is already active.\");\n                return;\n            }\n            const t = this.sessionRequestQueue.queue[0];\n            if (!t) {\n                this.client.logger.info(\"session request queue is empty.\");\n                return;\n            }\n            try {\n                this.sessionRequestQueue.state = ei.active, this.client.events.emit(\"session_request\", t);\n            } catch (s) {\n                this.client.logger.error(s);\n            }\n        }, this.onPairingCreated = (t)=>{\n            if (t.active) return;\n            const s = this.client.proposal.getAll().find((r)=>r.pairingTopic === t.topic);\n            s && this.onSessionProposeRequest(t.topic, ti(\"wc_sessionPropose\", {\n                requiredNamespaces: s.requiredNamespaces,\n                optionalNamespaces: s.optionalNamespaces,\n                relays: s.relays,\n                proposer: s.proposer\n            }, s.id));\n        }, this.isValidConnect = async (t)=>{\n            if (!St(t)) {\n                const { message: u } = Y(\"MISSING_OR_INVALID\", `connect() params: ${JSON.stringify(t)}`);\n                throw new Error(u);\n            }\n            const { pairingTopic: s, requiredNamespaces: r, optionalNamespaces: n, sessionProperties: o, relays: c } = t;\n            if (bt(s) || await this.isValidPairingTopic(s), !Qp(c, !0)) {\n                const { message: u } = Y(\"MISSING_OR_INVALID\", `connect() relays: ${c}`);\n                throw new Error(u);\n            }\n            !bt(r) && cs(r) !== 0 && this.validateNamespaces(r, \"requiredNamespaces\"), !bt(n) && cs(n) !== 0 && this.validateNamespaces(n, \"optionalNamespaces\"), bt(o) || this.validateSessionProps(o, \"sessionProperties\");\n        }, this.validateNamespaces = (t, s)=>{\n            const r = Jp(t, \"connect()\", s);\n            if (r) throw new Error(r.message);\n        }, this.isValidApprove = async (t)=>{\n            if (!St(t)) throw new Error(Y(\"MISSING_OR_INVALID\", `approve() params: ${t}`).message);\n            const { id: s, namespaces: r, relayProtocol: n, sessionProperties: o } = t;\n            await this.isValidProposalId(s);\n            const c = this.client.proposal.get(s), u = zs(r, \"approve()\");\n            if (u) throw new Error(u.message);\n            const d = Mo(c.requiredNamespaces, r, \"approve()\");\n            if (d) throw new Error(d.message);\n            if (!ot(n, !0)) {\n                const { message: p } = Y(\"MISSING_OR_INVALID\", `approve() relayProtocol: ${n}`);\n                throw new Error(p);\n            }\n            bt(o) || this.validateSessionProps(o, \"sessionProperties\");\n        }, this.isValidReject = async (t)=>{\n            if (!St(t)) {\n                const { message: n } = Y(\"MISSING_OR_INVALID\", `reject() params: ${t}`);\n                throw new Error(n);\n            }\n            const { id: s, reason: r } = t;\n            if (await this.isValidProposalId(s), !Zp(r)) {\n                const { message: n } = Y(\"MISSING_OR_INVALID\", `reject() reason: ${JSON.stringify(r)}`);\n                throw new Error(n);\n            }\n        }, this.isValidSessionSettleRequest = (t)=>{\n            if (!St(t)) {\n                const { message: d } = Y(\"MISSING_OR_INVALID\", `onSessionSettleRequest() params: ${t}`);\n                throw new Error(d);\n            }\n            const { relay: s, controller: r, namespaces: n, expiry: o } = t;\n            if (!Kc(s)) {\n                const { message: d } = Y(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n                throw new Error(d);\n            }\n            const c = Bp(r, \"onSessionSettleRequest()\");\n            if (c) throw new Error(c.message);\n            const u = zs(n, \"onSessionSettleRequest()\");\n            if (u) throw new Error(u.message);\n            if (ai(o)) {\n                const { message: d } = Y(\"EXPIRED\", \"onSessionSettleRequest()\");\n                throw new Error(d);\n            }\n        }, this.isValidUpdate = async (t)=>{\n            if (!St(t)) {\n                const { message: u } = Y(\"MISSING_OR_INVALID\", `update() params: ${t}`);\n                throw new Error(u);\n            }\n            const { topic: s, namespaces: r } = t;\n            await this.isValidSessionTopic(s);\n            const n = this.client.session.get(s), o = zs(r, \"update()\");\n            if (o) throw new Error(o.message);\n            const c = Mo(n.requiredNamespaces, r, \"update()\");\n            if (c) throw new Error(c.message);\n        }, this.isValidExtend = async (t)=>{\n            if (!St(t)) {\n                const { message: r } = Y(\"MISSING_OR_INVALID\", `extend() params: ${t}`);\n                throw new Error(r);\n            }\n            const { topic: s } = t;\n            await this.isValidSessionTopic(s);\n        }, this.isValidRequest = async (t)=>{\n            if (!St(t)) {\n                const { message: u } = Y(\"MISSING_OR_INVALID\", `request() params: ${t}`);\n                throw new Error(u);\n            }\n            const { topic: s, request: r, chainId: n, expiry: o } = t;\n            await this.isValidSessionTopic(s);\n            const { namespaces: c } = this.client.session.get(s);\n            if (!Lo(c, n)) {\n                const { message: u } = Y(\"MISSING_OR_INVALID\", `request() chainId: ${n}`);\n                throw new Error(u);\n            }\n            if (!eg(r)) {\n                const { message: u } = Y(\"MISSING_OR_INVALID\", `request() ${JSON.stringify(r)}`);\n                throw new Error(u);\n            }\n            if (!sg(c, n, r.method)) {\n                const { message: u } = Y(\"MISSING_OR_INVALID\", `request() method: ${r.method}`);\n                throw new Error(u);\n            }\n            if (o && !ag(o, Cr)) {\n                const { message: u } = Y(\"MISSING_OR_INVALID\", `request() expiry: ${o}. Expiry must be a number (in seconds) between ${Cr.min} and ${Cr.max}`);\n                throw new Error(u);\n            }\n        }, this.isValidRespond = async (t)=>{\n            if (!St(t)) {\n                const { message: n } = Y(\"MISSING_OR_INVALID\", `respond() params: ${t}`);\n                throw new Error(n);\n            }\n            const { topic: s, response: r } = t;\n            if (await this.isValidSessionTopic(s), !tg(r)) {\n                const { message: n } = Y(\"MISSING_OR_INVALID\", `respond() response: ${JSON.stringify(r)}`);\n                throw new Error(n);\n            }\n        }, this.isValidPing = async (t)=>{\n            if (!St(t)) {\n                const { message: r } = Y(\"MISSING_OR_INVALID\", `ping() params: ${t}`);\n                throw new Error(r);\n            }\n            const { topic: s } = t;\n            await this.isValidSessionOrPairingTopic(s);\n        }, this.isValidEmit = async (t)=>{\n            if (!St(t)) {\n                const { message: c } = Y(\"MISSING_OR_INVALID\", `emit() params: ${t}`);\n                throw new Error(c);\n            }\n            const { topic: s, event: r, chainId: n } = t;\n            await this.isValidSessionTopic(s);\n            const { namespaces: o } = this.client.session.get(s);\n            if (!Lo(o, n)) {\n                const { message: c } = Y(\"MISSING_OR_INVALID\", `emit() chainId: ${n}`);\n                throw new Error(c);\n            }\n            if (!ig(r)) {\n                const { message: c } = Y(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(r)}`);\n                throw new Error(c);\n            }\n            if (!rg(o, n, r.name)) {\n                const { message: c } = Y(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(r)}`);\n                throw new Error(c);\n            }\n        }, this.isValidDisconnect = async (t)=>{\n            if (!St(t)) {\n                const { message: r } = Y(\"MISSING_OR_INVALID\", `disconnect() params: ${t}`);\n                throw new Error(r);\n            }\n            const { topic: s } = t;\n            await this.isValidSessionOrPairingTopic(s);\n        }, this.getVerifyContext = async (t, s)=>{\n            const r = {\n                verified: {\n                    verifyUrl: s.verifyUrl || Ks,\n                    validation: \"UNKNOWN\",\n                    origin: s.url || \"\"\n                }\n            };\n            try {\n                const n = await this.client.core.verify.resolve({\n                    attestationId: t,\n                    verifyUrl: s.verifyUrl\n                });\n                n && (r.verified.origin = n.origin, r.verified.isScam = n.isScam, r.verified.validation = n.origin === new URL(s.url).origin ? \"VALID\" : \"INVALID\");\n            } catch (n) {\n                this.client.logger.info(n);\n            }\n            return this.client.logger.info(`Verify context: ${JSON.stringify(r)}`), r;\n        }, this.validateSessionProps = (t, s)=>{\n            Object.values(t).forEach((r)=>{\n                if (!ot(r, !1)) {\n                    const { message: n } = Y(\"MISSING_OR_INVALID\", `${s} must be in Record<string, string> format. Received: ${JSON.stringify(r)}`);\n                    throw new Error(n);\n                }\n            });\n        };\n    }\n    async isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n        await this.client.core.relayer.confirmOnlineStateOrThrow();\n    }\n    registerRelayerEvents() {\n        this.client.core.relayer.on(gt.message, async (e)=>{\n            const { topic: t, message: s } = e;\n            if (this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s))) return;\n            const r = await this.client.core.crypto.decode(t, s);\n            try {\n                ji(r) ? (this.client.core.history.set(t, r), this.onRelayEventRequest({\n                    topic: t,\n                    payload: r\n                })) : Oi(r) ? (await this.client.core.history.resolve(r), await this.onRelayEventResponse({\n                    topic: t,\n                    payload: r\n                }), this.client.core.history.delete(t, r.id)) : this.onRelayEventUnknownPayload({\n                    topic: t,\n                    payload: r\n                });\n            } catch (n) {\n                this.client.logger.error(n);\n            }\n        });\n    }\n    registerExpirerEvents() {\n        this.client.core.expirer.on(Tt.expired, async (e)=>{\n            const { topic: t, id: s } = jc(e.target);\n            if (s && this.client.pendingRequest.keys.includes(s)) return await this.deletePendingSessionRequest(s, Y(\"EXPIRED\"), !0);\n            t ? this.client.session.keys.includes(t) && (await this.deleteSession(t, !0), this.client.events.emit(\"session_expire\", {\n                topic: t\n            })) : s && (await this.deleteProposal(s, !0), this.client.events.emit(\"proposal_expire\", {\n                id: s\n            }));\n        });\n    }\n    registerPairingEvents() {\n        this.client.core.pairing.events.on(os.create, (e)=>this.onPairingCreated(e));\n    }\n    isValidPairingTopic(e) {\n        if (!ot(e, !1)) {\n            const { message: t } = Y(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${e}`);\n            throw new Error(t);\n        }\n        if (!this.client.core.pairing.pairings.keys.includes(e)) {\n            const { message: t } = Y(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${e}`);\n            throw new Error(t);\n        }\n        if (ai(this.client.core.pairing.pairings.get(e).expiry)) {\n            const { message: t } = Y(\"EXPIRED\", `pairing topic: ${e}`);\n            throw new Error(t);\n        }\n    }\n    async isValidSessionTopic(e) {\n        if (!ot(e, !1)) {\n            const { message: t } = Y(\"MISSING_OR_INVALID\", `session topic should be a string: ${e}`);\n            throw new Error(t);\n        }\n        if (!this.client.session.keys.includes(e)) {\n            const { message: t } = Y(\"NO_MATCHING_KEY\", `session topic doesn't exist: ${e}`);\n            throw new Error(t);\n        }\n        if (ai(this.client.session.get(e).expiry)) {\n            await this.deleteSession(e);\n            const { message: t } = Y(\"EXPIRED\", `session topic: ${e}`);\n            throw new Error(t);\n        }\n    }\n    async isValidSessionOrPairingTopic(e) {\n        if (this.client.session.keys.includes(e)) await this.isValidSessionTopic(e);\n        else if (this.client.core.pairing.pairings.keys.includes(e)) this.isValidPairingTopic(e);\n        else if (ot(e, !1)) {\n            const { message: t } = Y(\"NO_MATCHING_KEY\", `session or pairing topic doesn't exist: ${e}`);\n            throw new Error(t);\n        } else {\n            const { message: t } = Y(\"MISSING_OR_INVALID\", `session or pairing topic should be a string: ${e}`);\n            throw new Error(t);\n        }\n    }\n    async isValidProposalId(e) {\n        if (!Xp(e)) {\n            const { message: t } = Y(\"MISSING_OR_INVALID\", `proposal id should be a number: ${e}`);\n            throw new Error(t);\n        }\n        if (!this.client.proposal.keys.includes(e)) {\n            const { message: t } = Y(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${e}`);\n            throw new Error(t);\n        }\n        if (ai(this.client.proposal.get(e).expiry)) {\n            await this.deleteProposal(e);\n            const { message: t } = Y(\"EXPIRED\", `proposal id: ${e}`);\n            throw new Error(t);\n        }\n    }\n}, vm = class extends dr {\n    constructor(e, t){\n        super(e, t, cm, Sn), this.core = e, this.logger = t;\n    }\n}, _m = class extends dr {\n    constructor(e, t){\n        super(e, t, um, Sn), this.core = e, this.logger = t;\n    }\n}, Em = class extends dr {\n    constructor(e, t){\n        super(e, t, dm, Sn, (s)=>s.id), this.core = e, this.logger = t;\n    }\n}, Sm = class ph extends El {\n    constructor(e){\n        super(e), this.protocol = lh, this.version = dh, this.name = Rr.name, this.events = new We.EventEmitter(), this.on = (s, r)=>this.events.on(s, r), this.once = (s, r)=>this.events.once(s, r), this.off = (s, r)=>this.events.off(s, r), this.removeListener = (s, r)=>this.events.removeListener(s, r), this.removeAllListeners = (s)=>this.events.removeAllListeners(s), this.connect = async (s)=>{\n            try {\n                return await this.engine.connect(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.pair = async (s)=>{\n            try {\n                return await this.engine.pair(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.approve = async (s)=>{\n            try {\n                return await this.engine.approve(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.reject = async (s)=>{\n            try {\n                return await this.engine.reject(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.update = async (s)=>{\n            try {\n                return await this.engine.update(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.extend = async (s)=>{\n            try {\n                return await this.engine.extend(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.request = async (s)=>{\n            try {\n                return await this.engine.request(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.respond = async (s)=>{\n            try {\n                return await this.engine.respond(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.ping = async (s)=>{\n            try {\n                return await this.engine.ping(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.emit = async (s)=>{\n            try {\n                return await this.engine.emit(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.disconnect = async (s)=>{\n            try {\n                return await this.engine.disconnect(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.find = (s)=>{\n            try {\n                return this.engine.find(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.getPendingSessionRequests = ()=>{\n            try {\n                return this.engine.getPendingSessionRequests();\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.name = e?.name || Rr.name, this.metadata = e?.metadata || gp();\n        const t = typeof e?.logger < \"u\" && typeof e?.logger != \"string\" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({\n            level: e?.logger || Rr.logger\n        }));\n        this.core = e?.core || new am(e), this.logger = ee.generateChildLogger(t, this.name), this.session = new _m(this.core, this.logger), this.proposal = new vm(this.core, this.logger), this.pendingRequest = new Em(this.core, this.logger), this.engine = new wm(this);\n    }\n    static async init(e) {\n        const t = new ph(e);\n        return await t.initialize(), t;\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get pairing() {\n        return this.core.pairing.pairings;\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.engine.init(), this.core.verify.init({\n                verifyUrl: this.metadata.verifyUrl\n            }), this.logger.info(\"SignClient Initialization Success\");\n        } catch (e) {\n            throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(e.message), e;\n        }\n    }\n};\nconst Im = ()=>{\n    const e = hn()?.os?.toLowerCase();\n    return e?.includes(\"android\") ? \"android\" : e?.toLowerCase().includes(\"ios\") || e?.toLowerCase().includes(\"mac\") && navigator.maxTouchPoints > 1 ? \"ios\" : \"desktop\";\n}, Us = Im(), Dm = {\n    position: \"fixed\",\n    top: \"0\",\n    left: \"0\",\n    right: \"0\",\n    bottom: \"0\",\n    backgroundColor: \"rgba(0,0,0,0.8)\",\n    backdropFilter: \"blur(10px)\",\n    zIndex: \"9999\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    color: \"white\",\n    fontWeight: \"500\",\n    fontFamily: \"'Barlow', sans-serif\"\n}, xm = {\n    width: \"840px\",\n    height: \"540px\",\n    zIndex: \"99999\",\n    backgroundColor: \"white\",\n    border: \"none\",\n    outline: \"none\",\n    borderRadius: \"40px\",\n    boxShadow: \"0px 4px 40px 0px rgb(0 0 0), 0px 4px 8px 0px rgb(0 0 0 / 25%)\",\n    position: \"fixed\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%,-50%)\"\n}, Om = `\n  <div id=\"argent-mobile-modal-container\" style=\"position: relative\">\n    <iframe class=\"argent-iframe\" allow=\"clipboard-write\"></iframe>\n    <div class=\"argent-close-button\" style=\"position: absolute; top: 24px; right: 24px; cursor: pointer;\">\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#F5F3F0\"/>\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M22.2462 9.75382C22.7018 10.2094 22.7018 10.9481 22.2462 11.4037L17.6499 16L22.2462 20.5963C22.7018 21.0519 22.7018 21.7906 22.2462 22.2462C21.7905 22.7018 21.0519 22.7018 20.5962 22.2462L16 17.6499L11.4039 22.246C10.9482 22.7017 10.2096 22.7017 9.75394 22.246C9.29833 21.7904 9.29833 21.0517 9.75394 20.5961L14.3501 16L9.75394 11.4039C9.29833 10.9483 9.29833 10.2096 9.75394 9.75396C10.2096 9.29835 10.9482 9.29835 11.4039 9.75396L16 14.3501L20.5962 9.75382C21.0519 9.29821 21.7905 9.29821 22.2462 9.75382Z\" fill=\"#333332\"/>\n      </svg>\n    </div>\n  </div>\n`;\nclass Nm {\n    constructor(){\n        we(this, \"bridgeUrl\", \"https://login.argent.xyz\");\n        we(this, \"mobileUrl\", \"argent://\");\n        we(this, \"type\", \"overlay\");\n        we(this, \"wcUri\");\n        we(this, \"overlay\");\n        we(this, \"popupWindow\");\n        we(this, \"closingTimeout\");\n        we(this, \"close\", ()=>{\n            this.overlay?.remove(), this.popupWindow?.close(), this.overlay = void 0, this.popupWindow = void 0;\n        });\n    }\n    showConnectionModal(e) {\n        const t = encodeURIComponent(e), s = encodeURIComponent(window.location.href);\n        this.showModal({\n            desktop: `${this.bridgeUrl}?wc=${t}&device=desktop`,\n            ios: `${this.mobileUrl}app/wc?uri=${t}&href=${s}&device=mobile`,\n            android: `${this.mobileUrl}app/wc?uri=${t}&href=${s}&device=mobile`\n        });\n    }\n    showApprovalModal(e) {\n        if (Us === \"desktop\") {\n            this.showModal({\n                desktop: `${this.bridgeUrl}?action=sign`,\n                ios: \"\",\n                android: \"\"\n            });\n            return;\n        }\n        const t = encodeURIComponent(window.location.href);\n        this.showModal({\n            desktop: `${this.bridgeUrl}?action=sign&device=desktop`,\n            ios: `${this.mobileUrl}app/wc/request?href=${t}&device=mobile`,\n            android: `${this.mobileUrl}app/wc/request?href=${t}&device=mobile`\n        });\n    }\n    closeModal(e) {\n        e ? (this.overlay?.querySelector(\"iframe\")?.contentWindow?.postMessage(\"argent-login.success\", \"*\"), this.popupWindow?.postMessage(\"argent-login.success\", \"*\"), this.closingTimeout = setTimeout(this.close, 3400)) : this.close();\n    }\n    showModal(e) {\n        if (clearTimeout(this.closingTimeout), (this.overlay || this.popupWindow) && this.close(), Us === \"android\" || Us === \"ios\") {\n            const n = document.createElement(\"button\");\n            n.style.display = \"none\", n.addEventListener(\"click\", ()=>{\n                window.location.href = e[Us];\n            }), n.click();\n            return;\n        }\n        if (this.type === \"window\") {\n            const n = \"menubar=no,location=no,resizable=no,scrollbars=no,status=no,width=840,height=540\";\n            this.popupWindow = window.open(e.desktop, \"_blank\", n) || void 0;\n            return;\n        }\n        const t = document.createElement(\"div\");\n        t.innerHTML = Om, t.id = \"argent-mobile-modal-overlay\";\n        for (const [n, o] of Object.entries(Dm))t.style[n] = o;\n        document.body.appendChild(t), t.addEventListener(\"click\", ()=>this.closeModal()), this.overlay = t;\n        const s = t.querySelector(\"iframe\");\n        s.setAttribute(\"src\", e.desktop);\n        for (const [n, o] of Object.entries(xm))s.style[n] = o;\n        t.querySelector(\".argent-close-button\").addEventListener(\"click\", ()=>this.closeModal());\n    }\n}\nconst kt = new Nm(), Xs = starknet__WEBPACK_IMPORTED_MODULE_1__.constants.NetworkName, Pm = async ({ projectId: i, chainId: e, name: t, description: s, rpcUrl: r, bridgeUrl: n = Rm(e), mobileUrl: o = Cm(e), modalType: c = \"overlay\", url: u, icons: d, walletConnect: p, provider: b }, x)=>{\n    if (!n) throw new Error(\"bridgeUrl is required\");\n    if (!o) throw new Error(\"mobileUrl is required\");\n    kt.bridgeUrl = n, kt.mobileUrl = o, kt.type = c;\n    const O = {\n        projectId: i,\n        metadata: {\n            name: t ?? \"Unknown dapp\",\n            description: s ?? \"Unknown dapp description\",\n            url: u ?? \"#\",\n            icons: d ?? [],\n            ...p?.metadata\n        }\n    }, _ = await Sm.init(O), C = new x({\n        client: _,\n        chainId: e,\n        rpcUrl: r,\n        provider: b\n    });\n    _.on(\"session_event\", (F)=>{}), _.on(\"session_update\", ({ topic: F, params: K })=>{\n        const { namespaces: I } = K, D = _.session.get(F);\n        C.updateSession({\n            ...D,\n            namespaces: I\n        });\n    }), _.on(\"session_delete\", ()=>{});\n    try {\n        const F = _.session.getAll().find(C.isValidSession);\n        if (F) return C.updateSession(F), C;\n        const K = {\n            requiredNamespaces: C.getRequiredNamespaces()\n        };\n        (0,_index_70f373da_js__WEBPACK_IMPORTED_MODULE_2__.r)(), await new Promise((y)=>setTimeout(y, 200));\n        const { uri: I, approval: D } = await _.connect(K);\n        if (I) {\n            kt.showConnectionModal(I), kt.wcUri = I;\n            const y = await D();\n            C.updateSession(y), kt.closeModal(\"animateSuccess\");\n        }\n        return C;\n    } catch  {\n        return console.error(\"@argent/login::error\"), kt.closeModal(), null;\n    }\n}, Rm = (i)=>{\n    if (!i) throw new Error(`Unknown or unsupported chainId (${i}), either specify a supported chain or set bridgeUrl.`);\n    const e = parseInt(`${i}`);\n    if (String(i).startsWith(Xs.SN_SEPOLIA) || e === 11155111) return \"https://login.hydrogen.argent47.net\";\n    if (String(i).startsWith(Xs.SN_MAIN) || e === 1) return \"https://login.argent.xyz\";\n}, Cm = (i)=>{\n    if (!i) throw new Error(`Unknown or unsupported chainId (${i}), either specify a supported chain or set mobileUrl.`);\n    const e = parseInt(`${i}`);\n    if (String(i).startsWith(Xs.SN_SEPOLIA) || e === 11155111) return \"argent-dev://\";\n    if (String(i).startsWith(Xs.SN_MAIN) || e === 1) return \"argent://\";\n};\nclass Am extends Nt {\n    constructor(e){\n        super(), this.opts = e, this.protocol = \"wc\", this.version = 2;\n    }\n}\nclass Tm extends Nt {\n    constructor(e, t){\n        super(), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map();\n    }\n}\nclass $m {\n    constructor(e, t){\n        this.logger = e, this.core = t;\n    }\n}\nclass Fm extends Nt {\n    constructor(e, t){\n        super(), this.relayer = e, this.logger = t;\n    }\n}\nlet Um = class extends Nt {\n    constructor(e){\n        super();\n    }\n}, Lm = class {\n    constructor(e, t, s, r){\n        this.core = e, this.logger = t, this.name = s;\n    }\n};\nclass Mm extends Nt {\n    constructor(e, t){\n        super(), this.relayer = e, this.logger = t;\n    }\n}\nclass qm extends Nt {\n    constructor(e, t){\n        super(), this.core = e, this.logger = t;\n    }\n}\nclass jm {\n    constructor(e, t){\n        this.projectId = e, this.logger = t;\n    }\n}\nlet zm = class {\n    constructor(e){\n        this.opts = e, this.protocol = \"wc\", this.version = 2;\n    }\n}, Km = class {\n    constructor(e){\n        this.client = e;\n    }\n};\nconst gh = \":\";\nfunction Vm(i) {\n    const { namespace: e, reference: t } = i;\n    return [\n        e,\n        t\n    ].join(gh);\n}\nfunction Bm(i) {\n    const [e, t, s] = i.split(gh);\n    return {\n        namespace: e,\n        reference: t,\n        address: s\n    };\n}\nfunction km(i, e) {\n    const t = [];\n    return i.forEach((s)=>{\n        const r = e(s);\n        t.includes(r) || t.push(r);\n    }), t;\n}\nfunction Hm(i) {\n    const { namespace: e, reference: t } = Bm(i);\n    return Vm({\n        namespace: e,\n        reference: t\n    });\n}\nfunction Gm(i) {\n    return km(i, Hm);\n}\nfunction Wm(i, e = []) {\n    const t = [];\n    return Object.keys(i).forEach((s)=>{\n        if (e.length && !e.includes(s)) return;\n        const r = i[s];\n        t.push(...r.accounts);\n    }), t;\n}\nfunction Ym(i, e = []) {\n    const t = [];\n    return Object.keys(i).forEach((s)=>{\n        if (e.length && !e.includes(s)) return;\n        const r = i[s];\n        t.push(...Gm(r.accounts));\n    }), t;\n}\nfunction Jm(i, e = []) {\n    const t = [];\n    return Object.keys(i).forEach((s)=>{\n        if (e.length && !e.includes(s)) return;\n        const r = i[s];\n        t.push(...In(s, r));\n    }), t;\n}\nfunction In(i, e) {\n    return i.includes(\":\") ? [\n        i\n    ] : e.chains || [];\n}\nconst yh = \"base10\", _t = \"base16\", Jr = \"base64pad\", Dn = \"utf8\", mh = 0, Ni = 1, Qm = 0, ga = 1, Qr = 12, xn = 32;\nfunction Xm() {\n    const i = ms.generateKeyPair();\n    return {\n        privateKey: Ne(i.secretKey, _t),\n        publicKey: Ne(i.publicKey, _t)\n    };\n}\nfunction Xr() {\n    const i = li.randomBytes(xn);\n    return Ne(i, _t);\n}\nfunction Zm(i, e) {\n    const t = ms.sharedKey(Ce(i, _t), Ce(e, _t)), s = new Rc(Si.SHA256, t).expand(xn);\n    return Ne(s, _t);\n}\nfunction eb(i) {\n    const e = Si.hash(Ce(i, _t));\n    return Ne(e, _t);\n}\nfunction Ui(i) {\n    const e = Si.hash(Ce(i, Dn));\n    return Ne(e, _t);\n}\nfunction tb(i) {\n    return Ce(`${i}`, yh);\n}\nfunction Is(i) {\n    return Number(Ne(i, yh));\n}\nfunction ib(i) {\n    const e = tb(typeof i.type < \"u\" ? i.type : mh);\n    if (Is(e) === Ni && typeof i.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n    const t = typeof i.senderPublicKey < \"u\" ? Ce(i.senderPublicKey, _t) : void 0, s = typeof i.iv < \"u\" ? Ce(i.iv, _t) : li.randomBytes(Qr), r = new gs.ChaCha20Poly1305(Ce(i.symKey, _t)).seal(s, Ce(i.message, Dn));\n    return rb({\n        type: e,\n        sealed: r,\n        iv: s,\n        senderPublicKey: t\n    });\n}\nfunction sb(i) {\n    const e = new gs.ChaCha20Poly1305(Ce(i.symKey, _t)), { sealed: t, iv: s } = Zs(i.encoded), r = e.open(s, t);\n    if (r === null) throw new Error(\"Failed to decrypt\");\n    return Ne(r, Dn);\n}\nfunction rb(i) {\n    if (Is(i.type) === Ni) {\n        if (typeof i.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n        return Ne(ls([\n            i.type,\n            i.senderPublicKey,\n            i.iv,\n            i.sealed\n        ]), Jr);\n    }\n    return Ne(ls([\n        i.type,\n        i.iv,\n        i.sealed\n    ]), Jr);\n}\nfunction Zs(i) {\n    const e = Ce(i, Jr), t = e.slice(Qm, ga), s = ga;\n    if (Is(t) === Ni) {\n        const c = s + xn, u = c + Qr, d = e.slice(s, c), p = e.slice(c, u), b = e.slice(u);\n        return {\n            type: t,\n            sealed: b,\n            iv: p,\n            senderPublicKey: d\n        };\n    }\n    const r = s + Qr, n = e.slice(s, r), o = e.slice(r);\n    return {\n        type: t,\n        sealed: o,\n        iv: n\n    };\n}\nfunction nb(i, e) {\n    const t = Zs(i);\n    return bh({\n        type: Is(t.type),\n        senderPublicKey: typeof t.senderPublicKey < \"u\" ? Ne(t.senderPublicKey, _t) : void 0,\n        receiverPublicKey: e?.receiverPublicKey\n    });\n}\nfunction bh(i) {\n    const e = i?.type || mh;\n    if (e === Ni) {\n        if (typeof i?.senderPublicKey > \"u\") throw new Error(\"missing sender public key\");\n        if (typeof i?.receiverPublicKey > \"u\") throw new Error(\"missing receiver public key\");\n    }\n    return {\n        type: e,\n        senderPublicKey: i?.senderPublicKey,\n        receiverPublicKey: i?.receiverPublicKey\n    };\n}\nfunction ya(i) {\n    return i.type === Ni && typeof i.senderPublicKey == \"string\" && typeof i.receiverPublicKey == \"string\";\n}\nvar ob = Object.defineProperty, ma = Object.getOwnPropertySymbols, ab = Object.prototype.hasOwnProperty, cb = Object.prototype.propertyIsEnumerable, ba = (i, e, t)=>e in i ? ob(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, wa = (i, e)=>{\n    for(var t in e || (e = {}))ab.call(e, t) && ba(i, t, e[t]);\n    if (ma) for (var t of ma(e))cb.call(e, t) && ba(i, t, e[t]);\n    return i;\n};\nconst hb = \"ReactNative\", as = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\"\n}, ub = \"js\";\nfunction On() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction wh() {\n    return !un() && !!bs() && navigator.product === hb;\n}\nfunction Nn() {\n    return !On() && !!bs();\n}\nfunction lb() {\n    return wh() ? as.reactNative : On() ? as.node : Nn() ? as.browser : as.unknown;\n}\nfunction db(i, e) {\n    let t = ii.parse(i);\n    return t = wa(wa({}, t), e), i = ii.stringify(t), i;\n}\nfunction fb() {\n    return fn() || {\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        icons: [\n            \"\"\n        ]\n    };\n}\nfunction pb() {\n    const i = hn();\n    if (i === null) return \"unknown\";\n    const e = i.os ? i.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n    return i.type === \"browser\" ? [\n        e,\n        i.name,\n        i.version\n    ].join(\"-\") : [\n        e,\n        i.version\n    ].join(\"-\");\n}\nfunction gb() {\n    var i;\n    const e = lb();\n    return e === as.browser ? [\n        e,\n        ((i = ln()) == null ? void 0 : i.host) || \"unknown\"\n    ].join(\":\") : e;\n}\nfunction yb(i, e, t) {\n    const s = pb(), r = gb();\n    return [\n        [\n            i,\n            e\n        ].join(\"-\"),\n        [\n            ub,\n            t\n        ].join(\"-\"),\n        s,\n        r\n    ].join(\"/\");\n}\nfunction mb({ protocol: i, version: e, relayUrl: t, sdkVersion: s, auth: r, projectId: n, useOnCloseEvent: o }) {\n    const c = t.split(\"?\"), u = yb(i, e, s), d = {\n        auth: r,\n        ua: u,\n        projectId: n,\n        useOnCloseEvent: o || void 0\n    }, p = db(c[1] || \"\", d);\n    return c[0] + \"?\" + p;\n}\nfunction Ei(i, e) {\n    return i.filter((t)=>e.includes(t)).length === i.length;\n}\nfunction vh(i) {\n    return Object.fromEntries(i.entries());\n}\nfunction _h(i) {\n    return new Map(Object.entries(i));\n}\nfunction Ti(i = V.FIVE_MINUTES, e) {\n    const t = V.toMiliseconds(i || V.FIVE_MINUTES);\n    let s, r, n;\n    return {\n        resolve: (o)=>{\n            n && s && (clearTimeout(n), s(o));\n        },\n        reject: (o)=>{\n            n && r && (clearTimeout(n), r(o));\n        },\n        done: ()=>new Promise((o, c)=>{\n                n = setTimeout(()=>{\n                    c(new Error(e));\n                }, t), s = o, r = c;\n            })\n    };\n}\nfunction er(i, e, t) {\n    return new Promise(async (s, r)=>{\n        const n = setTimeout(()=>r(new Error(t)), e);\n        try {\n            const o = await i;\n            s(o);\n        } catch (o) {\n            r(o);\n        }\n        clearTimeout(n);\n    });\n}\nfunction Eh(i, e) {\n    if (typeof e == \"string\" && e.startsWith(`${i}:`)) return e;\n    if (i.toLowerCase() === \"topic\") {\n        if (typeof e != \"string\") throw new Error('Value must be \"string\" for expirer target type: topic');\n        return `topic:${e}`;\n    } else if (i.toLowerCase() === \"id\") {\n        if (typeof e != \"number\") throw new Error('Value must be \"number\" for expirer target type: id');\n        return `id:${e}`;\n    }\n    throw new Error(`Unknown expirer target type: ${i}`);\n}\nfunction bb(i) {\n    return Eh(\"topic\", i);\n}\nfunction wb(i) {\n    return Eh(\"id\", i);\n}\nfunction Sh(i) {\n    const [e, t] = i.split(\":\"), s = {\n        id: void 0,\n        topic: void 0\n    };\n    if (e === \"topic\" && typeof t == \"string\") s.topic = t;\n    else if (e === \"id\" && Number.isInteger(Number(t))) s.id = Number(t);\n    else throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${t}`);\n    return s;\n}\nfunction Ht(i, e) {\n    return V.fromMiliseconds((e || Date.now()) + V.toMiliseconds(i));\n}\nfunction ci(i) {\n    return Date.now() >= V.toMiliseconds(i);\n}\nfunction ke(i, e) {\n    return `${i}${e ? `:${e}` : \"\"}`;\n}\nconst vb = \"irn\";\nfunction Zr(i) {\n    return i?.relay || {\n        protocol: vb\n    };\n}\nfunction Vs(i) {\n    const e = Ac[i];\n    if (typeof e > \"u\") throw new Error(`Relay Protocol not supported: ${i}`);\n    return e;\n}\nvar _b = Object.defineProperty, va = Object.getOwnPropertySymbols, Eb = Object.prototype.hasOwnProperty, Sb = Object.prototype.propertyIsEnumerable, _a = (i, e, t)=>e in i ? _b(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, Ib = (i, e)=>{\n    for(var t in e || (e = {}))Eb.call(e, t) && _a(i, t, e[t]);\n    if (va) for (var t of va(e))Sb.call(e, t) && _a(i, t, e[t]);\n    return i;\n};\nfunction Db(i, e = \"-\") {\n    const t = {}, s = \"relay\" + e;\n    return Object.keys(i).forEach((r)=>{\n        if (r.startsWith(s)) {\n            const n = r.replace(s, \"\"), o = i[r];\n            t[n] = o;\n        }\n    }), t;\n}\nfunction xb(i) {\n    const e = i.indexOf(\":\"), t = i.indexOf(\"?\") !== -1 ? i.indexOf(\"?\") : void 0, s = i.substring(0, e), r = i.substring(e + 1, t).split(\"@\"), n = typeof t < \"u\" ? i.substring(t) : \"\", o = ii.parse(n);\n    return {\n        protocol: s,\n        topic: Ob(r[0]),\n        version: parseInt(r[1], 10),\n        symKey: o.symKey,\n        relay: Db(o)\n    };\n}\nfunction Ob(i) {\n    return i.startsWith(\"//\") ? i.substring(2) : i;\n}\nfunction Nb(i, e = \"-\") {\n    const t = \"relay\", s = {};\n    return Object.keys(i).forEach((r)=>{\n        const n = t + e + r;\n        i[r] && (s[n] = i[r]);\n    }), s;\n}\nfunction Pb(i) {\n    return `${i.protocol}:${i.topic}@${i.version}?` + ii.stringify(Ib({\n        symKey: i.symKey\n    }, Nb(i.relay)));\n}\nfunction zi(i) {\n    const e = [];\n    return i.forEach((t)=>{\n        const [s, r] = t.split(\":\");\n        e.push(`${s}:${r}`);\n    }), e;\n}\nfunction Rb(i) {\n    const e = [];\n    return Object.values(i).forEach((t)=>{\n        e.push(...zi(t.accounts));\n    }), e;\n}\nfunction Cb(i, e) {\n    const t = [];\n    return Object.values(i).forEach((s)=>{\n        zi(s.accounts).includes(e) && t.push(...s.methods);\n    }), t;\n}\nfunction Ab(i, e) {\n    const t = [];\n    return Object.values(i).forEach((s)=>{\n        zi(s.accounts).includes(e) && t.push(...s.events);\n    }), t;\n}\nfunction Tb(i, e) {\n    const t = Bs(i, e);\n    if (t) throw new Error(t.message);\n    const s = {};\n    for (const [r, n] of Object.entries(i))s[r] = {\n        methods: n.methods,\n        events: n.events,\n        chains: n.accounts.map((o)=>`${o.split(\":\")[0]}:${o.split(\":\")[1]}`)\n    };\n    return s;\n}\nconst $b = {\n    INVALID_METHOD: {\n        message: \"Invalid method.\",\n        code: 1001\n    },\n    INVALID_EVENT: {\n        message: \"Invalid event.\",\n        code: 1002\n    },\n    INVALID_UPDATE_REQUEST: {\n        message: \"Invalid update request.\",\n        code: 1003\n    },\n    INVALID_EXTEND_REQUEST: {\n        message: \"Invalid extend request.\",\n        code: 1004\n    },\n    INVALID_SESSION_SETTLE_REQUEST: {\n        message: \"Invalid session settle request.\",\n        code: 1005\n    },\n    UNAUTHORIZED_METHOD: {\n        message: \"Unauthorized method.\",\n        code: 3001\n    },\n    UNAUTHORIZED_EVENT: {\n        message: \"Unauthorized event.\",\n        code: 3002\n    },\n    UNAUTHORIZED_UPDATE_REQUEST: {\n        message: \"Unauthorized update request.\",\n        code: 3003\n    },\n    UNAUTHORIZED_EXTEND_REQUEST: {\n        message: \"Unauthorized extend request.\",\n        code: 3004\n    },\n    USER_REJECTED: {\n        message: \"User rejected.\",\n        code: 5e3\n    },\n    USER_REJECTED_CHAINS: {\n        message: \"User rejected chains.\",\n        code: 5001\n    },\n    USER_REJECTED_METHODS: {\n        message: \"User rejected methods.\",\n        code: 5002\n    },\n    USER_REJECTED_EVENTS: {\n        message: \"User rejected events.\",\n        code: 5003\n    },\n    UNSUPPORTED_CHAINS: {\n        message: \"Unsupported chains.\",\n        code: 5100\n    },\n    UNSUPPORTED_METHODS: {\n        message: \"Unsupported methods.\",\n        code: 5101\n    },\n    UNSUPPORTED_EVENTS: {\n        message: \"Unsupported events.\",\n        code: 5102\n    },\n    UNSUPPORTED_ACCOUNTS: {\n        message: \"Unsupported accounts.\",\n        code: 5103\n    },\n    UNSUPPORTED_NAMESPACE_KEY: {\n        message: \"Unsupported namespace key.\",\n        code: 5104\n    },\n    USER_DISCONNECTED: {\n        message: \"User disconnected.\",\n        code: 6e3\n    },\n    SESSION_SETTLEMENT_FAILED: {\n        message: \"Session settlement failed.\",\n        code: 7e3\n    },\n    WC_METHOD_UNSUPPORTED: {\n        message: \"Unsupported wc_ method.\",\n        code: 10001\n    }\n}, Fb = {\n    NOT_INITIALIZED: {\n        message: \"Not initialized.\",\n        code: 1\n    },\n    NO_MATCHING_KEY: {\n        message: \"No matching key.\",\n        code: 2\n    },\n    RESTORE_WILL_OVERRIDE: {\n        message: \"Restore will override.\",\n        code: 3\n    },\n    RESUBSCRIBED: {\n        message: \"Resubscribed.\",\n        code: 4\n    },\n    MISSING_OR_INVALID: {\n        message: \"Missing or invalid.\",\n        code: 5\n    },\n    EXPIRED: {\n        message: \"Expired.\",\n        code: 6\n    },\n    UNKNOWN_TYPE: {\n        message: \"Unknown type.\",\n        code: 7\n    },\n    MISMATCHED_TOPIC: {\n        message: \"Mismatched topic.\",\n        code: 8\n    },\n    NON_CONFORMING_NAMESPACES: {\n        message: \"Non conforming namespaces.\",\n        code: 9\n    }\n};\nfunction J(i, e) {\n    const { message: t, code: s } = Fb[i];\n    return {\n        message: e ? `${t} ${e}` : t,\n        code: s\n    };\n}\nfunction Je(i, e) {\n    const { message: t, code: s } = $b[i];\n    return {\n        message: e ? `${t} ${e}` : t,\n        code: s\n    };\n}\nfunction Ds(i, e) {\n    return Array.isArray(i) ? typeof e < \"u\" && i.length ? i.every(e) : !0 : !1;\n}\nfunction us(i) {\n    return Object.getPrototypeOf(i) === Object.prototype && Object.keys(i).length;\n}\nfunction wt(i) {\n    return typeof i > \"u\";\n}\nfunction at(i, e) {\n    return e && wt(i) ? !0 : typeof i == \"string\" && !!i.trim().length;\n}\nfunction Pn(i, e) {\n    return e && wt(i) ? !0 : typeof i == \"number\" && !isNaN(i);\n}\nfunction Ub(i, e) {\n    const { requiredNamespaces: t } = e, s = Object.keys(i.namespaces), r = Object.keys(t);\n    let n = !0;\n    return Ei(r, s) ? (s.forEach((o)=>{\n        const { accounts: c, methods: u, events: d } = i.namespaces[o], p = zi(c), b = t[o];\n        (!Ei(In(o, b), p) || !Ei(b.methods, u) || !Ei(b.events, d)) && (n = !1);\n    }), n) : !1;\n}\nfunction Rn(i) {\n    return at(i, !1) && i.includes(\":\") ? i.split(\":\").length === 2 : !1;\n}\nfunction Lb(i) {\n    if (at(i, !1) && i.includes(\":\")) {\n        const e = i.split(\":\");\n        if (e.length === 3) {\n            const t = e[0] + \":\" + e[1];\n            return !!e[2] && Rn(t);\n        }\n    }\n    return !1;\n}\nfunction Mb(i) {\n    if (at(i, !1)) try {\n        return typeof new URL(i) < \"u\";\n    } catch  {\n        return !1;\n    }\n    return !1;\n}\nfunction qb(i) {\n    var e;\n    return (e = i?.proposer) == null ? void 0 : e.publicKey;\n}\nfunction jb(i) {\n    return i?.topic;\n}\nfunction zb(i, e) {\n    let t = null;\n    return at(i?.publicKey, !1) || (t = J(\"MISSING_OR_INVALID\", `${e} controller public key should be a string`)), t;\n}\nfunction Ea(i) {\n    let e = !0;\n    return Ds(i) ? i.length && (e = i.every((t)=>at(t, !1))) : e = !1, e;\n}\nfunction Kb(i, e, t) {\n    let s = null;\n    return Ds(e) ? e.forEach((r)=>{\n        s || (!Rn(r) || !r.includes(i)) && (s = Je(\"UNSUPPORTED_CHAINS\", `${t}, chain ${r} should be a string and conform to \"namespace:chainId\" format`));\n    }) : s = Je(\"UNSUPPORTED_CHAINS\", `${t}, chains ${e} should be an array of strings conforming to \"namespace:chainId\" format`), s;\n}\nfunction Vb(i, e) {\n    let t = null;\n    return Object.entries(i).forEach(([s, r])=>{\n        if (t) return;\n        const n = Kb(s, In(s, r), `${e} requiredNamespace`);\n        n && (t = n);\n    }), t;\n}\nfunction Bb(i, e) {\n    let t = null;\n    return Ds(i) ? i.forEach((s)=>{\n        t || Lb(s) || (t = Je(\"UNSUPPORTED_ACCOUNTS\", `${e}, account ${s} should be a string and conform to \"namespace:chainId:address\" format`));\n    }) : t = Je(\"UNSUPPORTED_ACCOUNTS\", `${e}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`), t;\n}\nfunction kb(i, e) {\n    let t = null;\n    return Object.values(i).forEach((s)=>{\n        if (t) return;\n        const r = Bb(s?.accounts, `${e} namespace`);\n        r && (t = r);\n    }), t;\n}\nfunction Hb(i, e) {\n    let t = null;\n    return Ea(i?.methods) ? Ea(i?.events) || (t = Je(\"UNSUPPORTED_EVENTS\", `${e}, events should be an array of strings or empty array for no events`)) : t = Je(\"UNSUPPORTED_METHODS\", `${e}, methods should be an array of strings or empty array for no methods`), t;\n}\nfunction Ih(i, e) {\n    let t = null;\n    return Object.values(i).forEach((s)=>{\n        if (t) return;\n        const r = Hb(s, `${e}, namespace`);\n        r && (t = r);\n    }), t;\n}\nfunction Gb(i, e, t) {\n    let s = null;\n    if (i && us(i)) {\n        const r = Ih(i, e);\n        r && (s = r);\n        const n = Vb(i, e);\n        n && (s = n);\n    } else s = J(\"MISSING_OR_INVALID\", `${e}, ${t} should be an object with data`);\n    return s;\n}\nfunction Bs(i, e) {\n    let t = null;\n    if (i && us(i)) {\n        const s = Ih(i, e);\n        s && (t = s);\n        const r = kb(i, e);\n        r && (t = r);\n    } else t = J(\"MISSING_OR_INVALID\", `${e}, namespaces should be an object with data`);\n    return t;\n}\nfunction Dh(i) {\n    return at(i.protocol, !0);\n}\nfunction Wb(i, e) {\n    let t = !1;\n    return e && !i ? t = !0 : i && Ds(i) && i.length && i.forEach((s)=>{\n        t = Dh(s);\n    }), t;\n}\nfunction Yb(i) {\n    return typeof i == \"number\";\n}\nfunction It(i) {\n    return typeof i < \"u\" && typeof i !== null;\n}\nfunction Jb(i) {\n    return !(!i || typeof i != \"object\" || !i.code || !Pn(i.code, !1) || !i.message || !at(i.message, !1));\n}\nfunction Qb(i) {\n    return !(wt(i) || !at(i.method, !1));\n}\nfunction Xb(i) {\n    return !(wt(i) || wt(i.result) && wt(i.error) || !Pn(i.id, !1) || !at(i.jsonrpc, !1));\n}\nfunction Zb(i) {\n    return !(wt(i) || !at(i.name, !1));\n}\nfunction Sa(i, e) {\n    return !(!Rn(e) || !Rb(i).includes(e));\n}\nfunction ew(i, e, t) {\n    return at(t, !1) ? Cb(i, e).includes(t) : !1;\n}\nfunction tw(i, e, t) {\n    return at(t, !1) ? Ab(i, e).includes(t) : !1;\n}\nfunction Ia(i, e, t) {\n    let s = null;\n    const r = iw(i), n = sw(e), o = Object.keys(r), c = Object.keys(n), u = Da(Object.keys(i)), d = Da(Object.keys(e)), p = u.filter((b)=>!d.includes(b));\n    return p.length && (s = J(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces keys don't satisfy requiredNamespaces.\n      Required: ${p.toString()}\n      Received: ${Object.keys(e).toString()}`)), Ei(o, c) || (s = J(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces chains don't satisfy required namespaces.\n      Required: ${o.toString()}\n      Approved: ${c.toString()}`)), Object.keys(e).forEach((b)=>{\n        if (!b.includes(\":\") || s) return;\n        const x = zi(e[b].accounts);\n        x.includes(b) || (s = J(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces accounts don't satisfy namespace accounts for ${b}\n        Required: ${b}\n        Approved: ${x.toString()}`));\n    }), o.forEach((b)=>{\n        s || (Ei(r[b].methods, n[b].methods) ? Ei(r[b].events, n[b].events) || (s = J(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces events don't satisfy namespace events for ${b}`)) : s = J(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces methods don't satisfy namespace methods for ${b}`));\n    }), s;\n}\nfunction iw(i) {\n    const e = {};\n    return Object.keys(i).forEach((t)=>{\n        var s;\n        t.includes(\":\") ? e[t] = i[t] : (s = i[t].chains) == null || s.forEach((r)=>{\n            e[r] = {\n                methods: i[t].methods,\n                events: i[t].events\n            };\n        });\n    }), e;\n}\nfunction Da(i) {\n    return [\n        ...new Set(i.map((e)=>e.includes(\":\") ? e.split(\":\")[0] : e))\n    ];\n}\nfunction sw(i) {\n    const e = {};\n    return Object.keys(i).forEach((t)=>{\n        t.includes(\":\") ? e[t] = i[t] : zi(i[t].accounts)?.forEach((r)=>{\n            e[r] = {\n                accounts: i[t].accounts.filter((n)=>n.includes(`${r}:`)),\n                methods: i[t].methods,\n                events: i[t].events\n            };\n        });\n    }), e;\n}\nfunction rw(i, e) {\n    return Pn(i, !1) && i <= e.max && i >= e.min;\n}\nfunction nw(i, e) {\n    if (i.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var t = new Uint8Array(256), s = 0; s < t.length; s++)t[s] = 255;\n    for(var r = 0; r < i.length; r++){\n        var n = i.charAt(r), o = n.charCodeAt(0);\n        if (t[o] !== 255) throw new TypeError(n + \" is ambiguous\");\n        t[o] = r;\n    }\n    var c = i.length, u = i.charAt(0), d = Math.log(c) / Math.log(256), p = Math.log(256) / Math.log(c);\n    function b(_) {\n        if (_ instanceof Uint8Array || (ArrayBuffer.isView(_) ? _ = new Uint8Array(_.buffer, _.byteOffset, _.byteLength) : Array.isArray(_) && (_ = Uint8Array.from(_))), !(_ instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (_.length === 0) return \"\";\n        for(var C = 0, F = 0, K = 0, I = _.length; K !== I && _[K] === 0;)K++, C++;\n        for(var D = (I - K) * p + 1 >>> 0, y = new Uint8Array(D); K !== I;){\n            for(var w = _[K], f = 0, a = D - 1; (w !== 0 || f < F) && a !== -1; a--, f++)w += 256 * y[a] >>> 0, y[a] = w % c >>> 0, w = w / c >>> 0;\n            if (w !== 0) throw new Error(\"Non-zero carry\");\n            F = f, K++;\n        }\n        for(var l = D - F; l !== D && y[l] === 0;)l++;\n        for(var L = u.repeat(C); l < D; ++l)L += i.charAt(y[l]);\n        return L;\n    }\n    function x(_) {\n        if (typeof _ != \"string\") throw new TypeError(\"Expected String\");\n        if (_.length === 0) return new Uint8Array();\n        var C = 0;\n        if (_[C] !== \" \") {\n            for(var F = 0, K = 0; _[C] === u;)F++, C++;\n            for(var I = (_.length - C) * d + 1 >>> 0, D = new Uint8Array(I); _[C];){\n                var y = t[_.charCodeAt(C)];\n                if (y === 255) return;\n                for(var w = 0, f = I - 1; (y !== 0 || w < K) && f !== -1; f--, w++)y += c * D[f] >>> 0, D[f] = y % 256 >>> 0, y = y / 256 >>> 0;\n                if (y !== 0) throw new Error(\"Non-zero carry\");\n                K = w, C++;\n            }\n            if (_[C] !== \" \") {\n                for(var a = I - K; a !== I && D[a] === 0;)a++;\n                for(var l = new Uint8Array(F + (I - a)), L = F; a !== I;)l[L++] = D[a++];\n                return l;\n            }\n        }\n    }\n    function O(_) {\n        var C = x(_);\n        if (C) return C;\n        throw new Error(`Non-${e} character`);\n    }\n    return {\n        encode: b,\n        decodeUnsafe: x,\n        decode: O\n    };\n}\nvar ow = nw, aw = ow;\nconst xh = (i)=>{\n    if (i instanceof Uint8Array && i.constructor.name === \"Uint8Array\") return i;\n    if (i instanceof ArrayBuffer) return new Uint8Array(i);\n    if (ArrayBuffer.isView(i)) return new Uint8Array(i.buffer, i.byteOffset, i.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, cw = (i)=>new TextEncoder().encode(i), hw = (i)=>new TextDecoder().decode(i);\nclass uw {\n    constructor(e, t, s){\n        this.name = e, this.prefix = t, this.baseEncode = s;\n    }\n    encode(e) {\n        if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;\n        throw Error(\"Unknown type, must be binary type\");\n    }\n}\nclass lw {\n    constructor(e, t, s){\n        if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;\n    }\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return Oh(this, e);\n    }\n}\nclass dw {\n    constructor(e){\n        this.decoders = e;\n    }\n    or(e) {\n        return Oh(this, e);\n    }\n    decode(e) {\n        const t = e[0], s = this.decoders[t];\n        if (s) return s.decode(e);\n        throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n}\nconst Oh = (i, e)=>new dw({\n        ...i.decoders || {\n            [i.prefix]: i\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nclass fw {\n    constructor(e, t, s, r){\n        this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = r, this.encoder = new uw(e, t, s), this.decoder = new lw(e, t, r);\n    }\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n}\nconst fr = ({ name: i, prefix: e, encode: t, decode: s })=>new fw(i, e, t, s), xs = ({ prefix: i, name: e, alphabet: t })=>{\n    const { encode: s, decode: r } = aw(t, e);\n    return fr({\n        prefix: i,\n        name: e,\n        encode: s,\n        decode: (n)=>xh(r(n))\n    });\n}, pw = (i, e, t, s)=>{\n    const r = {};\n    for(let p = 0; p < e.length; ++p)r[e[p]] = p;\n    let n = i.length;\n    for(; i[n - 1] === \"=\";)--n;\n    const o = new Uint8Array(n * t / 8 | 0);\n    let c = 0, u = 0, d = 0;\n    for(let p = 0; p < n; ++p){\n        const b = r[i[p]];\n        if (b === void 0) throw new SyntaxError(`Non-${s} character`);\n        u = u << t | b, c += t, c >= 8 && (c -= 8, o[d++] = 255 & u >> c);\n    }\n    if (c >= t || 255 & u << 8 - c) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, gw = (i, e, t)=>{\n    const s = e[e.length - 1] === \"=\", r = (1 << t) - 1;\n    let n = \"\", o = 0, c = 0;\n    for(let u = 0; u < i.length; ++u)for(c = c << 8 | i[u], o += 8; o > t;)o -= t, n += e[r & c >> o];\n    if (o && (n += e[r & c << t - o]), s) for(; n.length * t & 7;)n += \"=\";\n    return n;\n}, dt = ({ name: i, prefix: e, bitsPerChar: t, alphabet: s })=>fr({\n        prefix: e,\n        name: i,\n        encode (r) {\n            return gw(r, s, t);\n        },\n        decode (r) {\n            return pw(r, s, t, i);\n        }\n    }), yw = fr({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (i)=>hw(i),\n    decode: (i)=>cw(i)\n});\nvar mw = Object.freeze({\n    __proto__: null,\n    identity: yw\n});\nconst bw = dt({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar ww = Object.freeze({\n    __proto__: null,\n    base2: bw\n});\nconst vw = dt({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar _w = Object.freeze({\n    __proto__: null,\n    base8: vw\n});\nconst Ew = xs({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar Sw = Object.freeze({\n    __proto__: null,\n    base10: Ew\n});\nconst Iw = dt({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), Dw = dt({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar xw = Object.freeze({\n    __proto__: null,\n    base16: Iw,\n    base16upper: Dw\n});\nconst Ow = dt({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), Nw = dt({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), Pw = dt({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), Rw = dt({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), Cw = dt({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), Aw = dt({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), Tw = dt({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), $w = dt({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), Fw = dt({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar Uw = Object.freeze({\n    __proto__: null,\n    base32: Ow,\n    base32upper: Nw,\n    base32pad: Pw,\n    base32padupper: Rw,\n    base32hex: Cw,\n    base32hexupper: Aw,\n    base32hexpad: Tw,\n    base32hexpadupper: $w,\n    base32z: Fw\n});\nconst Lw = xs({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), Mw = xs({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar qw = Object.freeze({\n    __proto__: null,\n    base36: Lw,\n    base36upper: Mw\n});\nconst jw = xs({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), zw = xs({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar Kw = Object.freeze({\n    __proto__: null,\n    base58btc: jw,\n    base58flickr: zw\n});\nconst Vw = dt({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), Bw = dt({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), kw = dt({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), Hw = dt({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar Gw = Object.freeze({\n    __proto__: null,\n    base64: Vw,\n    base64pad: Bw,\n    base64url: kw,\n    base64urlpad: Hw\n});\nconst Nh = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), Ww = Nh.reduce((i, e, t)=>(i[t] = e, i), []), Yw = Nh.reduce((i, e, t)=>(i[e.codePointAt(0)] = t, i), []);\nfunction Jw(i) {\n    return i.reduce((e, t)=>(e += Ww[t], e), \"\");\n}\nfunction Qw(i) {\n    const e = [];\n    for (const t of i){\n        const s = Yw[t.codePointAt(0)];\n        if (s === void 0) throw new Error(`Non-base256emoji character: ${t}`);\n        e.push(s);\n    }\n    return new Uint8Array(e);\n}\nconst Xw = fr({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: Jw,\n    decode: Qw\n});\nvar Zw = Object.freeze({\n    __proto__: null,\n    base256emoji: Xw\n}), e0 = Ph, xa = 128, t0 = 127, i0 = ~t0, s0 = Math.pow(2, 31);\nfunction Ph(i, e, t) {\n    e = e || [], t = t || 0;\n    for(var s = t; i >= s0;)e[t++] = i & 255 | xa, i /= 128;\n    for(; i & i0;)e[t++] = i & 255 | xa, i >>>= 7;\n    return e[t] = i | 0, Ph.bytes = t - s + 1, e;\n}\nvar r0 = en, n0 = 128, Oa = 127;\nfunction en(i, s) {\n    var t = 0, s = s || 0, r = 0, n = s, o, c = i.length;\n    do {\n        if (n >= c) throw en.bytes = 0, new RangeError(\"Could not decode varint\");\n        o = i[n++], t += r < 28 ? (o & Oa) << r : (o & Oa) * Math.pow(2, r), r += 7;\n    }while (o >= n0);\n    return en.bytes = n - s, t;\n}\nvar o0 = Math.pow(2, 7), a0 = Math.pow(2, 14), c0 = Math.pow(2, 21), h0 = Math.pow(2, 28), u0 = Math.pow(2, 35), l0 = Math.pow(2, 42), d0 = Math.pow(2, 49), f0 = Math.pow(2, 56), p0 = Math.pow(2, 63), g0 = function(i) {\n    return i < o0 ? 1 : i < a0 ? 2 : i < c0 ? 3 : i < h0 ? 4 : i < u0 ? 5 : i < l0 ? 6 : i < d0 ? 7 : i < f0 ? 8 : i < p0 ? 9 : 10;\n}, y0 = {\n    encode: e0,\n    decode: r0,\n    encodingLength: g0\n}, Rh = y0;\nconst Na = (i, e, t = 0)=>(Rh.encode(i, e, t), e), Pa = (i)=>Rh.encodingLength(i), tn = (i, e)=>{\n    const t = e.byteLength, s = Pa(i), r = s + Pa(t), n = new Uint8Array(r + t);\n    return Na(i, n, 0), Na(t, n, s), n.set(e, r), new m0(i, t, e, n);\n};\nclass m0 {\n    constructor(e, t, s, r){\n        this.code = e, this.size = t, this.digest = s, this.bytes = r;\n    }\n}\nconst Ch = ({ name: i, code: e, encode: t })=>new b0(i, e, t);\nclass b0 {\n    constructor(e, t, s){\n        this.name = e, this.code = t, this.encode = s;\n    }\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const t = this.encode(e);\n            return t instanceof Uint8Array ? tn(this.code, t) : t.then((s)=>tn(this.code, s));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n}\nconst Ah = (i)=>async (e)=>new Uint8Array(await crypto.subtle.digest(i, e)), w0 = Ch({\n    name: \"sha2-256\",\n    code: 18,\n    encode: Ah(\"SHA-256\")\n}), v0 = Ch({\n    name: \"sha2-512\",\n    code: 19,\n    encode: Ah(\"SHA-512\")\n});\nvar _0 = Object.freeze({\n    __proto__: null,\n    sha256: w0,\n    sha512: v0\n});\nconst Th = 0, E0 = \"identity\", $h = xh, S0 = (i)=>tn(Th, $h(i)), I0 = {\n    code: Th,\n    name: E0,\n    encode: $h,\n    digest: S0\n};\nvar D0 = Object.freeze({\n    __proto__: null,\n    identity: I0\n});\nnew TextEncoder(), new TextDecoder();\nconst Ra = {\n    ...mw,\n    ...ww,\n    ..._w,\n    ...Sw,\n    ...xw,\n    ...Uw,\n    ...qw,\n    ...Kw,\n    ...Gw,\n    ...Zw\n};\n({\n    ..._0,\n    ...D0\n});\nfunction Fh(i) {\n    return globalThis.Buffer != null ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : i;\n}\nfunction x0(i = 0) {\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Fh(globalThis.Buffer.allocUnsafe(i)) : new Uint8Array(i);\n}\nfunction Uh(i, e, t, s) {\n    return {\n        name: i,\n        prefix: e,\n        encoder: {\n            name: i,\n            prefix: e,\n            encode: t\n        },\n        decoder: {\n            decode: s\n        }\n    };\n}\nconst Ca = Uh(\"utf8\", \"u\", (i)=>\"u\" + new TextDecoder(\"utf8\").decode(i), (i)=>new TextEncoder().encode(i.substring(1))), Ar = Uh(\"ascii\", \"a\", (i)=>{\n    let e = \"a\";\n    for(let t = 0; t < i.length; t++)e += String.fromCharCode(i[t]);\n    return e;\n}, (i)=>{\n    i = i.substring(1);\n    const e = x0(i.length);\n    for(let t = 0; t < i.length; t++)e[t] = i.charCodeAt(t);\n    return e;\n}), O0 = {\n    utf8: Ca,\n    \"utf-8\": Ca,\n    hex: Ra.base16,\n    latin1: Ar,\n    ascii: Ar,\n    binary: Ar,\n    ...Ra\n};\nfunction N0(i, e = \"utf8\") {\n    const t = O0[e];\n    if (!t) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Fh(globalThis.Buffer.from(i, \"utf-8\")) : t.decoder.decode(`${t.prefix}${i}`);\n}\nconst Lh = \"wc\", P0 = 2, Cn = \"core\", ui = `${Lh}@2:${Cn}:`, R0 = {\n    name: Cn,\n    logger: \"error\"\n}, C0 = {\n    database: \":memory:\"\n}, A0 = \"crypto\", Aa = \"client_ed25519_seed\", T0 = V.ONE_DAY, $0 = \"keychain\", F0 = \"0.3\", U0 = \"messages\", L0 = \"0.3\", M0 = V.SIX_HOURS, q0 = \"publisher\", Mh = \"irn\", j0 = \"error\", qh = \"wss://relay.walletconnect.com\", z0 = \"relayer\", He = {\n    message: \"relayer_message\",\n    message_ack: \"relayer_message_ack\",\n    connect: \"relayer_connect\",\n    disconnect: \"relayer_disconnect\",\n    error: \"relayer_error\",\n    connection_stalled: \"relayer_connection_stalled\",\n    transport_closed: \"relayer_transport_closed\",\n    publish: \"relayer_publish\"\n}, K0 = \"_subscription\", is = {\n    payload: \"payload\",\n    connect: \"connect\",\n    disconnect: \"disconnect\",\n    error: \"error\"\n}, V0 = V.ONE_SECOND / 2, B0 = \"y\", k0 = 1e4, H0 = \"0.3\", Bt = {\n    created: \"subscription_created\",\n    deleted: \"subscription_deleted\",\n    expired: \"subscription_expired\",\n    disabled: \"subscription_disabled\",\n    sync: \"subscription_sync\",\n    resubscribed: \"subscription_resubscribed\"\n}, G0 = \"subscription\", W0 = \"0.3\", Y0 = V.FIVE_SECONDS * 1e3, J0 = \"pairing\", Q0 = \"0.3\", ss = {\n    wc_pairingDelete: {\n        req: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1e3\n        },\n        res: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1001\n        }\n    },\n    wc_pairingPing: {\n        req: {\n            ttl: V.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1002\n        },\n        res: {\n            ttl: V.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1003\n        }\n    },\n    unregistered_method: {\n        req: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        },\n        res: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        }\n    }\n}, Kt = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, X0 = \"history\", Z0 = \"0.3\", ev = \"expirer\", $t = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n}, tv = \"0.3\", Tr = \"verify-api\", Ta = \"https://verify.walletconnect.com\";\nclass iv {\n    constructor(e, t){\n        this.core = e, this.logger = t, this.keychain = /* @__PURE__ */ new Map(), this.name = $0, this.version = F0, this.initialized = !1, this.storagePrefix = ui, this.init = async ()=>{\n            if (!this.initialized) {\n                const s = await this.getKeyChain();\n                typeof s < \"u\" && (this.keychain = s), this.initialized = !0;\n            }\n        }, this.has = (s)=>(this.isInitialized(), this.keychain.has(s)), this.set = async (s, r)=>{\n            this.isInitialized(), this.keychain.set(s, r), await this.persist();\n        }, this.get = (s)=>{\n            this.isInitialized();\n            const r = this.keychain.get(s);\n            if (typeof r > \"u\") {\n                const { message: n } = J(\"NO_MATCHING_KEY\", `${this.name}: ${s}`);\n                throw new Error(n);\n            }\n            return r;\n        }, this.del = async (s)=>{\n            this.isInitialized(), this.keychain.delete(s), await this.persist();\n        }, this.core = e, this.logger = ee.generateChildLogger(t, this.name);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    async setKeyChain(e) {\n        await this.core.storage.setItem(this.storageKey, vh(e));\n    }\n    async getKeyChain() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? _h(e) : void 0;\n    }\n    async persist() {\n        await this.setKeyChain(this.keychain);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass sv {\n    constructor(e, t, s){\n        this.core = e, this.logger = t, this.name = A0, this.initialized = !1, this.init = async ()=>{\n            this.initialized || (await this.keychain.init(), this.initialized = !0);\n        }, this.hasKeys = (r)=>(this.isInitialized(), this.keychain.has(r)), this.getClientId = async ()=>{\n            this.isInitialized();\n            const r = await this.getClientSeed(), n = Ws(r);\n            return an(n.publicKey);\n        }, this.generateKeyPair = ()=>{\n            this.isInitialized();\n            const r = Xm();\n            return this.setPrivateKey(r.publicKey, r.privateKey);\n        }, this.signJWT = async (r)=>{\n            this.isInitialized();\n            const n = await this.getClientSeed(), o = Ws(n), c = Xr();\n            return await Ic(c, r, T0, o);\n        }, this.generateSharedKey = (r, n, o)=>{\n            this.isInitialized();\n            const c = this.getPrivateKey(r), u = Zm(c, n);\n            return this.setSymKey(u, o);\n        }, this.setSymKey = async (r, n)=>{\n            this.isInitialized();\n            const o = n || eb(r);\n            return await this.keychain.set(o, r), o;\n        }, this.deleteKeyPair = async (r)=>{\n            this.isInitialized(), await this.keychain.del(r);\n        }, this.deleteSymKey = async (r)=>{\n            this.isInitialized(), await this.keychain.del(r);\n        }, this.encode = async (r, n, o)=>{\n            this.isInitialized();\n            const c = bh(o), u = rr(n);\n            if (ya(c)) {\n                const x = c.senderPublicKey, O = c.receiverPublicKey;\n                r = await this.generateSharedKey(x, O);\n            }\n            const d = this.getSymKey(r), { type: p, senderPublicKey: b } = c;\n            return ib({\n                type: p,\n                symKey: d,\n                message: u,\n                senderPublicKey: b\n            });\n        }, this.decode = async (r, n, o)=>{\n            this.isInitialized();\n            const c = nb(n, o);\n            if (ya(c)) {\n                const p = c.receiverPublicKey, b = c.senderPublicKey;\n                r = await this.generateSharedKey(p, b);\n            }\n            const u = this.getSymKey(r), d = sb({\n                symKey: u,\n                encoded: n\n            });\n            return rn(d);\n        }, this.getPayloadType = (r)=>{\n            const n = Zs(r);\n            return Is(n.type);\n        }, this.getPayloadSenderPublicKey = (r)=>{\n            const n = Zs(r);\n            return n.senderPublicKey ? Ne(n.senderPublicKey, _t) : void 0;\n        }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.keychain = s || new iv(this.core, this.logger);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    async setPrivateKey(e, t) {\n        return await this.keychain.set(e, t), e;\n    }\n    getPrivateKey(e) {\n        return this.keychain.get(e);\n    }\n    async getClientSeed() {\n        let e = \"\";\n        try {\n            e = this.keychain.get(Aa);\n        } catch  {\n            e = Xr(), await this.keychain.set(Aa, e);\n        }\n        return N0(e, \"base16\");\n    }\n    getSymKey(e) {\n        return this.keychain.get(e);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass rv extends $m {\n    constructor(e, t){\n        super(e, t), this.logger = e, this.core = t, this.messages = /* @__PURE__ */ new Map(), this.name = U0, this.version = L0, this.initialized = !1, this.storagePrefix = ui, this.init = async ()=>{\n            if (!this.initialized) {\n                this.logger.trace(\"Initialized\");\n                try {\n                    const s = await this.getRelayerMessages();\n                    typeof s < \"u\" && (this.messages = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                        type: \"method\",\n                        method: \"restore\",\n                        size: this.messages.size\n                    });\n                } catch (s) {\n                    this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s);\n                } finally{\n                    this.initialized = !0;\n                }\n            }\n        }, this.set = async (s, r)=>{\n            this.isInitialized();\n            const n = Ui(r);\n            let o = this.messages.get(s);\n            return typeof o > \"u\" && (o = {}), typeof o[n] < \"u\" || (o[n] = r, this.messages.set(s, o), await this.persist()), n;\n        }, this.get = (s)=>{\n            this.isInitialized();\n            let r = this.messages.get(s);\n            return typeof r > \"u\" && (r = {}), r;\n        }, this.has = (s, r)=>{\n            this.isInitialized();\n            const n = this.get(s), o = Ui(r);\n            return typeof n[o] < \"u\";\n        }, this.del = async (s)=>{\n            this.isInitialized(), this.messages.delete(s), await this.persist();\n        }, this.logger = ee.generateChildLogger(e, this.name), this.core = t;\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    async setRelayerMessages(e) {\n        await this.core.storage.setItem(this.storageKey, vh(e));\n    }\n    async getRelayerMessages() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? _h(e) : void 0;\n    }\n    async persist() {\n        await this.setRelayerMessages(this.messages);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass nv extends Fm {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.events = new We.EventEmitter(), this.name = q0, this.queue = /* @__PURE__ */ new Map(), this.publishTimeout = 1e4, this.publish = async (s, r, n)=>{\n            this.logger.debug(\"Publishing Payload\"), this.logger.trace({\n                type: \"method\",\n                method: \"publish\",\n                params: {\n                    topic: s,\n                    message: r,\n                    opts: n\n                }\n            });\n            try {\n                const o = n?.ttl || M0, c = Zr(n), u = n?.prompt || !1, d = n?.tag || 0, p = n?.id || vn().toString(), b = {\n                    topic: s,\n                    message: r,\n                    opts: {\n                        ttl: o,\n                        relay: c,\n                        prompt: u,\n                        tag: d,\n                        id: p\n                    }\n                };\n                this.queue.set(p, b);\n                try {\n                    await await er(this.rpcPublish(s, r, o, c, u, d, p), this.publishTimeout), this.relayer.events.emit(He.publish, b);\n                } catch  {\n                    this.logger.debug(\"Publishing Payload stalled\"), this.relayer.events.emit(He.connection_stalled);\n                    return;\n                }\n                this.logger.debug(\"Successfully Published Payload\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"publish\",\n                    params: {\n                        topic: s,\n                        message: r,\n                        opts: n\n                    }\n                });\n            } catch (o) {\n                throw this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(o), o;\n            }\n        }, this.on = (s, r)=>{\n            this.events.on(s, r);\n        }, this.once = (s, r)=>{\n            this.events.once(s, r);\n        }, this.off = (s, r)=>{\n            this.events.off(s, r);\n        }, this.removeListener = (s, r)=>{\n            this.events.removeListener(s, r);\n        }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.registerEventListeners();\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    rpcPublish(e, t, s, r, n, o, c) {\n        var u, d, p, b;\n        const x = {\n            method: Vs(r.protocol).publish,\n            params: {\n                topic: e,\n                message: t,\n                ttl: s,\n                prompt: n,\n                tag: o\n            },\n            id: c\n        };\n        return wt((u = x.params) == null ? void 0 : u.prompt) && ((d = x.params) == null || delete d.prompt), wt((p = x.params) == null ? void 0 : p.tag) && ((b = x.params) == null || delete b.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"message\",\n            direction: \"outgoing\",\n            request: x\n        }), this.relayer.request(x);\n    }\n    onPublish(e) {\n        this.queue.delete(e);\n    }\n    checkQueue() {\n        this.queue.forEach(async (e)=>{\n            const { topic: t, message: s, opts: r } = e;\n            await this.publish(t, s, r);\n        });\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, ()=>{\n            this.checkQueue();\n        }), this.relayer.on(He.message_ack, (e)=>{\n            this.onPublish(e.id.toString());\n        });\n    }\n}\nclass ov {\n    constructor(){\n        this.map = /* @__PURE__ */ new Map(), this.set = (e, t)=>{\n            const s = this.get(e);\n            this.exists(e, t) || this.map.set(e, [\n                ...s,\n                t\n            ]);\n        }, this.get = (e)=>this.map.get(e) || [], this.exists = (e, t)=>this.get(e).includes(t), this.delete = (e, t)=>{\n            if (typeof t > \"u\") {\n                this.map.delete(e);\n                return;\n            }\n            if (!this.map.has(e)) return;\n            const s = this.get(e);\n            if (!this.exists(e, t)) return;\n            const r = s.filter((n)=>n !== t);\n            if (!r.length) {\n                this.map.delete(e);\n                return;\n            }\n            this.map.set(e, r);\n        }, this.clear = ()=>{\n            this.map.clear();\n        };\n    }\n    get topics() {\n        return Array.from(this.map.keys());\n    }\n}\nvar av = Object.defineProperty, cv = Object.defineProperties, hv = Object.getOwnPropertyDescriptors, $a = Object.getOwnPropertySymbols, uv = Object.prototype.hasOwnProperty, lv = Object.prototype.propertyIsEnumerable, Fa = (i, e, t)=>e in i ? av(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, rs = (i, e)=>{\n    for(var t in e || (e = {}))uv.call(e, t) && Fa(i, t, e[t]);\n    if ($a) for (var t of $a(e))lv.call(e, t) && Fa(i, t, e[t]);\n    return i;\n}, $r = (i, e)=>cv(i, hv(e));\nclass dv extends Mm {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.subscriptions = /* @__PURE__ */ new Map(), this.topicMap = new ov(), this.events = new We.EventEmitter(), this.name = G0, this.version = W0, this.pending = /* @__PURE__ */ new Map(), this.cached = [], this.initialized = !1, this.pendingSubscriptionWatchLabel = \"pending_sub_watch_label\", this.pollingInterval = 20, this.storagePrefix = ui, this.subscribeTimeout = 1e4, this.restartInProgress = !1, this.batchSubscribeTopicsLimit = 500, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restart(), this.registerEventListeners(), this.onEnable(), this.clientId = await this.relayer.core.crypto.getClientId());\n        }, this.subscribe = async (s, r)=>{\n            await this.restartToComplete(), this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"subscribe\",\n                params: {\n                    topic: s,\n                    opts: r\n                }\n            });\n            try {\n                const n = Zr(r), o = {\n                    topic: s,\n                    relay: n\n                };\n                this.pending.set(s, o);\n                const c = await this.rpcSubscribe(s, n);\n                return this.onSubscribe(c, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"subscribe\",\n                    params: {\n                        topic: s,\n                        opts: r\n                    }\n                }), c;\n            } catch (n) {\n                throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(n), n;\n            }\n        }, this.unsubscribe = async (s, r)=>{\n            await this.restartToComplete(), this.isInitialized(), typeof r?.id < \"u\" ? await this.unsubscribeById(s, r.id, r) : await this.unsubscribeByTopic(s, r);\n        }, this.isSubscribed = async (s)=>this.topics.includes(s) ? !0 : await new Promise((r, n)=>{\n                const o = new V.Watch();\n                o.start(this.pendingSubscriptionWatchLabel);\n                const c = setInterval(()=>{\n                    !this.pending.has(s) && this.topics.includes(s) && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), r(!0)), o.elapsed(this.pendingSubscriptionWatchLabel) >= Y0 && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), n(new Error(\"Subscription resolution timeout\")));\n                }, this.pollingInterval);\n            }).catch(()=>!1), this.on = (s, r)=>{\n            this.events.on(s, r);\n        }, this.once = (s, r)=>{\n            this.events.once(s, r);\n        }, this.off = (s, r)=>{\n            this.events.off(s, r);\n        }, this.removeListener = (s, r)=>{\n            this.events.removeListener(s, r);\n        }, this.restart = async ()=>{\n            this.restartInProgress = !0, await this.restore(), await this.reset(), this.restartInProgress = !1;\n        }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.clientId = \"\";\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    get length() {\n        return this.subscriptions.size;\n    }\n    get ids() {\n        return Array.from(this.subscriptions.keys());\n    }\n    get values() {\n        return Array.from(this.subscriptions.values());\n    }\n    get topics() {\n        return this.topicMap.topics;\n    }\n    hasSubscription(e, t) {\n        let s = !1;\n        try {\n            s = this.getSubscription(e).topic === t;\n        } catch  {}\n        return s;\n    }\n    onEnable() {\n        this.cached = [], this.initialized = !0;\n    }\n    onDisable() {\n        this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n    }\n    async unsubscribeByTopic(e, t) {\n        const s = this.topicMap.get(e);\n        await Promise.all(s.map(async (r)=>await this.unsubscribeById(e, r, t)));\n    }\n    async unsubscribeById(e, t, s) {\n        this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({\n            type: \"method\",\n            method: \"unsubscribe\",\n            params: {\n                topic: e,\n                id: t,\n                opts: s\n            }\n        });\n        try {\n            const r = Zr(s);\n            await this.rpcUnsubscribe(e, t, r);\n            const n = Je(\"USER_DISCONNECTED\", `${this.name}, ${e}`);\n            await this.onUnsubscribe(e, t, n), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"unsubscribe\",\n                params: {\n                    topic: e,\n                    id: t,\n                    opts: s\n                }\n            });\n        } catch (r) {\n            throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(r), r;\n        }\n    }\n    async rpcSubscribe(e, t) {\n        const s = {\n            method: Vs(t.protocol).subscribe,\n            params: {\n                topic: e\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        });\n        try {\n            await await er(this.relayer.request(s), this.subscribeTimeout);\n        } catch  {\n            this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(He.connection_stalled);\n        }\n        return Ui(e + this.clientId);\n    }\n    async rpcBatchSubscribe(e) {\n        if (!e.length) return;\n        const t = e[0].relay, s = {\n            method: Vs(t.protocol).batchSubscribe,\n            params: {\n                topics: e.map((r)=>r.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        });\n        try {\n            return await await er(this.relayer.request(s), this.subscribeTimeout);\n        } catch  {\n            this.logger.debug(\"Outgoing Relay Payload stalled\"), this.relayer.events.emit(He.connection_stalled);\n        }\n    }\n    rpcUnsubscribe(e, t, s) {\n        const r = {\n            method: Vs(s.protocol).unsubscribe,\n            params: {\n                topic: e,\n                id: t\n            }\n        };\n        return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: r\n        }), this.relayer.request(r);\n    }\n    onSubscribe(e, t) {\n        this.setSubscription(e, $r(rs({}, t), {\n            id: e\n        })), this.pending.delete(t.topic);\n    }\n    onBatchSubscribe(e) {\n        e.length && e.forEach((t)=>{\n            this.setSubscription(t.id, rs({}, t)), this.pending.delete(t.topic);\n        });\n    }\n    async onUnsubscribe(e, t, s) {\n        this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, s), await this.relayer.messages.del(e);\n    }\n    async setRelayerSubscriptions(e) {\n        await this.relayer.core.storage.setItem(this.storageKey, e);\n    }\n    async getRelayerSubscriptions() {\n        return await this.relayer.core.storage.getItem(this.storageKey);\n    }\n    setSubscription(e, t) {\n        this.subscriptions.has(e) || (this.logger.debug(\"Setting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"setSubscription\",\n            id: e,\n            subscription: t\n        }), this.addSubscription(e, t));\n    }\n    addSubscription(e, t) {\n        this.subscriptions.set(e, rs({}, t)), this.topicMap.set(t.topic, e), this.events.emit(Bt.created, t);\n    }\n    getSubscription(e) {\n        this.logger.debug(\"Getting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"getSubscription\",\n            id: e\n        });\n        const t = this.subscriptions.get(e);\n        if (!t) {\n            const { message: s } = J(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(s);\n        }\n        return t;\n    }\n    deleteSubscription(e, t) {\n        this.logger.debug(\"Deleting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"deleteSubscription\",\n            id: e,\n            reason: t\n        });\n        const s = this.getSubscription(e);\n        this.subscriptions.delete(e), this.topicMap.delete(s.topic, e), this.events.emit(Bt.deleted, $r(rs({}, s), {\n            reason: t\n        }));\n    }\n    async persist() {\n        await this.setRelayerSubscriptions(this.values), this.events.emit(Bt.sync);\n    }\n    async reset() {\n        if (this.cached.length) {\n            const e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n            for(let t = 0; t < e; t++){\n                const s = this.cached.splice(0, this.batchSubscribeTopicsLimit);\n                await this.batchSubscribe(s);\n            }\n        }\n        this.events.emit(Bt.resubscribed);\n    }\n    async restore() {\n        try {\n            const e = await this.getRelayerSubscriptions();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.subscriptions.size) {\n                const { message: t } = J(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                subscriptions: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);\n        }\n    }\n    async batchSubscribe(e) {\n        if (!e.length) return;\n        const t = await this.rpcBatchSubscribe(e);\n        Ds(t) && this.onBatchSubscribe(t.map((s, r)=>$r(rs({}, e[r]), {\n                id: s\n            })));\n    }\n    async onConnect() {\n        this.restartInProgress || (await this.restart(), this.onEnable());\n    }\n    onDisconnect() {\n        this.onDisable();\n    }\n    async checkPending() {\n        if (this.relayer.transportExplicitlyClosed) return;\n        const e = [];\n        this.pending.forEach((t)=>{\n            e.push(t);\n        }), await this.batchSubscribe(e);\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, async ()=>{\n            await this.checkPending();\n        }), this.relayer.on(He.connect, async ()=>{\n            await this.onConnect();\n        }), this.relayer.on(He.disconnect, ()=>{\n            this.onDisconnect();\n        }), this.events.on(Bt.created, async (e)=>{\n            const t = Bt.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        }), this.events.on(Bt.deleted, async (e)=>{\n            const t = Bt.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async restartToComplete() {\n        this.restartInProgress && await new Promise((e)=>{\n            const t = setInterval(()=>{\n                this.restartInProgress || (clearInterval(t), e());\n            }, this.pollingInterval);\n        });\n    }\n}\nvar fv = Object.defineProperty, Ua = Object.getOwnPropertySymbols, pv = Object.prototype.hasOwnProperty, gv = Object.prototype.propertyIsEnumerable, La = (i, e, t)=>e in i ? fv(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, yv = (i, e)=>{\n    for(var t in e || (e = {}))pv.call(e, t) && La(i, t, e[t]);\n    if (Ua) for (var t of Ua(e))gv.call(e, t) && La(i, t, e[t]);\n    return i;\n};\nclass mv extends Um {\n    constructor(e){\n        super(e), this.protocol = \"wc\", this.version = 2, this.events = new We.EventEmitter(), this.name = z0, this.transportExplicitlyClosed = !1, this.initialized = !1, this.reconnecting = !1, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = [\n            \"socket hang up\",\n            \"socket stalled\"\n        ], this.request = async (t)=>{\n            this.logger.debug(\"Publishing Request Payload\");\n            try {\n                return await this.toEstablishConnection(), await this.provider.request(t);\n            } catch (s) {\n                throw this.logger.debug(\"Failed to Publish Request\"), this.logger.error(s), s;\n            }\n        }, this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? ee.generateChildLogger(e.logger, this.name) : ee.pino(ee.getDefaultLoggerOptions({\n            level: e.logger || j0\n        })), this.messages = new rv(this.logger, e.core), this.subscriber = new dv(this, this.logger), this.publisher = new nv(this, this.logger), this.relayUrl = e?.relayUrl || qh, this.projectId = e.projectId, this.provider = {};\n    }\n    async init() {\n        this.logger.trace(\"Initialized\"), await this.createProvider(), await Promise.all([\n            this.messages.init(),\n            this.transportOpen(),\n            this.subscriber.init()\n        ]), this.registerEventListeners(), this.initialized = !0, setTimeout(async ()=>{\n            this.subscriber.topics.length === 0 && (this.logger.info(\"No topics subscribted to after init, closing transport\"), await this.transportClose(), this.transportExplicitlyClosed = !1);\n        }, k0);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get connected() {\n        return this.provider.connection.connected;\n    }\n    get connecting() {\n        return this.provider.connection.connecting;\n    }\n    async publish(e, t, s) {\n        this.isInitialized(), await this.publisher.publish(e, t, s), await this.recordMessageEvent({\n            topic: e,\n            message: t,\n            publishedAt: Date.now()\n        });\n    }\n    async subscribe(e, t) {\n        this.isInitialized();\n        let s = \"\";\n        return await Promise.all([\n            new Promise((r)=>{\n                this.subscriber.once(Bt.created, (n)=>{\n                    n.topic === e && r();\n                });\n            }),\n            new Promise(async (r)=>{\n                s = await this.subscriber.subscribe(e, t), r();\n            })\n        ]), s;\n    }\n    async unsubscribe(e, t) {\n        this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async transportClose() {\n        this.transportExplicitlyClosed = !0, this.connected && (await this.provider.disconnect(), this.events.emit(He.transport_closed));\n    }\n    async transportOpen(e) {\n        if (this.transportExplicitlyClosed = !1, !this.reconnecting) {\n            this.relayUrl = e || this.relayUrl, this.reconnecting = !0;\n            try {\n                await Promise.all([\n                    new Promise((t)=>{\n                        this.initialized || t(), this.subscriber.once(Bt.resubscribed, ()=>{\n                            t();\n                        });\n                    }),\n                    await Promise.race([\n                        new Promise(async (t, s)=>{\n                            await er(this.provider.connect(), 5e3, \"socket stalled\").catch((r)=>s(r)).then(()=>t()).finally(()=>this.removeListener(He.transport_closed, this.rejectTransportOpen));\n                        }),\n                        new Promise((t)=>this.once(He.transport_closed, this.rejectTransportOpen))\n                    ])\n                ]);\n            } catch (t) {\n                this.logger.error(t);\n                const s = t;\n                if (!this.isConnectionStalled(s.message)) throw t;\n                this.events.emit(He.transport_closed);\n            } finally{\n                this.reconnecting = !1;\n            }\n        }\n    }\n    async restartTransport(e) {\n        this.transportExplicitlyClosed || (this.relayUrl = e || this.relayUrl, this.connected && await Promise.all([\n            new Promise((t)=>{\n                this.provider.once(is.disconnect, ()=>{\n                    t();\n                });\n            }),\n            this.transportClose()\n        ]), await this.createProvider(), await this.transportOpen());\n    }\n    isConnectionStalled(e) {\n        return this.staleConnectionErrors.some((t)=>e.includes(t));\n    }\n    rejectTransportOpen() {\n        throw new Error(\"closeTransport called before connection was established\");\n    }\n    async createProvider() {\n        const e = await this.core.crypto.signJWT(this.relayUrl);\n        this.provider = new _n(new Wc(mb({\n            sdkVersion: B0,\n            protocol: this.protocol,\n            version: this.version,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId,\n            auth: e,\n            useOnCloseEvent: !0\n        }))), this.registerProviderListeners();\n    }\n    async recordMessageEvent(e) {\n        const { topic: t, message: s } = e;\n        await this.messages.set(t, s);\n    }\n    async shouldIgnoreMessageEvent(e) {\n        const { topic: t, message: s } = e;\n        return await this.subscriber.isSubscribed(t) ? this.messages.has(t, s) : !0;\n    }\n    async onProviderPayload(e) {\n        if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"incoming\",\n            payload: e\n        }), ji(e)) {\n            if (!e.method.endsWith(K0)) return;\n            const t = e.params, { topic: s, message: r, publishedAt: n } = t.data, o = {\n                topic: s,\n                message: r,\n                publishedAt: n\n            };\n            this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(yv({\n                type: \"event\",\n                event: t.id\n            }, o)), this.events.emit(t.id, o), await this.acknowledgePayload(e), await this.onMessageEvent(o);\n        } else Oi(e) && this.events.emit(He.message_ack, e);\n    }\n    async onMessageEvent(e) {\n        await this.shouldIgnoreMessageEvent(e) || (this.events.emit(He.message, e), await this.recordMessageEvent(e));\n    }\n    async acknowledgePayload(e) {\n        const t = xi(e.id, !0);\n        await this.provider.connection.send(t);\n    }\n    registerProviderListeners() {\n        this.provider.on(is.payload, (e)=>this.onProviderPayload(e)), this.provider.on(is.connect, ()=>{\n            this.events.emit(He.connect);\n        }), this.provider.on(is.disconnect, ()=>{\n            this.onProviderDisconnect();\n        }), this.provider.on(is.error, (e)=>{\n            this.logger.error(e), this.events.emit(He.error, e);\n        });\n    }\n    registerEventListeners() {\n        this.events.on(He.connection_stalled, async ()=>{\n            await this.restartTransport();\n        });\n    }\n    onProviderDisconnect() {\n        this.events.emit(He.disconnect), this.attemptToReconnect();\n    }\n    attemptToReconnect() {\n        this.transportExplicitlyClosed || setTimeout(async ()=>{\n            await this.restartTransport();\n        }, V.toMiliseconds(V0));\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async toEstablishConnection() {\n        if (!this.connected) {\n            if (this.connecting) return await new Promise((e)=>{\n                const t = setInterval(()=>{\n                    this.connected && (clearInterval(t), e());\n                }, this.connectionStatusPollingInterval);\n            });\n            await this.restartTransport();\n        }\n    }\n}\nvar bv = Object.defineProperty, Ma = Object.getOwnPropertySymbols, wv = Object.prototype.hasOwnProperty, vv = Object.prototype.propertyIsEnumerable, qa = (i, e, t)=>e in i ? bv(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, ja = (i, e)=>{\n    for(var t in e || (e = {}))wv.call(e, t) && qa(i, t, e[t]);\n    if (Ma) for (var t of Ma(e))vv.call(e, t) && qa(i, t, e[t]);\n    return i;\n};\nclass pr extends Lm {\n    constructor(e, t, s, r = ui, n = void 0){\n        super(e, t, s, r), this.core = e, this.logger = t, this.name = s, this.map = /* @__PURE__ */ new Map(), this.version = H0, this.cached = [], this.initialized = !1, this.storagePrefix = ui, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((o)=>{\n                this.getKey && o !== null && !wt(o) ? this.map.set(this.getKey(o), o) : qb(o) ? this.map.set(o.id, o) : jb(o) && this.map.set(o.topic, o);\n            }), this.cached = [], this.initialized = !0);\n        }, this.set = async (o, c)=>{\n            this.isInitialized(), this.map.has(o) ? await this.update(o, c) : (this.logger.debug(\"Setting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                key: o,\n                value: c\n            }), this.map.set(o, c), await this.persist());\n        }, this.get = (o)=>(this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                key: o\n            }), this.getData(o)), this.getAll = (o)=>(this.isInitialized(), o ? this.values.filter((c)=>Object.keys(o).every((u)=>Yc(c[u], o[u]))) : this.values), this.update = async (o, c)=>{\n            this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                key: o,\n                update: c\n            });\n            const u = ja(ja({}, this.getData(o)), c);\n            this.map.set(o, u), await this.persist();\n        }, this.delete = async (o, c)=>{\n            this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                key: o,\n                reason: c\n            }), this.map.delete(o), await this.persist());\n        }, this.logger = ee.generateChildLogger(t, this.name), this.storagePrefix = r, this.getKey = n;\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    get length() {\n        return this.map.size;\n    }\n    get keys() {\n        return Array.from(this.map.keys());\n    }\n    get values() {\n        return Array.from(this.map.values());\n    }\n    async setDataStore(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getDataStore() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getData(e) {\n        const t = this.map.get(e);\n        if (!t) {\n            const { message: s } = J(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.error(s), new Error(s);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setDataStore(this.values);\n    }\n    async restore() {\n        try {\n            const e = await this.getDataStore();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.map.size) {\n                const { message: t } = J(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                value: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass _v {\n    constructor(e, t){\n        this.core = e, this.logger = t, this.name = J0, this.version = Q0, this.events = new ir(), this.initialized = !1, this.storagePrefix = ui, this.ignoredPayloadTypes = [\n            Ni\n        ], this.registeredMethods = [], this.init = async ()=>{\n            this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n        }, this.register = ({ methods: s })=>{\n            this.isInitialized(), this.registeredMethods = [\n                .../* @__PURE__ */ new Set([\n                    ...this.registeredMethods,\n                    ...s\n                ])\n            ];\n        }, this.create = async ()=>{\n            this.isInitialized();\n            const s = Xr(), r = await this.core.crypto.setSymKey(s), n = Ht(V.FIVE_MINUTES), o = {\n                protocol: Mh\n            }, c = {\n                topic: r,\n                expiry: n,\n                relay: o,\n                active: !1\n            }, u = Pb({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: r,\n                symKey: s,\n                relay: o\n            });\n            return await this.pairings.set(r, c), await this.core.relayer.subscribe(r), this.core.expirer.set(r, n), {\n                topic: r,\n                uri: u\n            };\n        }, this.pair = async (s)=>{\n            this.isInitialized(), this.isValidPair(s);\n            const { topic: r, symKey: n, relay: o } = xb(s.uri);\n            if (this.pairings.keys.includes(r)) throw new Error(`Pairing already exists: ${r}`);\n            if (this.core.crypto.hasKeys(r)) throw new Error(`Keychain already exists: ${r}`);\n            const c = Ht(V.FIVE_MINUTES), u = {\n                topic: r,\n                relay: o,\n                expiry: c,\n                active: !1\n            };\n            return await this.pairings.set(r, u), await this.core.crypto.setSymKey(n, r), await this.core.relayer.subscribe(r, {\n                relay: o\n            }), this.core.expirer.set(r, c), s.activatePairing && await this.activate({\n                topic: r\n            }), u;\n        }, this.activate = async ({ topic: s })=>{\n            this.isInitialized();\n            const r = Ht(V.THIRTY_DAYS);\n            await this.pairings.update(s, {\n                active: !0,\n                expiry: r\n            }), this.core.expirer.set(s, r);\n        }, this.ping = async (s)=>{\n            this.isInitialized(), await this.isValidPing(s);\n            const { topic: r } = s;\n            if (this.pairings.keys.includes(r)) {\n                const n = await this.sendRequest(r, \"wc_pairingPing\", {}), { done: o, resolve: c, reject: u } = Ti();\n                this.events.once(ke(\"pairing_ping\", n), ({ error: d })=>{\n                    d ? u(d) : c();\n                }), await o();\n            }\n        }, this.updateExpiry = async ({ topic: s, expiry: r })=>{\n            this.isInitialized(), await this.pairings.update(s, {\n                expiry: r\n            });\n        }, this.updateMetadata = async ({ topic: s, metadata: r })=>{\n            this.isInitialized(), await this.pairings.update(s, {\n                peerMetadata: r\n            });\n        }, this.getPairings = ()=>(this.isInitialized(), this.pairings.values), this.disconnect = async (s)=>{\n            this.isInitialized(), await this.isValidDisconnect(s);\n            const { topic: r } = s;\n            this.pairings.keys.includes(r) && (await this.sendRequest(r, \"wc_pairingDelete\", Je(\"USER_DISCONNECTED\")), await this.deletePairing(r));\n        }, this.sendRequest = async (s, r, n)=>{\n            const o = ti(r, n), c = await this.core.crypto.encode(s, o), u = ss[r].req;\n            return this.core.history.set(s, o), this.core.relayer.publish(s, c, u), o.id;\n        }, this.sendResult = async (s, r, n)=>{\n            const o = xi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = ss[u.request.method].res;\n            await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);\n        }, this.sendError = async (s, r, n)=>{\n            const o = qi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = ss[u.request.method] ? ss[u.request.method].res : ss.unregistered_method.res;\n            await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);\n        }, this.deletePairing = async (s, r)=>{\n            await this.core.relayer.unsubscribe(s), await Promise.all([\n                this.pairings.delete(s, Je(\"USER_DISCONNECTED\")),\n                this.core.crypto.deleteSymKey(s),\n                r ? Promise.resolve() : this.core.expirer.del(s)\n            ]);\n        }, this.cleanup = async ()=>{\n            const s = this.pairings.getAll().filter((r)=>ci(r.expiry));\n            await Promise.all(s.map((r)=>this.deletePairing(r.topic)));\n        }, this.onRelayEventRequest = (s)=>{\n            const { topic: r, payload: n } = s, o = n.method;\n            if (this.pairings.keys.includes(r)) switch(o){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingRequest(r, n);\n                case \"wc_pairingDelete\":\n                    return this.onPairingDeleteRequest(r, n);\n                default:\n                    return this.onUnknownRpcMethodRequest(r, n);\n            }\n        }, this.onRelayEventResponse = async (s)=>{\n            const { topic: r, payload: n } = s, o = (await this.core.history.get(r, n.id)).request.method;\n            if (this.pairings.keys.includes(r)) switch(o){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingResponse(r, n);\n                default:\n                    return this.onUnknownRpcMethodResponse(o);\n            }\n        }, this.onPairingPingRequest = async (s, r)=>{\n            const { id: n } = r;\n            try {\n                this.isValidPing({\n                    topic: s\n                }), await this.sendResult(n, s, !0), this.events.emit(\"pairing_ping\", {\n                    id: n,\n                    topic: s\n                });\n            } catch (o) {\n                await this.sendError(n, s, o), this.logger.error(o);\n            }\n        }, this.onPairingPingResponse = (s, r)=>{\n            const { id: n } = r;\n            setTimeout(()=>{\n                ht(r) ? this.events.emit(ke(\"pairing_ping\", n), {}) : Ge(r) && this.events.emit(ke(\"pairing_ping\", n), {\n                    error: r.error\n                });\n            }, 500);\n        }, this.onPairingDeleteRequest = async (s, r)=>{\n            const { id: n } = r;\n            try {\n                this.isValidDisconnect({\n                    topic: s\n                }), await this.deletePairing(s), this.events.emit(\"pairing_delete\", {\n                    id: n,\n                    topic: s\n                });\n            } catch (o) {\n                await this.sendError(n, s, o), this.logger.error(o);\n            }\n        }, this.onUnknownRpcMethodRequest = async (s, r)=>{\n            const { id: n, method: o } = r;\n            try {\n                if (this.registeredMethods.includes(o)) return;\n                const c = Je(\"WC_METHOD_UNSUPPORTED\", o);\n                await this.sendError(n, s, c), this.logger.error(c);\n            } catch (c) {\n                await this.sendError(n, s, c), this.logger.error(c);\n            }\n        }, this.onUnknownRpcMethodResponse = (s)=>{\n            this.registeredMethods.includes(s) || this.logger.error(Je(\"WC_METHOD_UNSUPPORTED\", s));\n        }, this.isValidPair = (s)=>{\n            if (!It(s)) {\n                const { message: r } = J(\"MISSING_OR_INVALID\", `pair() params: ${s}`);\n                throw new Error(r);\n            }\n            if (!Mb(s.uri)) {\n                const { message: r } = J(\"MISSING_OR_INVALID\", `pair() uri: ${s.uri}`);\n                throw new Error(r);\n            }\n        }, this.isValidPing = async (s)=>{\n            if (!It(s)) {\n                const { message: n } = J(\"MISSING_OR_INVALID\", `ping() params: ${s}`);\n                throw new Error(n);\n            }\n            const { topic: r } = s;\n            await this.isValidPairingTopic(r);\n        }, this.isValidDisconnect = async (s)=>{\n            if (!It(s)) {\n                const { message: n } = J(\"MISSING_OR_INVALID\", `disconnect() params: ${s}`);\n                throw new Error(n);\n            }\n            const { topic: r } = s;\n            await this.isValidPairingTopic(r);\n        }, this.isValidPairingTopic = async (s)=>{\n            if (!at(s, !1)) {\n                const { message: r } = J(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${s}`);\n                throw new Error(r);\n            }\n            if (!this.pairings.keys.includes(s)) {\n                const { message: r } = J(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${s}`);\n                throw new Error(r);\n            }\n            if (ci(this.pairings.get(s).expiry)) {\n                await this.deletePairing(s);\n                const { message: r } = J(\"EXPIRED\", `pairing topic: ${s}`);\n                throw new Error(r);\n            }\n        }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.pairings = new pr(this.core, this.logger, this.name, this.storagePrefix);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    registerRelayerEvents() {\n        this.core.relayer.on(He.message, async (e)=>{\n            const { topic: t, message: s } = e;\n            if (this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s))) return;\n            const r = await this.core.crypto.decode(t, s);\n            ji(r) ? (this.core.history.set(t, r), this.onRelayEventRequest({\n                topic: t,\n                payload: r\n            })) : Oi(r) && (await this.core.history.resolve(r), this.onRelayEventResponse({\n                topic: t,\n                payload: r\n            }));\n        });\n    }\n    registerExpirerEvents() {\n        this.core.expirer.on($t.expired, async (e)=>{\n            const { topic: t } = Sh(e.target);\n            t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(\"pairing_expire\", {\n                topic: t\n            }));\n        });\n    }\n}\nclass Ev extends Tm {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = X0, this.version = Z0, this.cached = [], this.initialized = !1, this.storagePrefix = ui, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s)=>this.records.set(s.id, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.set = (s, r, n)=>{\n            if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                topic: s,\n                request: r,\n                chainId: n\n            }), this.records.has(r.id)) return;\n            const o = {\n                id: r.id,\n                topic: s,\n                request: {\n                    method: r.method,\n                    params: r.params || null\n                },\n                chainId: n\n            };\n            this.records.set(o.id, o), this.events.emit(Kt.created, o);\n        }, this.resolve = async (s)=>{\n            if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                response: s\n            }), !this.records.has(s.id)) return;\n            const r = await this.getRecord(s.id);\n            typeof r.response > \"u\" && (r.response = Ge(s) ? {\n                error: s.error\n            } : {\n                result: s.result\n            }, this.records.set(r.id, r), this.events.emit(Kt.updated, r));\n        }, this.get = async (s, r)=>(this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                topic: s,\n                id: r\n            }), await this.getRecord(r)), this.delete = (s, r)=>{\n            this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                id: r\n            }), this.values.forEach((n)=>{\n                if (n.topic === s) {\n                    if (typeof r < \"u\" && n.id !== r) return;\n                    this.records.delete(n.id), this.events.emit(Kt.deleted, n);\n                }\n            });\n        }, this.exists = async (s, r)=>(this.isInitialized(), this.records.has(r) ? (await this.getRecord(r)).topic === s : !1), this.on = (s, r)=>{\n            this.events.on(s, r);\n        }, this.once = (s, r)=>{\n            this.events.once(s, r);\n        }, this.off = (s, r)=>{\n            this.events.off(s, r);\n        }, this.removeListener = (s, r)=>{\n            this.events.removeListener(s, r);\n        }, this.logger = ee.generateChildLogger(t, this.name);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    get size() {\n        return this.records.size;\n    }\n    get keys() {\n        return Array.from(this.records.keys());\n    }\n    get values() {\n        return Array.from(this.records.values());\n    }\n    get pending() {\n        const e = [];\n        return this.values.forEach((t)=>{\n            if (typeof t.response < \"u\") return;\n            const s = {\n                topic: t.topic,\n                request: ti(t.request.method, t.request.params, t.id),\n                chainId: t.chainId\n            };\n            return e.push(s);\n        }), e;\n    }\n    async setJsonRpcRecords(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getJsonRpcRecords() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getRecord(e) {\n        this.isInitialized();\n        const t = this.records.get(e);\n        if (!t) {\n            const { message: s } = J(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(s);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setJsonRpcRecords(this.values), this.events.emit(Kt.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getJsonRpcRecords();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.records.size) {\n                const { message: t } = J(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                records: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);\n        }\n    }\n    registerEventListeners() {\n        this.events.on(Kt.created, (e)=>{\n            const t = Kt.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        }), this.events.on(Kt.updated, (e)=>{\n            const t = Kt.updated;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        }), this.events.on(Kt.deleted, (e)=>{\n            const t = Kt.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass Sv extends qm {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.expirations = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = ev, this.version = tv, this.cached = [], this.initialized = !1, this.storagePrefix = ui, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s)=>this.expirations.set(s.target, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.has = (s)=>{\n            try {\n                const r = this.formatTarget(s);\n                return typeof this.getExpiration(r) < \"u\";\n            } catch  {\n                return !1;\n            }\n        }, this.set = (s, r)=>{\n            this.isInitialized();\n            const n = this.formatTarget(s), o = {\n                target: n,\n                expiry: r\n            };\n            this.expirations.set(n, o), this.checkExpiry(n, o), this.events.emit($t.created, {\n                target: n,\n                expiration: o\n            });\n        }, this.get = (s)=>{\n            this.isInitialized();\n            const r = this.formatTarget(s);\n            return this.getExpiration(r);\n        }, this.del = (s)=>{\n            if (this.isInitialized(), this.has(s)) {\n                const r = this.formatTarget(s), n = this.getExpiration(r);\n                this.expirations.delete(r), this.events.emit($t.deleted, {\n                    target: r,\n                    expiration: n\n                });\n            }\n        }, this.on = (s, r)=>{\n            this.events.on(s, r);\n        }, this.once = (s, r)=>{\n            this.events.once(s, r);\n        }, this.off = (s, r)=>{\n            this.events.off(s, r);\n        }, this.removeListener = (s, r)=>{\n            this.events.removeListener(s, r);\n        }, this.logger = ee.generateChildLogger(t, this.name);\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + \"//\" + this.name;\n    }\n    get length() {\n        return this.expirations.size;\n    }\n    get keys() {\n        return Array.from(this.expirations.keys());\n    }\n    get values() {\n        return Array.from(this.expirations.values());\n    }\n    formatTarget(e) {\n        if (typeof e == \"string\") return bb(e);\n        if (typeof e == \"number\") return wb(e);\n        const { message: t } = J(\"UNKNOWN_TYPE\", `Target type: ${typeof e}`);\n        throw new Error(t);\n    }\n    async setExpirations(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getExpirations() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    async persist() {\n        await this.setExpirations(this.values), this.events.emit($t.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getExpirations();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.expirations.size) {\n                const { message: t } = J(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                expirations: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);\n        }\n    }\n    getExpiration(e) {\n        const t = this.expirations.get(e);\n        if (!t) {\n            const { message: s } = J(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.error(s), new Error(s);\n        }\n        return t;\n    }\n    checkExpiry(e, t) {\n        const { expiry: s } = t;\n        V.toMiliseconds(s) - Date.now() <= 0 && this.expire(e, t);\n    }\n    expire(e, t) {\n        this.expirations.delete(e), this.events.emit($t.expired, {\n            target: e,\n            expiration: t\n        });\n    }\n    checkExpirations() {\n        this.core.relayer.connected && this.expirations.forEach((e, t)=>this.checkExpiry(t, e));\n    }\n    registerEventListeners() {\n        this.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, ()=>this.checkExpirations()), this.events.on($t.created, (e)=>{\n            const t = $t.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on($t.expired, (e)=>{\n            const t = $t.expired;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on($t.deleted, (e)=>{\n            const t = $t.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass Iv extends jm {\n    constructor(e, t){\n        super(e, t), this.projectId = e, this.logger = t, this.name = Tr, this.initialized = !1, this.init = async (s)=>{\n            wh() || !Nn() || (this.verifyUrl = s?.verifyUrl || Ta, await this.createIframe());\n        }, this.register = async (s)=>{\n            var r;\n            this.initialized || await this.init(), this.iframe && ((r = this.iframe.contentWindow) == null || r.postMessage(s.attestationId, this.verifyUrl), this.logger.info(`postMessage sent: ${s.attestationId} ${this.verifyUrl}`));\n        }, this.resolve = async (s)=>{\n            var r;\n            if (this.isDevEnv) return \"\";\n            this.logger.info(`resolving attestation: ${s.attestationId}`);\n            const n = this.startAbortTimer(V.FIVE_SECONDS), o = await fetch(`${this.verifyUrl}/attestation/${s.attestationId}`, {\n                signal: this.abortController.signal\n            });\n            return clearTimeout(n), o.status === 200 ? (r = await o.json()) == null ? void 0 : r.origin : \"\";\n        }, this.createIframe = async ()=>{\n            try {\n                await Promise.race([\n                    new Promise((s, r)=>{\n                        if (document.getElementById(Tr)) return s();\n                        const n = document.createElement(\"iframe\");\n                        n.setAttribute(\"id\", Tr), n.setAttribute(\"src\", `${this.verifyUrl}/${this.projectId}`), n.style.display = \"none\", n.addEventListener(\"load\", ()=>{\n                            this.initialized = !0, s();\n                        }), n.addEventListener(\"error\", (o)=>{\n                            r(o);\n                        }), document.body.append(n), this.iframe = n;\n                    }),\n                    new Promise((s)=>{\n                        setTimeout(()=>s(\"iframe load timeout\"), V.toMiliseconds(V.ONE_SECOND / 2));\n                    })\n                ]);\n            } catch (s) {\n                this.logger.error(`Verify iframe failed to load: ${this.verifyUrl}`), this.logger.error(s);\n            }\n        }, this.logger = ee.generateChildLogger(t, this.name), this.verifyUrl = Ta, this.abortController = new AbortController(), this.isDevEnv = On() && process.env.IS_VITEST;\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    startAbortTimer(e) {\n        return setTimeout(()=>this.abortController.abort(), V.toMiliseconds(e));\n    }\n}\nvar Dv = Object.defineProperty, za = Object.getOwnPropertySymbols, xv = Object.prototype.hasOwnProperty, Ov = Object.prototype.propertyIsEnumerable, Ka = (i, e, t)=>e in i ? Dv(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, Va = (i, e)=>{\n    for(var t in e || (e = {}))xv.call(e, t) && Ka(i, t, e[t]);\n    if (za) for (var t of za(e))Ov.call(e, t) && Ka(i, t, e[t]);\n    return i;\n};\nlet Nv = class jh extends Am {\n    constructor(e){\n        super(e), this.protocol = Lh, this.version = P0, this.name = Cn, this.events = new We.EventEmitter(), this.initialized = !1, this.on = (s, r)=>this.events.on(s, r), this.once = (s, r)=>this.events.once(s, r), this.off = (s, r)=>this.events.off(s, r), this.removeListener = (s, r)=>this.events.removeListener(s, r), this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || qh;\n        const t = typeof e?.logger < \"u\" && typeof e?.logger != \"string\" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({\n            level: e?.logger || R0.logger\n        }));\n        this.logger = ee.generateChildLogger(t, this.name), this.heartbeat = new Wt.HeartBeat(), this.crypto = new sv(this, this.logger, e?.keychain), this.history = new Ev(this, this.logger), this.expirer = new Sv(this, this.logger), this.storage = e != null && e.storage ? e.storage : new nc(Va(Va({}, C0), e?.storageOptions)), this.relayer = new mv({\n            core: this,\n            logger: this.logger,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId\n        }), this.pairing = new _v(this, this.logger), this.verify = new Iv(this.projectId || \"\", this.logger);\n    }\n    static async init(e) {\n        const t = new jh(e);\n        return await t.initialize(), t;\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    async start() {\n        this.initialized || await this.initialize();\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n        } catch (e) {\n            throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;\n        }\n    }\n};\nconst Pv = Nv, zh = \"wc\", Kh = 2, Vh = \"client\", An = `${zh}@${Kh}:${Vh}:`, Fr = {\n    name: Vh,\n    logger: \"error\",\n    controller: !1,\n    relayUrl: \"wss://relay.walletconnect.com\"\n}, Rv = \"proposal\", Cv = \"Proposal expired\", Av = \"session\", Ls = V.SEVEN_DAYS, Tv = \"engine\", ns = {\n    wc_sessionPropose: {\n        req: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1100\n        },\n        res: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1101\n        }\n    },\n    wc_sessionSettle: {\n        req: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1102\n        },\n        res: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1103\n        }\n    },\n    wc_sessionUpdate: {\n        req: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1104\n        },\n        res: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1105\n        }\n    },\n    wc_sessionExtend: {\n        req: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1106\n        },\n        res: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1107\n        }\n    },\n    wc_sessionRequest: {\n        req: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1108\n        },\n        res: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1109\n        }\n    },\n    wc_sessionEvent: {\n        req: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1110\n        },\n        res: {\n            ttl: V.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1111\n        }\n    },\n    wc_sessionDelete: {\n        req: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1112\n        },\n        res: {\n            ttl: V.ONE_DAY,\n            prompt: !1,\n            tag: 1113\n        }\n    },\n    wc_sessionPing: {\n        req: {\n            ttl: V.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1114\n        },\n        res: {\n            ttl: V.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1115\n        }\n    }\n}, Ur = {\n    min: V.FIVE_MINUTES,\n    max: V.SEVEN_DAYS\n}, $v = \"request\", Fv = [\n    \"wc_sessionPropose\",\n    \"wc_sessionRequest\",\n    \"wc_authRequest\"\n];\nvar Uv = Object.defineProperty, Lv = Object.defineProperties, Mv = Object.getOwnPropertyDescriptors, Ba = Object.getOwnPropertySymbols, qv = Object.prototype.hasOwnProperty, jv = Object.prototype.propertyIsEnumerable, ka = (i, e, t)=>e in i ? Uv(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[e] = t, At = (i, e)=>{\n    for(var t in e || (e = {}))qv.call(e, t) && ka(i, t, e[t]);\n    if (Ba) for (var t of Ba(e))jv.call(e, t) && ka(i, t, e[t]);\n    return i;\n}, Lr = (i, e)=>Lv(i, Mv(e));\nclass zv extends Km {\n    constructor(e){\n        super(e), this.name = Tv, this.events = new ir(), this.initialized = !1, this.ignoredPayloadTypes = [\n            Ni\n        ], this.init = async ()=>{\n            this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.client.core.pairing.register({\n                methods: Object.keys(ns)\n            }), this.initialized = !0);\n        }, this.connect = async (t)=>{\n            this.isInitialized();\n            const s = Lr(At({}, t), {\n                requiredNamespaces: t.requiredNamespaces || {},\n                optionalNamespaces: t.optionalNamespaces || {}\n            });\n            await this.isValidConnect(s);\n            const { pairingTopic: r, requiredNamespaces: n, optionalNamespaces: o, sessionProperties: c, relays: u } = s;\n            let d = r, p, b = !1;\n            if (d && (b = this.client.core.pairing.pairings.get(d).active), !d || !b) {\n                const { topic: D, uri: y } = await this.client.core.pairing.create();\n                d = D, p = y;\n            }\n            const x = await this.client.core.crypto.generateKeyPair(), O = At({\n                requiredNamespaces: n,\n                optionalNamespaces: o,\n                relays: u ?? [\n                    {\n                        protocol: Mh\n                    }\n                ],\n                proposer: {\n                    publicKey: x,\n                    metadata: this.client.metadata\n                }\n            }, c && {\n                sessionProperties: c\n            }), { reject: _, resolve: C, done: F } = Ti(V.FIVE_MINUTES, Cv);\n            if (this.events.once(ke(\"session_connect\"), async ({ error: D, session: y })=>{\n                if (D) _(D);\n                else if (y) {\n                    y.self.publicKey = x;\n                    const w = Lr(At({}, y), {\n                        requiredNamespaces: y.requiredNamespaces,\n                        optionalNamespaces: y.optionalNamespaces\n                    });\n                    await this.client.session.set(y.topic, w), await this.setExpiry(y.topic, y.expiry), d && await this.client.core.pairing.updateMetadata({\n                        topic: d,\n                        metadata: y.peer.metadata\n                    }), C(w);\n                }\n            }), !d) {\n                const { message: D } = J(\"NO_MATCHING_KEY\", `connect() pairing topic: ${d}`);\n                throw new Error(D);\n            }\n            const K = await this.sendRequest(d, \"wc_sessionPropose\", O), I = Ht(V.FIVE_MINUTES);\n            return await this.setProposal(K, At({\n                id: K,\n                expiry: I\n            }, O)), {\n                uri: p,\n                approval: F\n            };\n        }, this.pair = async (t)=>(this.isInitialized(), await this.client.core.pairing.pair(t)), this.approve = async (t)=>{\n            this.isInitialized(), await this.isValidApprove(t);\n            const { id: s, relayProtocol: r, namespaces: n, sessionProperties: o } = t, c = this.client.proposal.get(s);\n            let { pairingTopic: u, proposer: d, requiredNamespaces: p, optionalNamespaces: b } = c;\n            u = u || \"\", us(p) || (p = Tb(n, \"approve()\"));\n            const x = await this.client.core.crypto.generateKeyPair(), O = d.publicKey, _ = await this.client.core.crypto.generateSharedKey(x, O);\n            u && s && (await this.client.core.pairing.updateMetadata({\n                topic: u,\n                metadata: d.metadata\n            }), await this.sendResult(s, u, {\n                relay: {\n                    protocol: r ?? \"irn\"\n                },\n                responderPublicKey: x\n            }), await this.client.proposal.delete(s, Je(\"USER_DISCONNECTED\")), await this.client.core.pairing.activate({\n                topic: u\n            }));\n            const C = At({\n                relay: {\n                    protocol: r ?? \"irn\"\n                },\n                namespaces: n,\n                requiredNamespaces: p,\n                optionalNamespaces: b,\n                pairingTopic: u,\n                controller: {\n                    publicKey: x,\n                    metadata: this.client.metadata\n                },\n                expiry: Ht(Ls)\n            }, o && {\n                sessionProperties: o\n            });\n            await this.client.core.relayer.subscribe(_), await this.sendRequest(_, \"wc_sessionSettle\", C);\n            const F = Lr(At({}, C), {\n                topic: _,\n                pairingTopic: u,\n                acknowledged: !1,\n                self: C.controller,\n                peer: {\n                    publicKey: d.publicKey,\n                    metadata: d.metadata\n                },\n                controller: x\n            });\n            return await this.client.session.set(_, F), await this.setExpiry(_, Ht(Ls)), {\n                topic: _,\n                acknowledged: ()=>new Promise((K)=>setTimeout(()=>K(this.client.session.get(_)), 500))\n            };\n        }, this.reject = async (t)=>{\n            this.isInitialized(), await this.isValidReject(t);\n            const { id: s, reason: r } = t, { pairingTopic: n } = this.client.proposal.get(s);\n            n && (await this.sendError(s, n, r), await this.client.proposal.delete(s, Je(\"USER_DISCONNECTED\")));\n        }, this.update = async (t)=>{\n            this.isInitialized(), await this.isValidUpdate(t);\n            const { topic: s, namespaces: r } = t, n = await this.sendRequest(s, \"wc_sessionUpdate\", {\n                namespaces: r\n            }), { done: o, resolve: c, reject: u } = Ti();\n            return this.events.once(ke(\"session_update\", n), ({ error: d })=>{\n                d ? u(d) : c();\n            }), await this.client.session.update(s, {\n                namespaces: r\n            }), {\n                acknowledged: o\n            };\n        }, this.extend = async (t)=>{\n            this.isInitialized(), await this.isValidExtend(t);\n            const { topic: s } = t, r = await this.sendRequest(s, \"wc_sessionExtend\", {}), { done: n, resolve: o, reject: c } = Ti();\n            return this.events.once(ke(\"session_extend\", r), ({ error: u })=>{\n                u ? c(u) : o();\n            }), await this.setExpiry(s, Ht(Ls)), {\n                acknowledged: n\n            };\n        }, this.request = async (t)=>{\n            this.isInitialized(), await this.isValidRequest(t);\n            const { chainId: s, request: r, topic: n, expiry: o } = t, c = await this.sendRequest(n, \"wc_sessionRequest\", {\n                request: r,\n                chainId: s\n            }, o), { done: u, resolve: d, reject: p } = Ti(o);\n            return this.events.once(ke(\"session_request\", c), ({ error: b, result: x })=>{\n                b ? p(b) : d(x);\n            }), this.client.events.emit(\"session_request_sent\", {\n                topic: n,\n                request: r,\n                chainId: s,\n                id: c\n            }), await u();\n        }, this.respond = async (t)=>{\n            this.isInitialized(), await this.isValidRespond(t);\n            const { topic: s, response: r } = t, { id: n } = r;\n            ht(r) ? await this.sendResult(n, s, r.result) : Ge(r) && await this.sendError(n, s, r.error), this.deletePendingSessionRequest(t.response.id, {\n                message: \"fulfilled\",\n                code: 0\n            });\n        }, this.ping = async (t)=>{\n            this.isInitialized(), await this.isValidPing(t);\n            const { topic: s } = t;\n            if (this.client.session.keys.includes(s)) {\n                const r = await this.sendRequest(s, \"wc_sessionPing\", {}), { done: n, resolve: o, reject: c } = Ti();\n                this.events.once(ke(\"session_ping\", r), ({ error: u })=>{\n                    u ? c(u) : o();\n                }), await n();\n            } else this.client.core.pairing.pairings.keys.includes(s) && await this.client.core.pairing.ping({\n                topic: s\n            });\n        }, this.emit = async (t)=>{\n            this.isInitialized(), await this.isValidEmit(t);\n            const { topic: s, event: r, chainId: n } = t;\n            await this.sendRequest(s, \"wc_sessionEvent\", {\n                event: r,\n                chainId: n\n            });\n        }, this.disconnect = async (t)=>{\n            this.isInitialized(), await this.isValidDisconnect(t);\n            const { topic: s } = t;\n            this.client.session.keys.includes(s) ? (await this.sendRequest(s, \"wc_sessionDelete\", Je(\"USER_DISCONNECTED\")), await this.deleteSession(s)) : await this.client.core.pairing.disconnect({\n                topic: s\n            });\n        }, this.find = (t)=>(this.isInitialized(), this.client.session.getAll().filter((s)=>Ub(s, t))), this.getPendingSessionRequests = ()=>(this.isInitialized(), this.client.pendingRequest.getAll()), this.cleanupDuplicatePairings = async (t)=>{\n            try {\n                const s = this.client.core.pairing.pairings.get(t.pairingTopic), r = this.client.core.pairing.pairings.getAll().filter((n)=>{\n                    var o, c;\n                    return ((o = n.peerMetadata) == null ? void 0 : o.url) && ((c = n.peerMetadata) == null ? void 0 : c.url) === t.self.metadata.url && n.topic !== s.topic;\n                });\n                if (r.length === 0) return;\n                this.client.logger.info(`Cleaning up ${r.length} duplicate pairing(s)`), await Promise.all(r.map((n)=>this.client.core.pairing.disconnect({\n                        topic: n.topic\n                    }))), this.client.logger.info(\"Duplicate pairings clean up finished\");\n            } catch (s) {\n                this.client.logger.error(s);\n            }\n        }, this.deleteSession = async (t, s)=>{\n            const { self: r } = this.client.session.get(t);\n            await this.client.core.relayer.unsubscribe(t), await Promise.all([\n                this.client.session.delete(t, Je(\"USER_DISCONNECTED\")),\n                this.client.core.crypto.deleteKeyPair(r.publicKey),\n                this.client.core.crypto.deleteSymKey(t),\n                s ? Promise.resolve() : this.client.core.expirer.del(t)\n            ]);\n        }, this.deleteProposal = async (t, s)=>{\n            await Promise.all([\n                this.client.proposal.delete(t, Je(\"USER_DISCONNECTED\")),\n                s ? Promise.resolve() : this.client.core.expirer.del(t)\n            ]);\n        }, this.deletePendingSessionRequest = async (t, s, r = !1)=>{\n            await Promise.all([\n                this.client.pendingRequest.delete(t, s),\n                r ? Promise.resolve() : this.client.core.expirer.del(t)\n            ]);\n        }, this.setExpiry = async (t, s)=>{\n            this.client.session.keys.includes(t) && await this.client.session.update(t, {\n                expiry: s\n            }), this.client.core.expirer.set(t, s);\n        }, this.setProposal = async (t, s)=>{\n            await this.client.proposal.set(t, s), this.client.core.expirer.set(t, s.expiry);\n        }, this.setPendingSessionRequest = async (t)=>{\n            const s = ns.wc_sessionRequest.req.ttl, { id: r, topic: n, params: o } = t;\n            await this.client.pendingRequest.set(r, {\n                id: r,\n                topic: n,\n                params: o\n            }), s && this.client.core.expirer.set(r, Ht(s));\n        }, this.sendRequest = async (t, s, r, n)=>{\n            const o = ti(s, r);\n            if (Nn() && Fv.includes(s)) {\n                const d = Ui(JSON.stringify(o));\n                await this.client.core.verify.register({\n                    attestationId: d\n                });\n            }\n            const c = await this.client.core.crypto.encode(t, o), u = ns[s].req;\n            return n && (u.ttl = n), this.client.core.history.set(t, o), this.client.core.relayer.publish(t, c, u), o.id;\n        }, this.sendResult = async (t, s, r)=>{\n            const n = xi(t, r), o = await this.client.core.crypto.encode(s, n), c = await this.client.core.history.get(s, t), u = ns[c.request.method].res;\n            this.client.core.relayer.publish(s, o, u), await this.client.core.history.resolve(n);\n        }, this.sendError = async (t, s, r)=>{\n            const n = qi(t, r), o = await this.client.core.crypto.encode(s, n), c = await this.client.core.history.get(s, t), u = ns[c.request.method].res;\n            this.client.core.relayer.publish(s, o, u), await this.client.core.history.resolve(n);\n        }, this.cleanup = async ()=>{\n            const t = [], s = [];\n            this.client.session.getAll().forEach((r)=>{\n                ci(r.expiry) && t.push(r.topic);\n            }), this.client.proposal.getAll().forEach((r)=>{\n                ci(r.expiry) && s.push(r.id);\n            }), await Promise.all([\n                ...t.map((r)=>this.deleteSession(r)),\n                ...s.map((r)=>this.deleteProposal(r))\n            ]);\n        }, this.onRelayEventRequest = (t)=>{\n            const { topic: s, payload: r } = t, n = r.method;\n            switch(n){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeRequest(s, r);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleRequest(s, r);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateRequest(s, r);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendRequest(s, r);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingRequest(s, r);\n                case \"wc_sessionDelete\":\n                    return this.onSessionDeleteRequest(s, r);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequest(s, r);\n                case \"wc_sessionEvent\":\n                    return this.onSessionEventRequest(s, r);\n                default:\n                    return this.client.logger.info(`Unsupported request method ${n}`);\n            }\n        }, this.onRelayEventResponse = async (t)=>{\n            const { topic: s, payload: r } = t, n = (await this.client.core.history.get(s, r.id)).request.method;\n            switch(n){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeResponse(s, r);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleResponse(s, r);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateResponse(s, r);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendResponse(s, r);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingResponse(s, r);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequestResponse(s, r);\n                default:\n                    return this.client.logger.info(`Unsupported response method ${n}`);\n            }\n        }, this.onSessionProposeRequest = async (t, s)=>{\n            const { params: r, id: n } = s;\n            try {\n                this.isValidConnect(At({}, s.params));\n                const o = Ht(V.FIVE_MINUTES), c = At({\n                    id: n,\n                    pairingTopic: t,\n                    expiry: o\n                }, r);\n                await this.setProposal(n, c);\n                const u = Ui(JSON.stringify(s)), d = await this.getVerifyContext(u, c.proposer.metadata);\n                this.client.events.emit(\"session_proposal\", {\n                    id: n,\n                    params: c,\n                    verifyContext: d\n                });\n            } catch (o) {\n                await this.sendError(n, t, o), this.client.logger.error(o);\n            }\n        }, this.onSessionProposeResponse = async (t, s)=>{\n            const { id: r } = s;\n            if (ht(s)) {\n                const { result: n } = s;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    result: n\n                });\n                const o = this.client.proposal.get(r);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    proposal: o\n                });\n                const c = o.proposer.publicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    selfPublicKey: c\n                });\n                const u = n.responderPublicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    peerPublicKey: u\n                });\n                const d = await this.client.core.crypto.generateSharedKey(c, u);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    sessionTopic: d\n                });\n                const p = await this.client.core.relayer.subscribe(d);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    subscriptionId: p\n                }), await this.client.core.pairing.activate({\n                    topic: t\n                });\n            } else Ge(s) && (await this.client.proposal.delete(r, Je(\"USER_DISCONNECTED\")), this.events.emit(ke(\"session_connect\"), {\n                error: s.error\n            }));\n        }, this.onSessionSettleRequest = async (t, s)=>{\n            const { id: r, params: n } = s;\n            try {\n                this.isValidSessionSettleRequest(n);\n                const { relay: o, controller: c, expiry: u, namespaces: d, requiredNamespaces: p, optionalNamespaces: b, sessionProperties: x, pairingTopic: O } = s.params, _ = At({\n                    topic: t,\n                    relay: o,\n                    expiry: u,\n                    namespaces: d,\n                    acknowledged: !0,\n                    pairingTopic: O,\n                    requiredNamespaces: p,\n                    optionalNamespaces: b,\n                    controller: c.publicKey,\n                    self: {\n                        publicKey: \"\",\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: c.publicKey,\n                        metadata: c.metadata\n                    }\n                }, x && {\n                    sessionProperties: x\n                });\n                await this.sendResult(s.id, t, !0), this.events.emit(ke(\"session_connect\"), {\n                    session: _\n                }), this.cleanupDuplicatePairings(_);\n            } catch (o) {\n                await this.sendError(r, t, o), this.client.logger.error(o);\n            }\n        }, this.onSessionSettleResponse = async (t, s)=>{\n            const { id: r } = s;\n            ht(s) ? (await this.client.session.update(t, {\n                acknowledged: !0\n            }), this.events.emit(ke(\"session_approve\", r), {})) : Ge(s) && (await this.client.session.delete(t, Je(\"USER_DISCONNECTED\")), this.events.emit(ke(\"session_approve\", r), {\n                error: s.error\n            }));\n        }, this.onSessionUpdateRequest = async (t, s)=>{\n            const { params: r, id: n } = s;\n            try {\n                this.isValidUpdate(At({\n                    topic: t\n                }, r)), await this.client.session.update(t, {\n                    namespaces: r.namespaces\n                }), await this.sendResult(n, t, !0), this.client.events.emit(\"session_update\", {\n                    id: n,\n                    topic: t,\n                    params: r\n                });\n            } catch (o) {\n                await this.sendError(n, t, o), this.client.logger.error(o);\n            }\n        }, this.onSessionUpdateResponse = (t, s)=>{\n            const { id: r } = s;\n            ht(s) ? this.events.emit(ke(\"session_update\", r), {}) : Ge(s) && this.events.emit(ke(\"session_update\", r), {\n                error: s.error\n            });\n        }, this.onSessionExtendRequest = async (t, s)=>{\n            const { id: r } = s;\n            try {\n                this.isValidExtend({\n                    topic: t\n                }), await this.setExpiry(t, Ht(Ls)), await this.sendResult(r, t, !0), this.client.events.emit(\"session_extend\", {\n                    id: r,\n                    topic: t\n                });\n            } catch (n) {\n                await this.sendError(r, t, n), this.client.logger.error(n);\n            }\n        }, this.onSessionExtendResponse = (t, s)=>{\n            const { id: r } = s;\n            ht(s) ? this.events.emit(ke(\"session_extend\", r), {}) : Ge(s) && this.events.emit(ke(\"session_extend\", r), {\n                error: s.error\n            });\n        }, this.onSessionPingRequest = async (t, s)=>{\n            const { id: r } = s;\n            try {\n                this.isValidPing({\n                    topic: t\n                }), await this.sendResult(r, t, !0), this.client.events.emit(\"session_ping\", {\n                    id: r,\n                    topic: t\n                });\n            } catch (n) {\n                await this.sendError(r, t, n), this.client.logger.error(n);\n            }\n        }, this.onSessionPingResponse = (t, s)=>{\n            const { id: r } = s;\n            setTimeout(()=>{\n                ht(s) ? this.events.emit(ke(\"session_ping\", r), {}) : Ge(s) && this.events.emit(ke(\"session_ping\", r), {\n                    error: s.error\n                });\n            }, 500);\n        }, this.onSessionDeleteRequest = async (t, s)=>{\n            const { id: r } = s;\n            try {\n                this.isValidDisconnect({\n                    topic: t,\n                    reason: s.params\n                }), await Promise.all([\n                    new Promise((n)=>{\n                        this.client.core.relayer.once(He.publish, async ()=>{\n                            n(await this.deleteSession(t));\n                        });\n                    }),\n                    this.sendResult(r, t, !0)\n                ]), this.client.events.emit(\"session_delete\", {\n                    id: r,\n                    topic: t\n                });\n            } catch (n) {\n                await this.sendError(r, t, n), this.client.logger.error(n);\n            }\n        }, this.onSessionRequest = async (t, s)=>{\n            const { id: r, params: n } = s;\n            try {\n                this.isValidRequest(At({\n                    topic: t\n                }, n)), await this.setPendingSessionRequest({\n                    id: r,\n                    topic: t,\n                    params: n\n                });\n                const o = Ui(JSON.stringify(s)), c = this.client.session.get(t), u = await this.getVerifyContext(o, c.peer.metadata);\n                this.client.events.emit(\"session_request\", {\n                    id: r,\n                    topic: t,\n                    params: n,\n                    verifyContext: u\n                });\n            } catch (o) {\n                await this.sendError(r, t, o), this.client.logger.error(o);\n            }\n        }, this.onSessionRequestResponse = (t, s)=>{\n            const { id: r } = s;\n            ht(s) ? this.events.emit(ke(\"session_request\", r), {\n                result: s.result\n            }) : Ge(s) && this.events.emit(ke(\"session_request\", r), {\n                error: s.error\n            });\n        }, this.onSessionEventRequest = async (t, s)=>{\n            const { id: r, params: n } = s;\n            try {\n                this.isValidEmit(At({\n                    topic: t\n                }, n)), this.client.events.emit(\"session_event\", {\n                    id: r,\n                    topic: t,\n                    params: n\n                });\n            } catch (o) {\n                await this.sendError(r, t, o), this.client.logger.error(o);\n            }\n        }, this.isValidConnect = async (t)=>{\n            if (!It(t)) {\n                const { message: u } = J(\"MISSING_OR_INVALID\", `connect() params: ${JSON.stringify(t)}`);\n                throw new Error(u);\n            }\n            const { pairingTopic: s, requiredNamespaces: r, optionalNamespaces: n, sessionProperties: o, relays: c } = t;\n            if (wt(s) || await this.isValidPairingTopic(s), !Wb(c, !0)) {\n                const { message: u } = J(\"MISSING_OR_INVALID\", `connect() relays: ${c}`);\n                throw new Error(u);\n            }\n            !wt(r) && us(r) !== 0 && this.validateNamespaces(r, \"requiredNamespaces\"), !wt(n) && us(n) !== 0 && this.validateNamespaces(n, \"optionalNamespaces\"), wt(o) || this.validateSessionProps(o, \"sessionProperties\");\n        }, this.validateNamespaces = (t, s)=>{\n            const r = Gb(t, \"connect()\", s);\n            if (r) throw new Error(r.message);\n        }, this.isValidApprove = async (t)=>{\n            if (!It(t)) throw new Error(J(\"MISSING_OR_INVALID\", `approve() params: ${t}`).message);\n            const { id: s, namespaces: r, relayProtocol: n, sessionProperties: o } = t;\n            await this.isValidProposalId(s);\n            const c = this.client.proposal.get(s), u = Bs(r, \"approve()\");\n            if (u) throw new Error(u.message);\n            const d = Ia(c.requiredNamespaces, r, \"approve()\");\n            if (d) throw new Error(d.message);\n            if (!at(n, !0)) {\n                const { message: p } = J(\"MISSING_OR_INVALID\", `approve() relayProtocol: ${n}`);\n                throw new Error(p);\n            }\n            wt(o) || this.validateSessionProps(o, \"sessionProperties\");\n        }, this.isValidReject = async (t)=>{\n            if (!It(t)) {\n                const { message: n } = J(\"MISSING_OR_INVALID\", `reject() params: ${t}`);\n                throw new Error(n);\n            }\n            const { id: s, reason: r } = t;\n            if (await this.isValidProposalId(s), !Jb(r)) {\n                const { message: n } = J(\"MISSING_OR_INVALID\", `reject() reason: ${JSON.stringify(r)}`);\n                throw new Error(n);\n            }\n        }, this.isValidSessionSettleRequest = (t)=>{\n            if (!It(t)) {\n                const { message: d } = J(\"MISSING_OR_INVALID\", `onSessionSettleRequest() params: ${t}`);\n                throw new Error(d);\n            }\n            const { relay: s, controller: r, namespaces: n, expiry: o } = t;\n            if (!Dh(s)) {\n                const { message: d } = J(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n                throw new Error(d);\n            }\n            const c = zb(r, \"onSessionSettleRequest()\");\n            if (c) throw new Error(c.message);\n            const u = Bs(n, \"onSessionSettleRequest()\");\n            if (u) throw new Error(u.message);\n            if (ci(o)) {\n                const { message: d } = J(\"EXPIRED\", \"onSessionSettleRequest()\");\n                throw new Error(d);\n            }\n        }, this.isValidUpdate = async (t)=>{\n            if (!It(t)) {\n                const { message: u } = J(\"MISSING_OR_INVALID\", `update() params: ${t}`);\n                throw new Error(u);\n            }\n            const { topic: s, namespaces: r } = t;\n            await this.isValidSessionTopic(s);\n            const n = this.client.session.get(s), o = Bs(r, \"update()\");\n            if (o) throw new Error(o.message);\n            const c = Ia(n.requiredNamespaces, r, \"update()\");\n            if (c) throw new Error(c.message);\n        }, this.isValidExtend = async (t)=>{\n            if (!It(t)) {\n                const { message: r } = J(\"MISSING_OR_INVALID\", `extend() params: ${t}`);\n                throw new Error(r);\n            }\n            const { topic: s } = t;\n            await this.isValidSessionTopic(s);\n        }, this.isValidRequest = async (t)=>{\n            if (!It(t)) {\n                const { message: u } = J(\"MISSING_OR_INVALID\", `request() params: ${t}`);\n                throw new Error(u);\n            }\n            const { topic: s, request: r, chainId: n, expiry: o } = t;\n            await this.isValidSessionTopic(s);\n            const { namespaces: c } = this.client.session.get(s);\n            if (!Sa(c, n)) {\n                const { message: u } = J(\"MISSING_OR_INVALID\", `request() chainId: ${n}`);\n                throw new Error(u);\n            }\n            if (!Qb(r)) {\n                const { message: u } = J(\"MISSING_OR_INVALID\", `request() ${JSON.stringify(r)}`);\n                throw new Error(u);\n            }\n            if (!ew(c, n, r.method)) {\n                const { message: u } = J(\"MISSING_OR_INVALID\", `request() method: ${r.method}`);\n                throw new Error(u);\n            }\n            if (o && !rw(o, Ur)) {\n                const { message: u } = J(\"MISSING_OR_INVALID\", `request() expiry: ${o}. Expiry must be a number (in seconds) between ${Ur.min} and ${Ur.max}`);\n                throw new Error(u);\n            }\n        }, this.isValidRespond = async (t)=>{\n            if (!It(t)) {\n                const { message: n } = J(\"MISSING_OR_INVALID\", `respond() params: ${t}`);\n                throw new Error(n);\n            }\n            const { topic: s, response: r } = t;\n            if (await this.isValidSessionTopic(s), !Xb(r)) {\n                const { message: n } = J(\"MISSING_OR_INVALID\", `respond() response: ${JSON.stringify(r)}`);\n                throw new Error(n);\n            }\n        }, this.isValidPing = async (t)=>{\n            if (!It(t)) {\n                const { message: r } = J(\"MISSING_OR_INVALID\", `ping() params: ${t}`);\n                throw new Error(r);\n            }\n            const { topic: s } = t;\n            await this.isValidSessionOrPairingTopic(s);\n        }, this.isValidEmit = async (t)=>{\n            if (!It(t)) {\n                const { message: c } = J(\"MISSING_OR_INVALID\", `emit() params: ${t}`);\n                throw new Error(c);\n            }\n            const { topic: s, event: r, chainId: n } = t;\n            await this.isValidSessionTopic(s);\n            const { namespaces: o } = this.client.session.get(s);\n            if (!Sa(o, n)) {\n                const { message: c } = J(\"MISSING_OR_INVALID\", `emit() chainId: ${n}`);\n                throw new Error(c);\n            }\n            if (!Zb(r)) {\n                const { message: c } = J(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(r)}`);\n                throw new Error(c);\n            }\n            if (!tw(o, n, r.name)) {\n                const { message: c } = J(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(r)}`);\n                throw new Error(c);\n            }\n        }, this.isValidDisconnect = async (t)=>{\n            if (!It(t)) {\n                const { message: r } = J(\"MISSING_OR_INVALID\", `disconnect() params: ${t}`);\n                throw new Error(r);\n            }\n            const { topic: s } = t;\n            await this.isValidSessionOrPairingTopic(s);\n        }, this.getVerifyContext = async (t, s)=>{\n            const r = {\n                verified: {\n                    verifyUrl: s.verifyUrl || \"\",\n                    validation: \"UNKNOWN\",\n                    origin: s.url || \"\"\n                }\n            };\n            try {\n                const n = await this.client.core.verify.resolve({\n                    attestationId: t,\n                    verifyUrl: s.verifyUrl\n                });\n                n && (r.verified.origin = n, r.verified.validation = n === s.url ? \"VALID\" : \"INVALID\");\n            } catch (n) {\n                this.client.logger.error(n);\n            }\n            return this.client.logger.info(`Verify context: ${JSON.stringify(r)}`), r;\n        }, this.validateSessionProps = (t, s)=>{\n            Object.values(t).forEach((r)=>{\n                if (!at(r, !1)) {\n                    const { message: n } = J(\"MISSING_OR_INVALID\", `${s} must be in Record<string, string> format. Received: ${JSON.stringify(r)}`);\n                    throw new Error(n);\n                }\n            });\n        };\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    registerRelayerEvents() {\n        this.client.core.relayer.on(He.message, async (e)=>{\n            const { topic: t, message: s } = e;\n            if (this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s))) return;\n            const r = await this.client.core.crypto.decode(t, s);\n            ji(r) ? (this.client.core.history.set(t, r), this.onRelayEventRequest({\n                topic: t,\n                payload: r\n            })) : Oi(r) && (await this.client.core.history.resolve(r), this.onRelayEventResponse({\n                topic: t,\n                payload: r\n            }));\n        });\n    }\n    registerExpirerEvents() {\n        this.client.core.expirer.on($t.expired, async (e)=>{\n            const { topic: t, id: s } = Sh(e.target);\n            if (s && this.client.pendingRequest.keys.includes(s)) return await this.deletePendingSessionRequest(s, J(\"EXPIRED\"), !0);\n            t ? this.client.session.keys.includes(t) && (await this.deleteSession(t, !0), this.client.events.emit(\"session_expire\", {\n                topic: t\n            })) : s && (await this.deleteProposal(s, !0), this.client.events.emit(\"proposal_expire\", {\n                id: s\n            }));\n        });\n    }\n    isValidPairingTopic(e) {\n        if (!at(e, !1)) {\n            const { message: t } = J(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${e}`);\n            throw new Error(t);\n        }\n        if (!this.client.core.pairing.pairings.keys.includes(e)) {\n            const { message: t } = J(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${e}`);\n            throw new Error(t);\n        }\n        if (ci(this.client.core.pairing.pairings.get(e).expiry)) {\n            const { message: t } = J(\"EXPIRED\", `pairing topic: ${e}`);\n            throw new Error(t);\n        }\n    }\n    async isValidSessionTopic(e) {\n        if (!at(e, !1)) {\n            const { message: t } = J(\"MISSING_OR_INVALID\", `session topic should be a string: ${e}`);\n            throw new Error(t);\n        }\n        if (!this.client.session.keys.includes(e)) {\n            const { message: t } = J(\"NO_MATCHING_KEY\", `session topic doesn't exist: ${e}`);\n            throw new Error(t);\n        }\n        if (ci(this.client.session.get(e).expiry)) {\n            await this.deleteSession(e);\n            const { message: t } = J(\"EXPIRED\", `session topic: ${e}`);\n            throw new Error(t);\n        }\n    }\n    async isValidSessionOrPairingTopic(e) {\n        if (this.client.session.keys.includes(e)) await this.isValidSessionTopic(e);\n        else if (this.client.core.pairing.pairings.keys.includes(e)) this.isValidPairingTopic(e);\n        else if (at(e, !1)) {\n            const { message: t } = J(\"NO_MATCHING_KEY\", `session or pairing topic doesn't exist: ${e}`);\n            throw new Error(t);\n        } else {\n            const { message: t } = J(\"MISSING_OR_INVALID\", `session or pairing topic should be a string: ${e}`);\n            throw new Error(t);\n        }\n    }\n    async isValidProposalId(e) {\n        if (!Yb(e)) {\n            const { message: t } = J(\"MISSING_OR_INVALID\", `proposal id should be a number: ${e}`);\n            throw new Error(t);\n        }\n        if (!this.client.proposal.keys.includes(e)) {\n            const { message: t } = J(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${e}`);\n            throw new Error(t);\n        }\n        if (ci(this.client.proposal.get(e).expiry)) {\n            await this.deleteProposal(e);\n            const { message: t } = J(\"EXPIRED\", `proposal id: ${e}`);\n            throw new Error(t);\n        }\n    }\n}\nclass Kv extends pr {\n    constructor(e, t){\n        super(e, t, Rv, An), this.core = e, this.logger = t;\n    }\n}\nclass Vv extends pr {\n    constructor(e, t){\n        super(e, t, Av, An), this.core = e, this.logger = t;\n    }\n}\nclass Bv extends pr {\n    constructor(e, t){\n        super(e, t, $v, An, (s)=>s.id), this.core = e, this.logger = t;\n    }\n}\nclass Tn extends zm {\n    constructor(e){\n        super(e), this.protocol = zh, this.version = Kh, this.name = Fr.name, this.events = new We.EventEmitter(), this.on = (s, r)=>this.events.on(s, r), this.once = (s, r)=>this.events.once(s, r), this.off = (s, r)=>this.events.off(s, r), this.removeListener = (s, r)=>this.events.removeListener(s, r), this.removeAllListeners = (s)=>this.events.removeAllListeners(s), this.connect = async (s)=>{\n            try {\n                return await this.engine.connect(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.pair = async (s)=>{\n            try {\n                return await this.engine.pair(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.approve = async (s)=>{\n            try {\n                return await this.engine.approve(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.reject = async (s)=>{\n            try {\n                return await this.engine.reject(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.update = async (s)=>{\n            try {\n                return await this.engine.update(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.extend = async (s)=>{\n            try {\n                return await this.engine.extend(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.request = async (s)=>{\n            try {\n                return await this.engine.request(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.respond = async (s)=>{\n            try {\n                return await this.engine.respond(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.ping = async (s)=>{\n            try {\n                return await this.engine.ping(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.emit = async (s)=>{\n            try {\n                return await this.engine.emit(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.disconnect = async (s)=>{\n            try {\n                return await this.engine.disconnect(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.find = (s)=>{\n            try {\n                return this.engine.find(s);\n            } catch (r) {\n                throw this.logger.error(r.message), r;\n            }\n        }, this.getPendingSessionRequests = ()=>{\n            try {\n                return this.engine.getPendingSessionRequests();\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.name = e?.name || Fr.name, this.metadata = e?.metadata || fb();\n        const t = typeof e?.logger < \"u\" && typeof e?.logger != \"string\" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({\n            level: e?.logger || Fr.logger\n        }));\n        this.core = e?.core || new Pv(e), this.logger = ee.generateChildLogger(t, this.name), this.session = new Vv(this.core, this.logger), this.proposal = new Kv(this.core, this.logger), this.pendingRequest = new Bv(this.core, this.logger), this.engine = new zv(this);\n    }\n    static async init(e) {\n        const t = new Tn(e);\n        return await t.initialize(), t;\n    }\n    get context() {\n        return ee.getLoggerContext(this.logger);\n    }\n    get pairing() {\n        return this.core.pairing.pairings;\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.engine.init(), this.core.verify.init({\n                verifyUrl: this.metadata.verifyUrl\n            }), this.logger.info(\"SignClient Initialization Success\");\n        } catch (e) {\n            throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(e.message), e;\n        }\n    }\n}\nfunction kv(i) {\n    return typeof i < \"u\" && typeof i.context < \"u\";\n}\nconst Gt = {\n    init: \"signer_init\",\n    uri: \"signer_uri\",\n    created: \"signer_created\",\n    updated: \"signer_updated\",\n    deleted: \"signer_deleted\",\n    event: \"signer_event\"\n};\nclass Hv extends Dg {\n    constructor(e){\n        super(), this.events = new We.EventEmitter(), this.pending = !1, this.initializing = !1, this.requiredNamespaces = e?.requiredNamespaces || {}, this.opts = e?.client;\n    }\n    get connected() {\n        return typeof this.session < \"u\";\n    }\n    get connecting() {\n        return this.pending;\n    }\n    get chains() {\n        return this.session ? Ym(this.session.namespaces) : Jm(this.requiredNamespaces);\n    }\n    get accounts() {\n        return this.session ? Wm(this.session.namespaces) : [];\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async open() {\n        if (this.pending) return new Promise((e, t)=>{\n            this.events.once(\"open\", ()=>{\n                if (this.events.once(\"open_error\", (s)=>{\n                    t(s);\n                }), typeof this.client > \"u\") return t(new Error(\"Sign Client not initialized\"));\n                e();\n            });\n        });\n        try {\n            this.pending = !0;\n            const e = await this.register(), t = e.find({\n                requiredNamespaces: this.requiredNamespaces\n            });\n            if (t.length) return this.onOpen(t[0]);\n            const { uri: s, approval: r } = await e.connect({\n                requiredNamespaces: this.requiredNamespaces\n            });\n            this.events.emit(Gt.uri, {\n                uri: s\n            }), this.session = await r(), this.events.emit(Gt.created, this.session), this.onOpen();\n        } catch (e) {\n            throw this.events.emit(\"open_error\", e), e;\n        }\n    }\n    async close() {\n        typeof this.session > \"u\" || (await (await this.register()).disconnect({\n            topic: this.session.topic,\n            reason: Je(\"USER_DISCONNECTED\")\n        }), this.onClose());\n    }\n    async send(e, t) {\n        if (typeof this.client > \"u\" && (this.client = await this.register(), this.connected || await this.open()), typeof this.session > \"u\") throw new Error(\"Signer connection is missing session\");\n        this.client.request({\n            topic: this.session.topic,\n            request: e,\n            chainId: t?.chainId\n        }).then((s)=>this.events.emit(\"payload\", xi(e.id, s))).catch((s)=>this.events.emit(\"payload\", qi(e.id, s.message)));\n    }\n    async register(e = this.opts) {\n        if (typeof this.client < \"u\") return this.client;\n        if (this.initializing) return new Promise((t, s)=>{\n            this.events.once(\"register_error\", (r)=>{\n                s(r);\n            }), this.events.once(Gt.init, ()=>{\n                if (typeof this.client > \"u\") return s(new Error(\"Sign Client not initialized\"));\n                t(this.client);\n            });\n        });\n        if (kv(e)) return this.client = e, this.registerEventListeners(), this.client;\n        try {\n            return this.initializing = !0, this.client = await Tn.init(e), this.initializing = !1, this.registerEventListeners(), this.events.emit(Gt.init), this.client;\n        } catch (t) {\n            throw this.events.emit(\"register_error\", t), t;\n        }\n    }\n    onOpen(e) {\n        this.pending = !1, e && (this.session = e), this.events.emit(\"open\");\n    }\n    onClose() {\n        this.pending = !1, this.client && (this.client = void 0), this.events.emit(\"close\");\n    }\n    registerEventListeners() {\n        typeof this.client < \"u\" && (this.client.on(\"session_event\", (e)=>{\n            var t;\n            this.session && ((t = this.session) == null ? void 0 : t.topic) !== e.topic || this.events.emit(Gt.event, e.params);\n        }), this.client.on(\"session_update\", (e)=>{\n            var t;\n            typeof this.client < \"u\" && (this.session && ((t = this.session) == null ? void 0 : t.topic) !== e.topic || (this.session = this.client.session.get(e.topic), this.events.emit(Gt.updated, this.session)));\n        }), this.client.on(\"session_delete\", (e)=>{\n            var t;\n            this.session && (this.session && ((t = this.session) == null ? void 0 : t.topic) !== e.topic || (this.onClose(), this.events.emit(Gt.deleted, this.session), this.session = void 0));\n        }));\n    }\n}\nconst Bh = \":\";\nfunction Gv(i) {\n    const { namespace: e, reference: t } = i;\n    return [\n        e,\n        t\n    ].join(Bh);\n}\nfunction Wv(i) {\n    const [e, t, s] = i.split(Bh);\n    return {\n        namespace: e,\n        reference: t,\n        address: s\n    };\n}\nfunction Yv(i, e) {\n    const t = [];\n    return i.forEach((s)=>{\n        const r = e(s);\n        t.includes(r) || t.push(r);\n    }), t;\n}\nfunction Jv(i) {\n    const { namespace: e, reference: t } = Wv(i);\n    return Gv({\n        namespace: e,\n        reference: t\n    });\n}\nfunction Qv(i) {\n    return Yv(i, Jv);\n}\nfunction Xv(i, e = []) {\n    const t = [];\n    return Object.keys(i).forEach((s)=>{\n        if (e.length && !e.includes(s)) return;\n        const r = i[s];\n        t.push(...r.accounts);\n    }), t;\n}\nfunction Zv(i, e = []) {\n    const t = [];\n    return Object.keys(i).forEach((s)=>{\n        if (e.length && !e.includes(s)) return;\n        const r = i[s];\n        t.push(...Qv(r.accounts));\n    }), t;\n}\nclass e_ {\n    constructor(){\n        we(this, \"accounts\", []);\n        we(this, \"eventEmitter\", new We.EventEmitter());\n        we(this, \"updateSession\", (e)=>{\n            if (!this.isValidSession(e)) throw console.warn(\"updateSession incompatible session\", e, \"for adapter\", this.formatChainId(this.chainId)), new Error(\"Invalid session\");\n            this.session = e;\n            const t = Zv(e.namespaces, [\n                this.namespace\n            ]);\n            this.setChainIds(t);\n            const s = Xv(e.namespaces, [\n                this.namespace\n            ]);\n            this.setAccounts(s);\n        });\n        we(this, \"isValidSession\", ({ namespaces: e, requiredNamespaces: t })=>{\n            const s = this.formatChainId(this.chainId);\n            return t ? !!t[this.namespace]?.chains?.includes(s) : !!e?.[this.namespace]?.accounts.some((r)=>r.startsWith(s));\n        });\n    }\n    getRequiredNamespaces() {\n        const e = [\n            this.formatChainId(this.chainId)\n        ];\n        return {\n            [this.namespace]: {\n                chains: e,\n                methods: this.methods,\n                events: this.events\n            }\n        };\n    }\n    isCompatibleChainId(e) {\n        return typeof e == \"string\" ? e.startsWith(`${this.namespace}:`) : !1;\n    }\n    setChainIds(e) {\n        const s = e.filter((r)=>this.isCompatibleChainId(r)).map((r)=>this.parseChainId(r)).filter((r)=>r !== this.chainId);\n        s.length && (this.chainId = s[0], this.eventEmitter.emit(\"chainChanged\", this.chainId));\n    }\n    setChainId(e) {\n        if (this.isCompatibleChainId(e)) {\n            const t = this.parseChainId(e);\n            this.chainId = t, this.eventEmitter.emit(\"chainChanged\", this.chainId);\n        }\n    }\n    parseAccountId(e) {\n        const [t, s, r] = e.split(\":\");\n        return {\n            chainId: `${t}:${s}`,\n            address: r\n        };\n    }\n    getSignerConnection(e) {\n        return new Hv({\n            requiredNamespaces: {\n                [this.namespace]: {\n                    chains: this.rpc.chains,\n                    methods: this.rpc.methods,\n                    events: this.rpc.events\n                }\n            },\n            client: e\n        });\n    }\n    registerEventListeners() {\n        this.rpcProvider.on(\"connect\", ()=>{\n            const { chains: e, accounts: t } = this.signerConnection;\n            e?.length && this.setChainIds(e), t?.length && this.setAccounts(t);\n        }), this.signerConnection.on(Gt.created, this.updateSession), this.signerConnection.on(Gt.updated, this.updateSession), this.signerConnection.on(Gt.event, (e)=>{\n            if (!this.rpc.chains.includes(e.chainId)) return;\n            const { event: t } = e;\n            t.name === \"accountsChanged\" ? (this.accounts = t.data, this.eventEmitter.emit(\"accountsChanged\", this.accounts)) : t.name === \"chainChanged\" ? this.setChainId(t.data) : this.eventEmitter.emit(t.name, t.data);\n        }), this.rpcProvider.on(\"disconnect\", ()=>{\n            this.eventEmitter.emit(\"disconnect\");\n        });\n    }\n}\nclass Ha extends starknet__WEBPACK_IMPORTED_MODULE_1__.Account {\n    constructor(e, t, s, r){\n        super(e, t, s), this.wallet = r;\n    }\n    async execute(e, t = void 0, s = {}) {\n        return e = Array.isArray(e) ? e : [\n            e\n        ], await this.wallet.starknet_requestAddInvokeTransaction({\n            accountAddress: this.address,\n            executionRequest: {\n                calls: e,\n                abis: t,\n                invocationDetails: s\n            }\n        });\n    }\n    async declare(e, t) {\n        throw new Error(\"Not supported via Argent Login\");\n    }\n    async deployAccount(e, t) {\n        throw new Error(\"Not supported via Argent Login\");\n    }\n}\nclass t_ {\n    constructor(e){\n        this.wallet = e;\n    }\n    async getPubKey() {\n        throw new Error(\"Not supported via Argent Login\");\n    }\n    async signMessage(e, t) {\n        const { signature: s } = await this.wallet.starknet_signTypedData({\n            accountAddress: t,\n            typedData: e\n        });\n        return s;\n    }\n    async signTransaction(e, t, s) {\n        throw new Error(\"Not supported via Argent Login\");\n    }\n    async signDeployAccountTransaction(e) {\n        throw new Error(\"Not supported via Argent Login\");\n    }\n    async signDeclareTransaction(e) {\n        throw new Error(\"Not supported via Argent Login\");\n    }\n}\nconst i_ = (i)=>i.replace(/^SN_/, \"SN\"), s_ = (i)=>i.replace(/^SN/, \"SN_\");\nclass r_ extends e_ {\n    constructor({ client: t, chainId: s, rpcUrl: r, provider: n }){\n        super();\n        we(this, \"id\", \"argentMobile\");\n        we(this, \"name\", \"Argent Mobile\");\n        we(this, \"version\", \"0.1.0\");\n        we(this, \"icon\", \"\");\n        we(this, \"provider\");\n        we(this, \"signer\");\n        we(this, \"account\");\n        we(this, \"selectedAddress\", \"\");\n        // NamespaceAdapter\n        we(this, \"namespace\", \"starknet\");\n        we(this, \"methods\", [\n            \"starknet_signTypedData\",\n            \"starknet_requestAddInvokeTransaction\"\n        ]);\n        we(this, \"events\", [\n            \"chainChanged\",\n            \"accountsChanged\"\n        ]);\n        we(this, \"remoteSigner\");\n        we(this, \"signerConnection\");\n        we(this, \"rpcProvider\");\n        we(this, \"chainId\");\n        we(this, \"client\");\n        we(this, \"session\");\n        we(this, \"rpc\");\n        we(this, \"walletRpc\");\n        we(this, \"on\", (t, s)=>{\n            this.eventEmitter.on(t, s);\n        });\n        we(this, \"off\", (t, s)=>{\n            this.eventEmitter.off(t, s);\n        });\n        this.chainId = String(s ?? starknet__WEBPACK_IMPORTED_MODULE_1__.constants.NetworkName.SN_MAIN), this.rpc = {\n            chains: s ? [\n                this.formatChainId(this.chainId)\n            ] : [],\n            methods: this.methods,\n            events: this.events\n        }, this.signerConnection = this.getSignerConnection(t), this.rpcProvider = new _n(this.signerConnection), this.client = t, this.registerEventListeners(), this.walletRpc = new Proxy({}, {\n            get: (o, c)=>(u)=>this.requestWallet({\n                        method: c,\n                        params: u\n                    })\n        }), this.remoteSigner = new t_(this.walletRpc), this.provider = n || new starknet__WEBPACK_IMPORTED_MODULE_1__.RpcProvider({\n            nodeUrl: r\n        }), this.account = new Ha(this.provider, \"\", this.remoteSigner, this.walletRpc);\n    }\n    getNetworkName(t) {\n        if (t === \"SN_SEPOLIA\") return starknet__WEBPACK_IMPORTED_MODULE_1__.constants.NetworkName.SN_SEPOLIA;\n        if (t === \"SN_MAIN\") return starknet__WEBPACK_IMPORTED_MODULE_1__.constants.NetworkName.SN_MAIN;\n        throw new Error(`Unknown starknet.js network name for chainId ${t}`);\n    }\n    // StarknetWindowObject\n    async request(t) {\n        throw new Error(\"Not implemented: .request()\");\n    }\n    async enable() {\n        return await this.rpcProvider.connect(), this.accounts;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    get isConnected() {\n        return !0;\n    }\n    async isPreauthorized() {\n        return !!this.client.session.getAll().find(this.isValidSession);\n    }\n    async requestWallet(t) {\n        if (!this.session) throw new Error(\"No session\");\n        try {\n            const { topic: s } = this.session, r = this.formatChainId(this.chainId);\n            kt.showApprovalModal(t);\n            const n = await this.client.request({\n                topic: s,\n                chainId: r,\n                request: t\n            });\n            return kt.closeModal(\"animateSuccess\"), n;\n        } catch (s) {\n            throw kt.closeModal(), s instanceof Error ? new Error(s.message) : new Error(\"Unknow error on requestWallet\");\n        }\n    }\n    // NamespaceAdapter\n    get isConnecting() {\n        return this.signerConnection.connecting;\n    }\n    async disable() {\n        await this.rpcProvider.disconnect();\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    // NamespaceAdapter private methods\n    registerEventListeners() {\n        super.registerEventListeners(), this.eventEmitter.on(\"chainChanged\", (t)=>{\n            throw new Error(\"Not implemented: chainChanged\");\n        });\n    }\n    formatChainId(t) {\n        return `${this.namespace}:${i_(t)}`;\n    }\n    parseChainId(t) {\n        return s_(t.split(\":\")[1]);\n    }\n    setAccounts(t) {\n        this.accounts = t.filter((n)=>this.parseChainId(this.parseAccountId(n).chainId) === this.chainId).map((n)=>this.parseAccountId(n).address);\n        const { address: s } = this.parseAccountId(t[0]), r = s.startsWith(\"0x\") ? s : `0x${s}`;\n        this.account = new Ha(this.provider, r, this.remoteSigner, this.walletRpc), this.eventEmitter.emit(\"accountsChanged\", this.accounts), this.selectedAddress = r;\n    }\n}\nconst Y_ = async (i)=>Pm(i, r_);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknetkit/dist/index-00451f1a.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknetkit/dist/index-70f373da.js":
/*!*********************************************************!*\
  !*** ./node_modules/starknetkit/dist/index-70f373da.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ O),\n/* harmony export */   i: () => (/* binding */ j),\n/* harmony export */   r: () => (/* binding */ _)\n/* harmony export */ });\n/* harmony import */ var starknet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! starknet */ \"(ssr)/./node_modules/starknet/dist/index.mjs\");\n/* harmony import */ var _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lastConnected-b964dc30.js */ \"(ssr)/./node_modules/starknetkit/dist/lastConnected-b964dc30.js\");\n/* harmony import */ var _publicRcpNodes_be041588_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./publicRcpNodes-be041588.js */ \"(ssr)/./node_modules/starknetkit/dist/publicRcpNodes-be041588.js\");\nvar b = Object.defineProperty;\nvar y = (e, n, t)=>n in e ? b(e, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : e[n] = t;\nvar l = (e, n, t)=>(y(e, typeof n != \"symbol\" ? n + \"\" : n, t), t);\n\n\n\nconst d = \"f2e613881f7a0e811295cdd57999e31b\", u = `<svg\n    width=\"32\"\n    height=\"32\"\n    viewBox=\"0 0 32 32\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <rect width=\"32\" height=\"32\" rx=\"8\" fill=\"#FF875B\" />\n    <path\n      d=\"M18.316 8H13.684C13.5292 8 13.4052 8.1272 13.4018 8.28531C13.3082 12.7296 11.0323 16.9477 7.11513 19.9355C6.99077 20.0303 6.96243 20.2085 7.05335 20.3369L9.76349 24.1654C9.85569 24.2957 10.0353 24.3251 10.1618 24.2294C12.6111 22.3734 14.5812 20.1345 16 17.6529C17.4187 20.1345 19.389 22.3734 21.8383 24.2294C21.9646 24.3251 22.1443 24.2957 22.2366 24.1654L24.9467 20.3369C25.0375 20.2085 25.0092 20.0303 24.885 19.9355C20.9676 16.9477 18.6918 12.7296 18.5983 8.28531C18.5949 8.1272 18.4708 8 18.316 8Z\"\n      fill=\"white\"\n    />\n  </svg>`, R = ()=>Object.keys(localStorage).some((e)=>e === \"walletconnect\" || e.startsWith(\"wc@2:\")), _ = ()=>{\n    if (R()) {\n        delete localStorage.walletconnect;\n        for(const e in localStorage)e.startsWith(\"wc@2:\") && delete localStorage[e];\n    }\n}, j = ()=>window?.starknet_argentX ? window?.starknet_argentX?.isInAppBrowser : !1;\nclass O extends _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__.C {\n    constructor(t = {}){\n        super();\n        l(this, \"_wallet\", null);\n        l(this, \"_options\");\n        this._options = t;\n    }\n    available() {\n        return !0;\n    }\n    async ready() {\n        return await this.ensureWallet(), this._wallet ? this._wallet.isPreauthorized() : !1;\n    }\n    get id() {\n        return \"argentMobile\";\n    }\n    get name() {\n        return \"Argent (mobile)\";\n    }\n    get icon() {\n        return {\n            dark: u,\n            light: u\n        };\n    }\n    get wallet() {\n        if (!this._wallet) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__.a();\n        return this._wallet;\n    }\n    async connect() {\n        if (await this.ensureWallet(), !this._wallet) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__.b();\n        const t = this._wallet.account, o = await this.chainId();\n        return {\n            account: t.address,\n            chainId: o\n        };\n    }\n    async disconnect() {\n        if (await this._wallet.disable(), _(), !this.available() && !this._wallet) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__.b();\n        if (!this._wallet?.isConnected) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__.d();\n        this._wallet = null;\n    }\n    async account() {\n        if (!this._wallet || !this._wallet.account) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__.a();\n        return this._wallet.account;\n    }\n    async chainId() {\n        if (!this._wallet || !this.wallet.account || !this._wallet.provider) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__.a();\n        const t = await this._wallet.provider.getChainId();\n        return BigInt(t);\n    }\n    // needed, methods required by starknet-react. Otherwise an exception is throwd\n    async initEventListener(t) {\n        if (!this._wallet) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__.a();\n        this._wallet.on(\"accountsChanged\", t);\n    }\n    // needed, methods required by starknet-react. Otherwise an exception is throwd\n    async removeEventListener(t) {\n        if (!this._wallet) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__.a();\n        this._wallet.off(\"accountsChanged\", t), this._wallet = null;\n    }\n    async ensureWallet() {\n        const { getStarknetWindowObject: t } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/starknetkit\").then(__webpack_require__.bind(__webpack_require__, /*! ./index-00451f1a.js */ \"(ssr)/./node_modules/starknetkit/dist/index-00451f1a.js\")), { chainId: o, projectId: r, dappName: g, description: p, url: C, icons: f, provider: m, rpcUrl: I } = this._options, s = (0,_publicRcpNodes_be041588_js__WEBPACK_IMPORTED_MODULE_2__.g)(), v = I ?? (!o || o === starknet__WEBPACK_IMPORTED_MODULE_0__.constants.NetworkName.SN_MAIN ? s.mainnet : s.testnet), N = {\n            chainId: o ?? starknet__WEBPACK_IMPORTED_MODULE_0__.constants.NetworkName.SN_MAIN,\n            name: g,\n            projectId: r ?? d,\n            description: p,\n            url: C,\n            icons: f,\n            provider: m,\n            rpcUrl: v\n        };\n        r === d && (console.log(\"========= NOTICE =========\"), console.log(\"While your application will continue to function, we highly recommended\"), console.log(\"signing up for your own API keys.\"), console.log(\"Go to WalletConnect Cloud (https://cloud.walletconnect.com) and create a new account.\"), console.log(\"Once your account is created, create a new project and collect the Project ID\"), console.log(\"==========================\"));\n        const i = await t(N);\n        if (!i) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__.U();\n        this._wallet = i;\n        const c = this._wallet;\n        await c.enable(), c.client.on(\"session_delete\", ()=>{\n            _(), this._wallet = null, (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_1__.r)(), document.dispatchEvent(new Event(\"wallet_disconnected\"));\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknetkit/dist/index-70f373da.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknetkit/dist/index-c4ef0430.js":
/*!*********************************************************!*\
  !*** ./node_modules/starknetkit/dist/index-c4ef0430.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D: () => (/* binding */ cr),\n/* harmony export */   W: () => (/* binding */ jo)\n/* harmony export */ });\n/* harmony import */ var _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lastConnected-b964dc30.js */ \"(ssr)/./node_modules/starknetkit/dist/lastConnected-b964dc30.js\");\n/* harmony import */ var starknet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! starknet */ \"(ssr)/./node_modules/starknet/dist/index.mjs\");\n/* harmony import */ var _publicRcpNodes_be041588_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./publicRcpNodes-be041588.js */ \"(ssr)/./node_modules/starknetkit/dist/publicRcpNodes-be041588.js\");\nvar an = Object.defineProperty;\nvar on = (t, e, r)=>e in t ? an(t, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : t[e] = r;\nvar ae = (t, e, r)=>(on(t, typeof e != \"symbol\" ? e + \"\" : e, r), r);\n\n\n\nconst cr = \"https://web.argent.xyz\", Ut = `<svg\n    width=\"32\"\n    height=\"28\"\n    viewBox=\"0 0 18 14\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M1.5 0.4375C0.982233 0.4375 0.5625 0.857233 0.5625 1.375V12C0.5625 12.4144 0.72712 12.8118 1.02015 13.1049C1.31317 13.3979 1.7106 13.5625 2.125 13.5625H15.875C16.2894 13.5625 16.6868 13.3979 16.9799 13.1049C17.2729 12.8118 17.4375 12.4144 17.4375 12V1.375C17.4375 0.857233 17.0178 0.4375 16.5 0.4375H1.5ZM2.4375 3.50616V11.6875H15.5625V3.50616L9.63349 8.94108C9.27507 9.26964 8.72493 9.26964 8.36651 8.94108L2.4375 3.50616ZM14.0899 2.3125H3.91013L9 6.97822L14.0899 2.3125Z\"\n      fill=\"currentColor\"\n    />\n  </svg>`, hn = \"https://static.hydrogen.argent47.net/webwallet/iframe_whitelist_testnet.json\", mn = \"https://static.argent.net/webwallet/iframe_whitelist_mainnet.json\";\nfunction yn(t) {\n    return t;\n}\nfunction gn(t) {\n    return t.length === 0 ? yn : t.length === 1 ? t[0] : function(r) {\n        return t.reduce((n, s)=>s(n), r);\n    };\n}\nfunction bn(t) {\n    return typeof t == \"object\" && t !== null && \"subscribe\" in t;\n}\nfunction Qe(t) {\n    const e = {\n        subscribe (r) {\n            let n = null, s = !1, a = !1, o = !1;\n            function i() {\n                if (n === null) {\n                    o = !0;\n                    return;\n                }\n                a || (a = !0, typeof n == \"function\" ? n() : n && n.unsubscribe());\n            }\n            return n = t({\n                next (c) {\n                    s || r.next?.(c);\n                },\n                error (c) {\n                    s || (s = !0, r.error?.(c), i());\n                },\n                complete () {\n                    s || (s = !0, r.complete?.(), i());\n                }\n            }), o && i(), {\n                unsubscribe: i\n            };\n        },\n        pipe (...r) {\n            return gn(r)(e);\n        }\n    };\n    return e;\n}\nfunction ur(t) {\n    return (e)=>{\n        let r = 0, n = null;\n        const s = [];\n        function a() {\n            n || (n = e.subscribe({\n                next (i) {\n                    for (const c of s)c.next?.(i);\n                },\n                error (i) {\n                    for (const c of s)c.error?.(i);\n                },\n                complete () {\n                    for (const i of s)i.complete?.();\n                }\n            }));\n        }\n        function o() {\n            if (r === 0 && n) {\n                const i = n;\n                n = null, i.unsubscribe();\n            }\n        }\n        return {\n            subscribe (i) {\n                return r++, s.push(i), a(), {\n                    unsubscribe () {\n                        r--, o();\n                        const c = s.findIndex((u)=>u === i);\n                        c > -1 && s.splice(c, 1);\n                    }\n                };\n            }\n        };\n    };\n}\nfunction wn(t) {\n    return (e)=>({\n            subscribe (r) {\n                let n = 0;\n                return e.subscribe({\n                    next (a) {\n                        r.next?.(t(a, n++));\n                    },\n                    error (a) {\n                        r.error?.(a);\n                    },\n                    complete () {\n                        r.complete?.();\n                    }\n                });\n            }\n        });\n}\nfunction lr(t) {\n    return (e)=>({\n            subscribe (r) {\n                return e.subscribe({\n                    next (n) {\n                        t.next?.(n), r.next?.(n);\n                    },\n                    error (n) {\n                        t.error?.(n), r.error?.(n);\n                    },\n                    complete () {\n                        t.complete?.(), r.complete?.();\n                    }\n                });\n            }\n        });\n}\nlet _n = class dr extends Error {\n    constructor(e){\n        super(e), this.name = \"ObservableAbortError\", Object.setPrototypeOf(this, dr.prototype);\n    }\n};\nfunction fr(t) {\n    let e;\n    return {\n        promise: new Promise((n, s)=>{\n            let a = !1;\n            function o() {\n                a || (a = !0, s(new _n(\"This operation was aborted.\")), i.unsubscribe());\n            }\n            const i = t.subscribe({\n                next (c) {\n                    a = !0, n(c), o();\n                },\n                error (c) {\n                    a = !0, s(c), o();\n                },\n                complete () {\n                    a = !0, o();\n                }\n            });\n            e = o;\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        abort: e\n    };\n}\nconst vn = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    isObservable: bn,\n    map: wn,\n    observable: Qe,\n    observableToPromise: fr,\n    share: ur,\n    tap: lr\n}, Symbol.toStringTag, {\n    value: \"Module\"\n}));\nfunction pr(t) {\n    return Qe((e)=>{\n        function r(s = 0, a = t.op) {\n            const o = t.links[s];\n            if (!o) throw new Error(\"No more links to execute - did you forget to add an ending link?\");\n            return o({\n                op: a,\n                next (c) {\n                    return r(s + 1, c);\n                }\n            });\n        }\n        return r().subscribe(e);\n    });\n}\nfunction Wt(t) {\n    return Array.isArray(t) ? t : [\n        t\n    ];\n}\nfunction xn(t) {\n    return (e)=>{\n        const r = Wt(t.true).map((s)=>s(e)), n = Wt(t.false).map((s)=>s(e));\n        return (s)=>Qe((a)=>{\n                const o = t.condition(s.op) ? r : n;\n                return pr({\n                    op: s.op,\n                    links: o\n                }).subscribe(a);\n            });\n    };\n}\nfunction Tn(t) {\n    return t instanceof hr || /**\n  * @deprecated\n  * Delete in next major\n  */ t.name === \"TRPCClientError\";\n}\nlet hr = class $e extends Error {\n    static from(e, r = {}) {\n        return e instanceof Error ? Tn(e) ? (r.meta && (e.meta = {\n            ...e.meta,\n            ...r.meta\n        }), e) : new $e(e.message, {\n            ...r,\n            cause: e,\n            result: null\n        }) : new $e(e.error.message ?? \"\", {\n            ...r,\n            cause: void 0,\n            result: e\n        });\n    }\n    constructor(e, r){\n        const n = r?.cause;\n        super(e, {\n            cause: n\n        }), this.meta = r?.meta, this.cause = n, this.shape = r?.result?.error, this.data = r?.result?.error.data, this.name = \"TRPCClientError\", Object.setPrototypeOf(this, $e.prototype);\n    }\n};\nfunction mr(t) {\n    const e = /* @__PURE__ */ Object.create(null);\n    for(const r in t){\n        const n = t[r];\n        e[n] = r;\n    }\n    return e;\n}\nconst Xe = {\n    /**\n  * Invalid JSON was received by the server.\n  * An error occurred on the server while parsing the JSON text.\n  */ PARSE_ERROR: -32700,\n    /**\n  * The JSON sent is not a valid Request object.\n  */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nmr(Xe);\nmr(Xe);\nconst En = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction kn(t) {\n    return En[t] ?? 500;\n}\nfunction yr(t) {\n    return kn(t.code);\n}\nconst gr = ()=>{};\nfunction br(t, e) {\n    return new Proxy(gr, {\n        get (n, s) {\n            if (!(typeof s != \"string\" || s === \"then\")) return br(t, [\n                ...e,\n                s\n            ]);\n        },\n        apply (n, s, a) {\n            const o = e[e.length - 1] === \"apply\";\n            return t({\n                args: o ? a.length >= 2 ? a[1] : [] : a,\n                path: o ? e.slice(0, -1) : e\n            });\n        }\n    });\n}\nconst kt = (t)=>br(t, []), Ct = (t)=>new Proxy(gr, {\n        get (e, r) {\n            if (!(typeof r != \"string\" || r === \"then\")) return t(r);\n        }\n    });\nfunction Cn(t) {\n    const { path: e, error: r, config: n } = t, { code: s } = t.error, a = {\n        message: r.message,\n        code: Xe[s],\n        data: {\n            code: s,\n            httpStatus: yr(r)\n        }\n    };\n    return n.isDev && typeof t.error.stack == \"string\" && (a.data.stack = t.error.stack), typeof e == \"string\" && (a.data.path = e), n.errorFormatter({\n        ...t,\n        shape: a\n    });\n}\nfunction zt(t, e) {\n    return \"error\" in e ? {\n        ...e,\n        error: t.transformer.output.serialize(e.error)\n    } : \"data\" in e.result ? {\n        ...e,\n        result: {\n            ...e.result,\n            data: t.transformer.output.serialize(e.result.data)\n        }\n    } : e;\n}\nfunction Rn(t, e) {\n    return Array.isArray(e) ? e.map((r)=>zt(t, r)) : zt(t, e);\n}\nconst On = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    createFlatProxy: Ct,\n    createRecursiveProxy: kt,\n    getErrorShape: Cn,\n    transformTRPCResponse: Rn\n}, Symbol.toStringTag, {\n    value: \"Module\"\n}));\nfunction Pn(t) {\n    return typeof FormData > \"u\" ? !1 : t instanceof FormData;\n}\nconst ut = {\n    css: {\n        query: [\n            \"72e3ff\",\n            \"3fb0d8\"\n        ],\n        mutation: [\n            \"c5a3fc\",\n            \"904dfc\"\n        ],\n        subscription: [\n            \"ff49e1\",\n            \"d83fbe\"\n        ]\n    },\n    ansi: {\n        regular: {\n            // Cyan background, black and white text respectively\n            query: [\n                \"\\x1b[30;46m\",\n                \"\\x1b[97;46m\"\n            ],\n            // Magenta background, black and white text respectively\n            mutation: [\n                \"\\x1b[30;45m\",\n                \"\\x1b[97;45m\"\n            ],\n            // Green background, black and white text respectively\n            subscription: [\n                \"\\x1b[30;42m\",\n                \"\\x1b[97;42m\"\n            ]\n        },\n        bold: {\n            query: [\n                \"\\x1b[1;30;46m\",\n                \"\\x1b[1;97;46m\"\n            ],\n            mutation: [\n                \"\\x1b[1;30;45m\",\n                \"\\x1b[1;97;45m\"\n            ],\n            subscription: [\n                \"\\x1b[1;30;42m\",\n                \"\\x1b[1;97;42m\"\n            ]\n        }\n    }\n};\nfunction Sn(t) {\n    const { direction: e, type: r, path: n, id: s, input: a } = t, o = [], i = [];\n    if (t.colorMode === \"ansi\") {\n        const [f, m] = ut.ansi.regular[r], [v, E] = ut.ansi.bold[r], S = \"\\x1b[0m\";\n        return o.push(e === \"up\" ? f : m, e === \"up\" ? \">>\" : \"<<\", r, e === \"up\" ? v : E, `#${s}`, n, S), e === \"up\" ? i.push({\n            input: t.input\n        }) : i.push({\n            input: t.input,\n            // strip context from result cause it's too noisy in terminal wihtout collapse mode\n            result: \"result\" in t.result ? t.result.result : t.result,\n            elapsedMs: t.elapsedMs\n        }), {\n            parts: o,\n            args: i\n        };\n    }\n    const [c, u] = ut.css[r], l = `\n    background-color: #${e === \"up\" ? c : u}; \n    color: ${e === \"up\" ? \"black\" : \"white\"};\n    padding: 2px;\n  `;\n    return o.push(\"%c\", e === \"up\" ? \">>\" : \"<<\", r, `#${s}`, `%c${n}%c`, \"%O\"), i.push(l, `${l}; font-weight: bold;`, `${l}; font-weight: normal;`), e === \"up\" ? i.push({\n        input: a,\n        context: t.context\n    }) : i.push({\n        input: a,\n        result: t.result,\n        elapsedMs: t.elapsedMs,\n        context: t.context\n    }), {\n        parts: o,\n        args: i\n    };\n}\nconst Nn = ({ c: t = console, colorMode: e = \"css\" })=>(r)=>{\n        const n = r.input, s = Pn(n) ? Object.fromEntries(n) : n, { parts: a, args: o } = Sn({\n            ...r,\n            colorMode: e,\n            input: s\n        }), i = r.direction === \"down\" && r.result && (r.result instanceof Error || \"error\" in r.result.result) ? \"error\" : \"log\";\n        t[i].apply(null, [\n            a.join(\" \")\n        ].concat(o));\n    };\nfunction In(t = {}) {\n    const { enabled: e = ()=>!0 } = t, r = t.colorMode ?? ( true ? \"ansi\" : 0), { logger: n = Nn({\n        c: t.console,\n        colorMode: r\n    }) } = t;\n    return ()=>({ op: s, next: a })=>Qe((o)=>{\n                e({\n                    ...s,\n                    direction: \"up\"\n                }) && n({\n                    ...s,\n                    direction: \"up\"\n                });\n                const i = Date.now();\n                function c(u) {\n                    const l = Date.now() - i;\n                    e({\n                        ...s,\n                        direction: \"down\",\n                        result: u\n                    }) && n({\n                        ...s,\n                        direction: \"down\",\n                        elapsedMs: l,\n                        result: u\n                    });\n                }\n                return a(s).pipe(lr({\n                    next (u) {\n                        c(u);\n                    },\n                    error (u) {\n                        c(u);\n                    }\n                })).subscribe(o);\n            });\n}\nlet Ln = class {\n    $request({ type: e, input: r, path: n, context: s = {} }) {\n        return pr({\n            links: this.links,\n            op: {\n                id: ++this.requestId,\n                type: e,\n                path: n,\n                input: r,\n                context: s\n            }\n        }).pipe(ur());\n    }\n    requestAsPromise(e) {\n        const r = this.$request(e), { promise: n, abort: s } = fr(r);\n        return new Promise((o, i)=>{\n            e.signal?.addEventListener(\"abort\", s), n.then((c)=>{\n                o(c.result.data);\n            }).catch((c)=>{\n                i(hr.from(c));\n            });\n        });\n    }\n    query(e, r, n) {\n        return this.requestAsPromise({\n            type: \"query\",\n            path: e,\n            input: r,\n            context: n?.context,\n            signal: n?.signal\n        });\n    }\n    mutation(e, r, n) {\n        return this.requestAsPromise({\n            type: \"mutation\",\n            path: e,\n            input: r,\n            context: n?.context,\n            signal: n?.signal\n        });\n    }\n    subscription(e, r, n) {\n        return this.$request({\n            type: \"subscription\",\n            path: e,\n            input: r,\n            context: n?.context\n        }).subscribe({\n            next (a) {\n                a.result.type === \"started\" ? n.onStarted?.() : a.result.type === \"stopped\" ? n.onStopped?.() : n.onData?.(a.result.data);\n            },\n            error (a) {\n                n.onError?.(a);\n            },\n            complete () {\n                n.onComplete?.();\n            }\n        });\n    }\n    constructor(e){\n        this.requestId = 0;\n        const r = (()=>{\n            const n = e.transformer;\n            return n ? \"input\" in n ? e.transformer : {\n                input: n,\n                output: n\n            } : {\n                input: {\n                    serialize: (s)=>s,\n                    deserialize: (s)=>s\n                },\n                output: {\n                    serialize: (s)=>s,\n                    deserialize: (s)=>s\n                }\n            };\n        })();\n        this.runtime = {\n            transformer: {\n                serialize: (n)=>r.input.serialize(n),\n                deserialize: (n)=>r.output.deserialize(n)\n            },\n            combinedTransformer: r\n        }, this.links = e.links.map((n)=>n(this.runtime));\n    }\n};\nconst An = {\n    query: \"query\",\n    mutate: \"mutation\",\n    subscribe: \"subscription\"\n}, Mn = (t)=>An[t];\nfunction jn(t) {\n    return Ct((e)=>t.hasOwnProperty(e) ? t[e] : e === \"__untypedClient\" ? t : kt(({ path: r, args: n })=>{\n            const s = [\n                e,\n                ...r\n            ], a = Mn(s.pop()), o = s.join(\".\");\n            return t[a](o, ...n);\n        }));\n}\nfunction $n(t) {\n    const e = new Ln(t);\n    return jn(e);\n}\nfunction Dn(t) {\n    return !!t && !Array.isArray(t) && typeof t == \"object\";\n}\nfunction Zn(t) {\n    if (t instanceof le) return t;\n    const e = new le({\n        code: \"INTERNAL_SERVER_ERROR\",\n        cause: t\n    });\n    return t instanceof Error && t.stack && (e.stack = t.stack), e;\n}\nclass Un extends Error {\n}\nfunction Wn(t) {\n    if (t instanceof Error) return t;\n    const e = typeof t;\n    if (!(e === \"undefined\" || e === \"function\" || t === null)) {\n        if (e !== \"object\") return new Error(String(t));\n        if (Dn(t)) {\n            const r = new Un();\n            for(const n in t)r[n] = t[n];\n            return r;\n        }\n    }\n}\nclass le extends Error {\n    constructor(e){\n        const r = Wn(e.cause), n = e.message ?? r?.message ?? e.code;\n        super(n, {\n            cause: r\n        }), this.code = e.code, this.name = this.constructor.name;\n    }\n}\nfunction zn(t) {\n    return \"input\" in t ? t : {\n        input: t,\n        output: t\n    };\n}\nconst ge = {\n    _default: !0,\n    input: {\n        serialize: (t)=>t,\n        deserialize: (t)=>t\n    },\n    output: {\n        serialize: (t)=>t,\n        deserialize: (t)=>t\n    }\n}, be = ({ shape: t })=>t;\nfunction qn(t) {\n    return Object.assign(/* @__PURE__ */ Object.create(null), t);\n}\nconst Bn = [\n    \"query\",\n    \"mutation\",\n    \"subscription\"\n];\nfunction Vn(t) {\n    return \"router\" in t._def;\n}\nconst Hn = {\n    _ctx: null,\n    _errorShape: null,\n    _meta: null,\n    queries: {},\n    mutations: {},\n    subscriptions: {},\n    errorFormatter: be,\n    transformer: ge\n}, Fn = [\n    /**\n  * Then is a reserved word because otherwise we can't return a promise that returns a Proxy\n  * since JS will think that `.then` is something that exists\n  */ \"then\"\n];\nfunction wr(t) {\n    return function(r) {\n        const n = new Set(Object.keys(r).filter((c)=>Fn.includes(c)));\n        if (n.size > 0) throw new Error(\"Reserved words used in `router({})` call: \" + Array.from(n).join(\", \"));\n        const s = qn({});\n        function a(c, u = \"\") {\n            for (const [l, f] of Object.entries(c ?? {})){\n                const m = `${u}${l}`;\n                if (Vn(f)) {\n                    a(f._def.procedures, `${m}.`);\n                    continue;\n                }\n                if (s[m]) throw new Error(`Duplicate key: ${m}`);\n                s[m] = f;\n            }\n        }\n        a(r);\n        const o = {\n            _config: t,\n            router: !0,\n            procedures: s,\n            ...Hn,\n            record: r,\n            queries: Object.entries(s).filter((c)=>c[1]._def.query).reduce((c, [u, l])=>({\n                    ...c,\n                    [u]: l\n                }), {}),\n            mutations: Object.entries(s).filter((c)=>c[1]._def.mutation).reduce((c, [u, l])=>({\n                    ...c,\n                    [u]: l\n                }), {}),\n            subscriptions: Object.entries(s).filter((c)=>c[1]._def.subscription).reduce((c, [u, l])=>({\n                    ...c,\n                    [u]: l\n                }), {})\n        };\n        return {\n            ...r,\n            _def: o,\n            createCaller (c) {\n                return kt(({ path: l, args: f })=>{\n                    if (l.length === 1 && Bn.includes(l[0])) return Jn({\n                        procedures: o.procedures,\n                        path: f[0],\n                        rawInput: f[1],\n                        ctx: c,\n                        type: l[0]\n                    });\n                    const m = l.join(\".\"), v = o.procedures[m];\n                    let E = \"query\";\n                    return v._def.mutation ? E = \"mutation\" : v._def.subscription && (E = \"subscription\"), v({\n                        path: m,\n                        rawInput: f[0],\n                        ctx: c,\n                        type: E\n                    });\n                });\n            },\n            getErrorShape (c) {\n                const { path: u, error: l } = c, { code: f } = c.error, m = {\n                    message: l.message,\n                    code: Xe[f],\n                    data: {\n                        code: f,\n                        httpStatus: yr(l)\n                    }\n                };\n                return t.isDev && typeof c.error.stack == \"string\" && (m.data.stack = c.error.stack), typeof u == \"string\" && (m.data.path = u), this._def._config.errorFormatter({\n                    ...c,\n                    shape: m\n                });\n            }\n        };\n    };\n}\nfunction Jn(t) {\n    const { type: e, path: r } = t;\n    if (!(r in t.procedures) || !t.procedures[r]?._def[e]) throw new le({\n        code: \"NOT_FOUND\",\n        message: `No \"${e}\"-procedure on path \"${r}\"`\n    });\n    const n = t.procedures[r];\n    return n(t);\n}\nconst qt =  true || 0;\nfunction Bt(t) {\n    const e = t;\n    if (typeof e == \"function\") return e;\n    if (typeof e.parseAsync == \"function\") return e.parseAsync.bind(e);\n    if (typeof e.parse == \"function\") return e.parse.bind(e);\n    if (typeof e.validateSync == \"function\") return e.validateSync.bind(e);\n    if (typeof e.create == \"function\") return e.create.bind(e);\n    if (typeof e.assert == \"function\") return (r)=>(e.assert(r), r);\n    throw new Error(\"Could not find a validator fn\");\n}\nfunction _r(t, ...e) {\n    const r = Object.assign(/* @__PURE__ */ Object.create(null), t);\n    for (const n of e)for(const s in n){\n        if (s in r && r[s] !== n[s]) throw new Error(`Duplicate key ${s}`);\n        r[s] = n[s];\n    }\n    return r;\n}\nfunction Gn() {\n    function t(r) {\n        return {\n            _middlewares: r,\n            unstable_pipe (n) {\n                const s = \"_middlewares\" in n ? n._middlewares : [\n                    n\n                ];\n                return t([\n                    ...r,\n                    ...s\n                ]);\n            }\n        };\n    }\n    function e(r) {\n        return t([\n            r\n        ]);\n    }\n    return e;\n}\nfunction Vt(t) {\n    return t && typeof t == \"object\" && !Array.isArray(t);\n}\nfunction Yn(t) {\n    const e = async ({ next: r, rawInput: n, input: s })=>{\n        let a;\n        try {\n            a = await t(n);\n        } catch (i) {\n            throw new le({\n                code: \"BAD_REQUEST\",\n                cause: i\n            });\n        }\n        const o = Vt(s) && Vt(a) ? {\n            ...s,\n            ...a\n        } : a;\n        return r({\n            input: o\n        });\n    };\n    return e._type = \"input\", e;\n}\nfunction Qn(t) {\n    const e = async ({ next: r })=>{\n        const n = await r();\n        if (!n.ok) return n;\n        try {\n            const s = await t(n.data);\n            return {\n                ...n,\n                data: s\n            };\n        } catch (s) {\n            throw new le({\n                message: \"Output validation failed\",\n                code: \"INTERNAL_SERVER_ERROR\",\n                cause: s\n            });\n        }\n    };\n    return e._type = \"output\", e;\n}\nconst vr = \"middlewareMarker\";\nfunction oe(t, e) {\n    const { middlewares: r = [], inputs: n, meta: s, ...a } = e;\n    return xr({\n        ..._r(t, a),\n        inputs: [\n            ...t.inputs,\n            ...n ?? []\n        ],\n        middlewares: [\n            ...t.middlewares,\n            ...r\n        ],\n        meta: t.meta && s ? {\n            ...t.meta,\n            ...s\n        } : s ?? t.meta\n    });\n}\nfunction xr(t = {}) {\n    const e = {\n        inputs: [],\n        middlewares: [],\n        ...t\n    };\n    return {\n        _def: e,\n        input (r) {\n            const n = Bt(r);\n            return oe(e, {\n                inputs: [\n                    r\n                ],\n                middlewares: [\n                    Yn(n)\n                ]\n            });\n        },\n        output (r) {\n            const n = Bt(r);\n            return oe(e, {\n                output: r,\n                middlewares: [\n                    Qn(n)\n                ]\n            });\n        },\n        meta (r) {\n            return oe(e, {\n                meta: r\n            });\n        },\n        /**\n    * @deprecated\n    * This functionality is deprecated and will be removed in the next major version.\n    */ unstable_concat (r) {\n            return oe(e, r._def);\n        },\n        use (r) {\n            const n = \"_middlewares\" in r ? r._middlewares : [\n                r\n            ];\n            return oe(e, {\n                middlewares: n\n            });\n        },\n        query (r) {\n            return lt({\n                ...e,\n                query: !0\n            }, r);\n        },\n        mutation (r) {\n            return lt({\n                ...e,\n                mutation: !0\n            }, r);\n        },\n        subscription (r) {\n            return lt({\n                ...e,\n                subscription: !0\n            }, r);\n        }\n    };\n}\nfunction lt(t, e) {\n    const r = oe(t, {\n        resolver: e,\n        middlewares: [\n            async function(s) {\n                const a = await e(s);\n                return {\n                    marker: vr,\n                    ok: !0,\n                    data: a,\n                    ctx: s.ctx\n                };\n            }\n        ]\n    });\n    return Kn(r._def);\n}\nconst Xn = `\nIf you want to call this function on the server, you do the following:\nThis is a client-only function.\n\nconst caller = appRouter.createCaller({\n  /* ... your context */\n});\n\nconst result = await caller.call('myProcedure', input);\n`.trim();\nfunction Kn(t) {\n    const e = async function(n) {\n        if (!n || !(\"rawInput\" in n)) throw new Error(Xn);\n        const s = async (o = {\n            index: 0,\n            ctx: n.ctx\n        })=>{\n            try {\n                const i = t.middlewares[o.index];\n                return await i({\n                    ctx: o.ctx,\n                    type: n.type,\n                    path: n.path,\n                    rawInput: o.rawInput ?? n.rawInput,\n                    meta: t.meta,\n                    input: o.input,\n                    next (u) {\n                        const l = u;\n                        return s({\n                            index: o.index + 1,\n                            ctx: l && \"ctx\" in l ? {\n                                ...o.ctx,\n                                ...l.ctx\n                            } : o.ctx,\n                            input: l && \"input\" in l ? l.input : o.input,\n                            rawInput: l && \"rawInput\" in l ? l.rawInput : o.rawInput\n                        });\n                    }\n                });\n            } catch (i) {\n                return {\n                    ok: !1,\n                    error: Zn(i),\n                    marker: vr\n                };\n            }\n        }, a = await s();\n        if (!a) throw new le({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"No result from middlewares - did you forget to `return next()`?\"\n        });\n        if (!a.ok) throw a.error;\n        return a.data;\n    };\n    return e._def = t, e.meta = t.meta, e;\n}\nfunction es(...t) {\n    const e = _r({}, ...t.map((a)=>a._def.record)), r = t.reduce((a, o)=>{\n        if (o._def._config.errorFormatter && o._def._config.errorFormatter !== be) {\n            if (a !== be && a !== o._def._config.errorFormatter) throw new Error(\"You seem to have several error formatters\");\n            return o._def._config.errorFormatter;\n        }\n        return a;\n    }, be), n = t.reduce((a, o)=>{\n        if (o._def._config.transformer && o._def._config.transformer !== ge) {\n            if (a !== ge && a !== o._def._config.transformer) throw new Error(\"You seem to have several transformers\");\n            return o._def._config.transformer;\n        }\n        return a;\n    }, ge);\n    return wr({\n        errorFormatter: r,\n        transformer: n,\n        isDev: t.some((a)=>a._def._config.isDev),\n        allowOutsideOfServer: t.some((a)=>a._def._config.allowOutsideOfServer),\n        isServer: t.some((a)=>a._def._config.isServer),\n        $types: t[0]?._def._config.$types\n    })(e);\n}\nclass Ue {\n    context() {\n        return new Ue();\n    }\n    meta() {\n        return new Ue();\n    }\n    create(e) {\n        return rs()(e);\n    }\n}\nconst ts = new Ue();\nfunction rs() {\n    return function(e) {\n        const r = e?.errorFormatter ?? be, s = {\n            transformer: zn(e?.transformer ?? ge),\n            isDev: e?.isDev ?? globalThis.process?.env?.NODE_ENV !== \"production\",\n            allowOutsideOfServer: e?.allowOutsideOfServer ?? !1,\n            errorFormatter: r,\n            isServer: e?.isServer ?? qt,\n            /**\n      * @internal\n      */ $types: Ct((a)=>{\n                throw new Error(`Tried to access \"$types.${a}\" which is not available at runtime`);\n            })\n        };\n        if (!(e?.isServer ?? qt) && e?.allowOutsideOfServer !== !0) throw new Error(\"You're trying to use @trpc/server in a non-server environment. This is not supported by default.\");\n        return {\n            /**\n      * These are just types, they can't be used\n      * @internal\n      */ _config: s,\n            /**\n      * Builder object for creating procedures\n      */ procedure: xr({\n                meta: e?.defaultMeta\n            }),\n            /**\n      * Create reusable middlewares\n      */ middleware: Gn(),\n            /**\n      * Create a router\n      */ router: wr(s),\n            /**\n      * Merge Routers\n      */ mergeRouters: es\n        };\n    };\n}\nvar bt = {}, Ke = {}, pe = {}, O = {};\nconst he = /* @__PURE__ */ (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.g)(vn);\nvar Rt = {}, Tr = he;\nfunction Er(t) {\n    return Tr.observable((e)=>{\n        function r(s = 0, a = t.op) {\n            const o = t.links[s];\n            if (!o) throw new Error(\"No more links to execute - did you forget to add an ending link?\");\n            return o({\n                op: a,\n                next (c) {\n                    return r(s + 1, c);\n                }\n            });\n        }\n        return r().subscribe(e);\n    });\n}\nfunction Ht(t) {\n    return Array.isArray(t) ? t : [\n        t\n    ];\n}\nfunction ns(t) {\n    return (e)=>{\n        const r = Ht(t.true).map((s)=>s(e)), n = Ht(t.false).map((s)=>s(e));\n        return (s)=>Tr.observable((a)=>{\n                const o = t.condition(s.op) ? r : n;\n                return Er({\n                    op: s.op,\n                    links: o\n                }).subscribe(a);\n            });\n    };\n}\nRt.createChain = Er;\nRt.splitLink = ns;\nvar me = {};\nfunction ss(t) {\n    return t instanceof kr || /**\n  * @deprecated\n  * Delete in next major\n  */ t.name === \"TRPCClientError\";\n}\nlet kr = class De extends Error {\n    static from(e, r = {}) {\n        return e instanceof Error ? ss(e) ? (r.meta && (e.meta = {\n            ...e.meta,\n            ...r.meta\n        }), e) : new De(e.message, {\n            ...r,\n            cause: e,\n            result: null\n        }) : new De(e.error.message ?? \"\", {\n            ...r,\n            cause: void 0,\n            result: e\n        });\n    }\n    constructor(e, r){\n        const n = r?.cause;\n        super(e, {\n            cause: n\n        }), this.meta = r?.meta, this.cause = n, this.shape = r?.result?.error, this.data = r?.result?.error.data, this.name = \"TRPCClientError\", Object.setPrototypeOf(this, De.prototype);\n    }\n};\nme.TRPCClientError = kr;\nconst as = /* @__PURE__ */ (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.g)(On);\nvar z = {}, os = me;\nconst Ft = (t)=>typeof t == \"function\";\nfunction Cr(t) {\n    if (t) return t;\n    if (false) {}\n    if (typeof globalThis < \"u\" && Ft(globalThis.fetch)) return globalThis.fetch;\n    throw new Error(\"No fetch implementation found\");\n}\nfunction is(t) {\n    return t || ( false ? 0 : typeof globalThis < \"u\" && globalThis.AbortController ? globalThis.AbortController : null);\n}\nfunction cs(t) {\n    return {\n        url: t.url,\n        fetch: t.fetch,\n        AbortController: is(t.AbortController)\n    };\n}\nfunction us(t) {\n    const e = {};\n    for(let r = 0; r < t.length; r++){\n        const n = t[r];\n        e[r] = n;\n    }\n    return e;\n}\nconst ls = {\n    query: \"GET\",\n    mutation: \"POST\"\n};\nfunction Rr(t) {\n    return \"input\" in t ? t.runtime.transformer.serialize(t.input) : us(t.inputs.map((e)=>t.runtime.transformer.serialize(e)));\n}\nconst Or = (t)=>{\n    let e = t.url + \"/\" + t.path;\n    const r = [];\n    if (\"inputs\" in t && r.push(\"batch=1\"), t.type === \"query\") {\n        const n = Rr(t);\n        n !== void 0 && r.push(`input=${encodeURIComponent(JSON.stringify(n))}`);\n    }\n    return r.length && (e += \"?\" + r.join(\"&\")), e;\n}, Pr = (t)=>{\n    if (t.type === \"query\") return;\n    const e = Rr(t);\n    return e !== void 0 ? JSON.stringify(e) : void 0;\n}, ds = (t)=>Nr({\n        ...t,\n        contentTypeHeader: \"application/json\",\n        getUrl: Or,\n        getBody: Pr\n    });\nasync function Sr(t, e) {\n    const r = t.getUrl(t), n = t.getBody(t), { type: s } = t, a = await t.headers();\n    /* istanbul ignore if -- @preserve */ if (s === \"subscription\") throw new Error(\"Subscriptions should use wsLink\");\n    const o = {\n        ...t.contentTypeHeader ? {\n            \"content-type\": t.contentTypeHeader\n        } : {},\n        ...t.batchModeHeader ? {\n            \"trpc-batch-mode\": t.batchModeHeader\n        } : {},\n        ...a\n    };\n    return Cr(t.fetch)(r, {\n        method: ls[s],\n        signal: e?.signal,\n        body: n,\n        headers: o\n    });\n}\nfunction Nr(t) {\n    const e = t.AbortController ? new t.AbortController() : null, r = {};\n    return {\n        promise: new Promise((a, o)=>{\n            Sr(t, e).then((i)=>(r.response = i, i.json())).then((i)=>{\n                r.responseJSON = i, a({\n                    json: i,\n                    meta: r\n                });\n            }).catch((i)=>{\n                o(os.TRPCClientError.from(i, {\n                    meta: r\n                }));\n            });\n        }),\n        cancel: ()=>{\n            e?.abort();\n        }\n    };\n}\nz.fetchHTTPResponse = Sr;\nz.getBody = Pr;\nz.getFetch = Cr;\nz.getUrl = Or;\nz.httpRequest = Nr;\nz.jsonHttpRequester = ds;\nz.resolveHTTPLinkOptions = cs;\nvar Ot = {}, et = {};\nfunction Jt(t) {\n    return !!t && !Array.isArray(t) && typeof t == \"object\";\n}\nfunction fs(t, e) {\n    if (\"error\" in t) {\n        const n = e.transformer.deserialize(t.error);\n        return {\n            ok: !1,\n            error: {\n                ...t,\n                error: n\n            }\n        };\n    }\n    return {\n        ok: !0,\n        result: {\n            ...t.result,\n            ...(!t.result.type || t.result.type === \"data\") && {\n                type: \"data\",\n                data: e.transformer.deserialize(t.result.data)\n            }\n        }\n    };\n}\nclass dt extends Error {\n    constructor(){\n        super(\"Unable to transform response from server\");\n    }\n}\nfunction ps(t, e) {\n    let r;\n    try {\n        r = fs(t, e);\n    } catch  {\n        throw new dt();\n    }\n    if (!r.ok && (!Jt(r.error.error) || typeof r.error.error.code != \"number\")) throw new dt();\n    if (r.ok && !Jt(r.result)) throw new dt();\n    return r;\n}\net.transformResult = ps;\nvar hs = he, ms = et, Gt = me, wt = z;\nconst ft = ()=>{\n    throw new Error(\"Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new\");\n};\nfunction pt(t) {\n    let e = null, r = null;\n    const n = ()=>{\n        clearTimeout(r), r = null, e = null;\n    };\n    function s(i) {\n        const c = [\n            []\n        ];\n        let u = 0;\n        for(;;){\n            const l = i[u];\n            if (!l) break;\n            const f = c[c.length - 1];\n            if (l.aborted) {\n                l.reject?.(new Error(\"Aborted\")), u++;\n                continue;\n            }\n            if (t.validate(f.concat(l).map((v)=>v.key))) {\n                f.push(l), u++;\n                continue;\n            }\n            if (f.length === 0) {\n                l.reject?.(new Error(\"Input is too big for a single dispatch\")), u++;\n                continue;\n            }\n            c.push([]);\n        }\n        return c;\n    }\n    function a() {\n        const i = s(e);\n        n();\n        for (const c of i){\n            if (!c.length) continue;\n            const u = {\n                items: c,\n                cancel: ft\n            };\n            for (const v of c)v.batch = u;\n            const l = (v, E)=>{\n                const S = u.items[v];\n                S.resolve?.(E), S.batch = null, S.reject = null, S.resolve = null;\n            }, { promise: f, cancel: m } = t.fetch(u.items.map((v)=>v.key), l);\n            u.cancel = m, f.then((v)=>{\n                for(let E = 0; E < v.length; E++){\n                    const S = v[E];\n                    l(E, S);\n                }\n                for (const E of u.items)E.reject?.(new Error(\"Missing result\")), E.batch = null;\n            }).catch((v)=>{\n                for (const E of u.items)E.reject?.(v), E.batch = null;\n            });\n        }\n    }\n    function o(i) {\n        const c = {\n            aborted: !1,\n            key: i,\n            batch: null,\n            resolve: ft,\n            reject: ft\n        }, u = new Promise((f, m)=>{\n            c.reject = m, c.resolve = f, e || (e = []), e.push(c);\n        });\n        return r || (r = setTimeout(a)), {\n            promise: u,\n            cancel: ()=>{\n                c.aborted = !0, c.batch?.items.every((f)=>f.aborted) && (c.batch.cancel(), c.batch = null);\n            }\n        };\n    }\n    return {\n        load: o\n    };\n}\nfunction Ir(t) {\n    return function(r) {\n        const n = wt.resolveHTTPLinkOptions(r), s = r.maxURLLength ?? 1 / 0;\n        return (a)=>{\n            const o = (f)=>{\n                const m = (E)=>{\n                    if (s === 1 / 0) return !0;\n                    const S = E.map((q)=>q.path).join(\",\"), ne = E.map((q)=>q.input);\n                    return wt.getUrl({\n                        ...n,\n                        runtime: a,\n                        type: f,\n                        path: S,\n                        inputs: ne\n                    }).length <= s;\n                }, v = t({\n                    ...n,\n                    runtime: a,\n                    type: f,\n                    opts: r\n                });\n                return {\n                    validate: m,\n                    fetch: v\n                };\n            }, i = pt(o(\"query\")), c = pt(o(\"mutation\")), u = pt(o(\"subscription\")), l = {\n                query: i,\n                subscription: u,\n                mutation: c\n            };\n            return ({ op: f })=>hs.observable((m)=>{\n                    const v = l[f.type], { promise: E, cancel: S } = v.load(f);\n                    let ne;\n                    return E.then((A)=>{\n                        ne = A;\n                        const q = ms.transformResult(A.json, a);\n                        if (!q.ok) {\n                            m.error(Gt.TRPCClientError.from(q.error, {\n                                meta: A.meta\n                            }));\n                            return;\n                        }\n                        m.next({\n                            context: A.meta,\n                            result: q.result\n                        }), m.complete();\n                    }).catch((A)=>{\n                        m.error(Gt.TRPCClientError.from(A, {\n                            meta: ne?.meta\n                        }));\n                    }), ()=>{\n                        S();\n                    };\n                });\n        };\n    };\n}\nconst ys = (t)=>(e)=>{\n        const r = e.map((o)=>o.path).join(\",\"), n = e.map((o)=>o.input), { promise: s, cancel: a } = wt.jsonHttpRequester({\n            ...t,\n            path: r,\n            inputs: n,\n            headers () {\n                return t.opts.headers ? typeof t.opts.headers == \"function\" ? t.opts.headers({\n                    opList: e\n                }) : t.opts.headers : {};\n            }\n        });\n        return {\n            promise: s.then((o)=>(Array.isArray(o.json) ? o.json : e.map(()=>o.json)).map((u)=>({\n                        meta: o.meta,\n                        json: u\n                    }))),\n            cancel: a\n        };\n    }, gs = Ir(ys);\nOt.createHTTPBatchLink = Ir;\nOt.httpBatchLink = gs;\nvar tt = {};\nObject.defineProperty(tt, \"__esModule\", {\n    value: !0\n});\nvar bs = he, ws = et, Yt = me, Lr = z;\nfunction Ar(t) {\n    return (e)=>{\n        const r = Lr.resolveHTTPLinkOptions(e);\n        return (n)=>({ op: s })=>bs.observable((a)=>{\n                    const { path: o, input: i, type: c } = s, { promise: u, cancel: l } = t.requester({\n                        ...r,\n                        runtime: n,\n                        type: c,\n                        path: o,\n                        input: i,\n                        headers () {\n                            return e.headers ? typeof e.headers == \"function\" ? e.headers({\n                                op: s\n                            }) : e.headers : {};\n                        }\n                    });\n                    let f;\n                    return u.then((m)=>{\n                        f = m.meta;\n                        const v = ws.transformResult(m.json, n);\n                        if (!v.ok) {\n                            a.error(Yt.TRPCClientError.from(v.error, {\n                                meta: f\n                            }));\n                            return;\n                        }\n                        a.next({\n                            context: m.meta,\n                            result: v.result\n                        }), a.complete();\n                    }).catch((m)=>{\n                        a.error(Yt.TRPCClientError.from(m, {\n                            meta: f\n                        }));\n                    }), ()=>{\n                        l();\n                    };\n                });\n    };\n}\nconst _s = Ar({\n    requester: Lr.jsonHttpRequester\n});\ntt.httpLink = _s;\ntt.httpLinkFactory = Ar;\nvar Pt = {};\nObject.defineProperty(Pt, \"__esModule\", {\n    value: !0\n});\nvar Qt = he;\nfunction vs(t) {\n    return typeof FormData > \"u\" ? !1 : t instanceof FormData;\n}\nconst ht = {\n    css: {\n        query: [\n            \"72e3ff\",\n            \"3fb0d8\"\n        ],\n        mutation: [\n            \"c5a3fc\",\n            \"904dfc\"\n        ],\n        subscription: [\n            \"ff49e1\",\n            \"d83fbe\"\n        ]\n    },\n    ansi: {\n        regular: {\n            // Cyan background, black and white text respectively\n            query: [\n                \"\\x1b[30;46m\",\n                \"\\x1b[97;46m\"\n            ],\n            // Magenta background, black and white text respectively\n            mutation: [\n                \"\\x1b[30;45m\",\n                \"\\x1b[97;45m\"\n            ],\n            // Green background, black and white text respectively\n            subscription: [\n                \"\\x1b[30;42m\",\n                \"\\x1b[97;42m\"\n            ]\n        },\n        bold: {\n            query: [\n                \"\\x1b[1;30;46m\",\n                \"\\x1b[1;97;46m\"\n            ],\n            mutation: [\n                \"\\x1b[1;30;45m\",\n                \"\\x1b[1;97;45m\"\n            ],\n            subscription: [\n                \"\\x1b[1;30;42m\",\n                \"\\x1b[1;97;42m\"\n            ]\n        }\n    }\n};\nfunction xs(t) {\n    const { direction: e, type: r, path: n, id: s, input: a } = t, o = [], i = [];\n    if (t.colorMode === \"ansi\") {\n        const [f, m] = ht.ansi.regular[r], [v, E] = ht.ansi.bold[r], S = \"\\x1b[0m\";\n        return o.push(e === \"up\" ? f : m, e === \"up\" ? \">>\" : \"<<\", r, e === \"up\" ? v : E, `#${s}`, n, S), e === \"up\" ? i.push({\n            input: t.input\n        }) : i.push({\n            input: t.input,\n            // strip context from result cause it's too noisy in terminal wihtout collapse mode\n            result: \"result\" in t.result ? t.result.result : t.result,\n            elapsedMs: t.elapsedMs\n        }), {\n            parts: o,\n            args: i\n        };\n    }\n    const [c, u] = ht.css[r], l = `\n    background-color: #${e === \"up\" ? c : u}; \n    color: ${e === \"up\" ? \"black\" : \"white\"};\n    padding: 2px;\n  `;\n    return o.push(\"%c\", e === \"up\" ? \">>\" : \"<<\", r, `#${s}`, `%c${n}%c`, \"%O\"), i.push(l, `${l}; font-weight: bold;`, `${l}; font-weight: normal;`), e === \"up\" ? i.push({\n        input: a,\n        context: t.context\n    }) : i.push({\n        input: a,\n        result: t.result,\n        elapsedMs: t.elapsedMs,\n        context: t.context\n    }), {\n        parts: o,\n        args: i\n    };\n}\nconst Ts = ({ c: t = console, colorMode: e = \"css\" })=>(r)=>{\n        const n = r.input, s = vs(n) ? Object.fromEntries(n) : n, { parts: a, args: o } = xs({\n            ...r,\n            colorMode: e,\n            input: s\n        }), i = r.direction === \"down\" && r.result && (r.result instanceof Error || \"error\" in r.result.result) ? \"error\" : \"log\";\n        t[i].apply(null, [\n            a.join(\" \")\n        ].concat(o));\n    };\nfunction Es(t = {}) {\n    const { enabled: e = ()=>!0 } = t, r = t.colorMode ?? ( true ? \"ansi\" : 0), { logger: n = Ts({\n        c: t.console,\n        colorMode: r\n    }) } = t;\n    return ()=>({ op: s, next: a })=>Qt.observable((o)=>{\n                e({\n                    ...s,\n                    direction: \"up\"\n                }) && n({\n                    ...s,\n                    direction: \"up\"\n                });\n                const i = Date.now();\n                function c(u) {\n                    const l = Date.now() - i;\n                    e({\n                        ...s,\n                        direction: \"down\",\n                        result: u\n                    }) && n({\n                        ...s,\n                        direction: \"down\",\n                        elapsedMs: l,\n                        result: u\n                    });\n                }\n                return a(s).pipe(Qt.tap({\n                    next (u) {\n                        c(u);\n                    },\n                    error (u) {\n                        c(u);\n                    }\n                })).subscribe(o);\n            });\n}\nPt.loggerLink = Es;\nvar rt = {};\nObject.defineProperty(rt, \"__esModule\", {\n    value: !0\n});\nvar ks = he, Cs = et, Mr = me;\n/* istanbul ignore next -- @preserve */ const Rs = (t)=>t === 0 ? 0 : Math.min(1e3 * 2 ** t, 3e4);\nfunction Os(t) {\n    const { url: e, WebSocket: r = WebSocket, retryDelayMs: n = Rs, onOpen: s, onClose: a } = t;\n    /* istanbul ignore next -- @preserve */ if (!r) throw new Error(\"No WebSocket implementation found - you probably don't want to use this on the server, but if you do you need to pass a `WebSocket`-ponyfill\");\n    let o = [];\n    const i = /* @__PURE__ */ Object.create(null);\n    let c = 0, u = null, l = null, f = jt(), m = \"connecting\";\n    function v() {\n        m !== \"open\" || u || (u = setTimeout(()=>{\n            u = null, o.length === 1 ? f.send(JSON.stringify(o.pop())) : f.send(JSON.stringify(o)), o = [];\n        }));\n    }\n    function E() {\n        if (l !== null || m === \"closed\") return;\n        const R = n(c++);\n        ne(R);\n    }\n    function S() {\n        m = \"connecting\";\n        const R = f;\n        f = jt(), A(R);\n    }\n    function ne(R) {\n        l || (m = \"connecting\", l = setTimeout(S, R));\n    }\n    function A(R) {\n        Object.values(i).some((se)=>se.ws === R) || R.close();\n    }\n    function q() {\n        Object.values(i).forEach((R)=>{\n            R.type === \"subscription\" && R.callbacks.complete();\n        });\n    }\n    function Mt(R) {\n        o.some((P)=>P.id === R.op.id) || $t(R.op, R.callbacks);\n    }\n    function jt() {\n        const R = typeof e == \"function\" ? e() : e, P = new r(R);\n        clearTimeout(l), l = null, P.addEventListener(\"open\", ()=>{\n            /* istanbul ignore next -- @preserve */ P === f && (c = 0, m = \"open\", s?.(), v());\n        }), P.addEventListener(\"error\", ()=>{\n            P === f && E();\n        });\n        const se = (L)=>{\n            if (L.method === \"reconnect\" && P === f) {\n                m === \"open\" && a?.(), S();\n                for (const k of Object.values(i))k.type === \"subscription\" && Mt(k);\n            }\n        }, ct = (L)=>{\n            const k = L.id !== null && i[L.id];\n            if (k) {\n                if (k.callbacks.next?.(L), k.ws !== f && P === f) {\n                    const B = k.ws;\n                    k.ws = f, A(B);\n                }\n                \"result\" in L && L.result.type === \"stopped\" && P === f && k.callbacks.complete();\n            }\n        };\n        return P.addEventListener(\"message\", ({ data: L })=>{\n            const k = JSON.parse(L);\n            \"method\" in k ? se(k) : ct(k), (P !== f || m === \"closed\") && A(P);\n        }), P.addEventListener(\"close\", ({ code: L })=>{\n            m === \"open\" && a?.({\n                code: L\n            }), f === P && E();\n            for (const [k, B] of Object.entries(i))if (B.ws === P) {\n                if (m === \"closed\") {\n                    delete i[k], B.callbacks.complete?.();\n                    continue;\n                }\n                B.type === \"subscription\" ? Mt(B) : (delete i[k], B.callbacks.error?.(Mr.TRPCClientError.from(new St(\"WebSocket closed prematurely\"))));\n            }\n        }), P;\n    }\n    function $t(R, P) {\n        const { type: se, input: ct, path: L, id: k } = R, B = {\n            id: k,\n            method: se,\n            params: {\n                input: ct,\n                path: L\n            }\n        };\n        return i[k] = {\n            ws: f,\n            type: se,\n            callbacks: P,\n            op: R\n        }, o.push(B), v(), ()=>{\n            const nn = i[k]?.callbacks;\n            delete i[k], o = o.filter((sn)=>sn.id !== k), nn?.complete?.(), f.readyState === r.OPEN && R.type === \"subscription\" && (o.push({\n                id: k,\n                method: \"subscription.stop\"\n            }), v());\n        };\n    }\n    return {\n        close: ()=>{\n            m = \"closed\", a?.(), q(), A(f), clearTimeout(l), l = null;\n        },\n        request: $t,\n        getConnection () {\n            return f;\n        }\n    };\n}\nclass St extends Error {\n    constructor(e){\n        super(e), this.name = \"TRPCWebSocketClosedError\", Object.setPrototypeOf(this, St.prototype);\n    }\n}\nfunction Ps(t) {\n    return (e)=>{\n        const { client: r } = t;\n        return ({ op: n })=>ks.observable((s)=>{\n                const { type: a, path: o, id: i, context: c } = n, u = e.transformer.serialize(n.input), l = r.request({\n                    type: a,\n                    path: o,\n                    input: u,\n                    id: i,\n                    context: c\n                }, {\n                    error (f) {\n                        s.error(f), l();\n                    },\n                    complete () {\n                        s.complete();\n                    },\n                    next (f) {\n                        const m = Cs.transformResult(f, e);\n                        if (!m.ok) {\n                            s.error(Mr.TRPCClientError.from(m.error));\n                            return;\n                        }\n                        s.next({\n                            result: m.result\n                        }), n.type !== \"subscription\" && (l(), s.complete());\n                    }\n                });\n                return ()=>{\n                    l();\n                };\n            });\n    };\n}\nrt.createWSClient = Os;\nrt.wsLink = Ps;\nObject.defineProperty(O, \"__esModule\", {\n    value: !0\n});\nvar Xt = he, jr = Rt, $r = me, Kt = as, we = z, Dr = Ot, Nt = tt, Ss = Pt, Zr = rt;\nclass nt {\n    $request({ type: e, input: r, path: n, context: s = {} }) {\n        return jr.createChain({\n            links: this.links,\n            op: {\n                id: ++this.requestId,\n                type: e,\n                path: n,\n                input: r,\n                context: s\n            }\n        }).pipe(Xt.share());\n    }\n    requestAsPromise(e) {\n        const r = this.$request(e), { promise: n, abort: s } = Xt.observableToPromise(r);\n        return new Promise((o, i)=>{\n            e.signal?.addEventListener(\"abort\", s), n.then((c)=>{\n                o(c.result.data);\n            }).catch((c)=>{\n                i($r.TRPCClientError.from(c));\n            });\n        });\n    }\n    query(e, r, n) {\n        return this.requestAsPromise({\n            type: \"query\",\n            path: e,\n            input: r,\n            context: n?.context,\n            signal: n?.signal\n        });\n    }\n    mutation(e, r, n) {\n        return this.requestAsPromise({\n            type: \"mutation\",\n            path: e,\n            input: r,\n            context: n?.context,\n            signal: n?.signal\n        });\n    }\n    subscription(e, r, n) {\n        return this.$request({\n            type: \"subscription\",\n            path: e,\n            input: r,\n            context: n?.context\n        }).subscribe({\n            next (a) {\n                a.result.type === \"started\" ? n.onStarted?.() : a.result.type === \"stopped\" ? n.onStopped?.() : n.onData?.(a.result.data);\n            },\n            error (a) {\n                n.onError?.(a);\n            },\n            complete () {\n                n.onComplete?.();\n            }\n        });\n    }\n    constructor(e){\n        this.requestId = 0;\n        const r = (()=>{\n            const n = e.transformer;\n            return n ? \"input\" in n ? e.transformer : {\n                input: n,\n                output: n\n            } : {\n                input: {\n                    serialize: (s)=>s,\n                    deserialize: (s)=>s\n                },\n                output: {\n                    serialize: (s)=>s,\n                    deserialize: (s)=>s\n                }\n            };\n        })();\n        this.runtime = {\n            transformer: {\n                serialize: (n)=>r.input.serialize(n),\n                deserialize: (n)=>r.output.deserialize(n)\n            },\n            combinedTransformer: r\n        }, this.links = e.links.map((n)=>n(this.runtime));\n    }\n}\nfunction Ns(t) {\n    return new nt(t);\n}\nfunction Is(t) {\n    return new nt(t);\n}\nconst Ls = {\n    query: \"query\",\n    mutate: \"mutation\",\n    subscribe: \"subscription\"\n}, Ur = (t)=>Ls[t];\nfunction Wr(t) {\n    return Kt.createFlatProxy((e)=>t.hasOwnProperty(e) ? t[e] : e === \"__untypedClient\" ? t : Kt.createRecursiveProxy(({ path: r, args: n })=>{\n            const s = [\n                e,\n                ...r\n            ], a = Ur(s.pop()), o = s.join(\".\");\n            return t[a](o, ...n);\n        }));\n}\nfunction As(t) {\n    const e = new nt(t);\n    return Wr(e);\n}\nfunction Ms(t) {\n    return t.__untypedClient;\n}\nfunction js(t) {\n    if (t) return t;\n    if (false) {}\n    if (typeof globalThis < \"u\" && globalThis.TextDecoder) return new globalThis.TextDecoder();\n    throw new Error(\"No TextDecoder implementation found\");\n}\nasync function $s(t) {\n    const e = t.parse ?? JSON.parse, r = (n)=>{\n        if (t.signal?.aborted || !n || n === \"}\") return;\n        const s = n.indexOf(\":\"), a = n.substring(2, s - 1), o = n.substring(s + 1);\n        t.onSingle(Number(a), e(o));\n    };\n    await Ds(t.readableStream, r, t.textDecoder);\n}\nasync function Ds(t, e, r) {\n    let n = \"\";\n    const s = (a)=>{\n        const i = r.decode(a).split(`\n`);\n        if (i.length === 1) n += i[0];\n        else if (i.length > 1) {\n            e(n + i[0]);\n            for(let c = 1; c < i.length - 1; c++)e(i[c]);\n            n = i[i.length - 1];\n        }\n    };\n    \"getReader\" in t ? await Us(t, s) : await Zs(t, s), e(n);\n}\nfunction Zs(t, e) {\n    return new Promise((r)=>{\n        t.on(\"data\", e), t.on(\"end\", r);\n    });\n}\nasync function Us(t, e) {\n    const r = t.getReader();\n    let n = await r.read();\n    for(; !n.done;)e(n.value), n = await r.read();\n}\nconst Ws = (t, e)=>{\n    const r = t.AbortController ? new t.AbortController() : null, n = we.fetchHTTPResponse({\n        ...t,\n        contentTypeHeader: \"application/json\",\n        batchModeHeader: \"stream\",\n        getUrl: we.getUrl,\n        getBody: we.getBody\n    }, r), s = ()=>r?.abort(), a = n.then(async (o)=>{\n        if (!o.body) throw new Error(\"Received response without body\");\n        const i = {\n            response: o\n        };\n        return $s({\n            readableStream: o.body,\n            onSingle: e,\n            parse: (c)=>({\n                    json: JSON.parse(c),\n                    meta: i\n                }),\n            signal: r?.signal,\n            textDecoder: t.textDecoder\n        });\n    });\n    return {\n        cancel: s,\n        promise: a\n    };\n}, zs = (t)=>{\n    const e = js(t.opts.textDecoder);\n    return (r, n)=>{\n        const s = r.map((c)=>c.path).join(\",\"), a = r.map((c)=>c.input), { cancel: o, promise: i } = Ws({\n            ...t,\n            textDecoder: e,\n            path: s,\n            inputs: a,\n            headers () {\n                return t.opts.headers ? typeof t.opts.headers == \"function\" ? t.opts.headers({\n                    opList: r\n                }) : t.opts.headers : {};\n            }\n        }, (c, u)=>{\n            n(c, u);\n        });\n        return {\n            /**\n      * return an empty array because the batchLoader expects an array of results\n      * but we've already called the `unitResolver` for each of them, there's\n      * nothing left to do here.\n      */ promise: i.then(()=>[]),\n            cancel: o\n        };\n    };\n}, qs = Dr.createHTTPBatchLink(zs), Bs = (t)=>{\n    if (\"input\" in t) {\n        if (!(t.input instanceof FormData)) throw new Error(\"Input is not FormData\");\n        return t.input;\n    }\n}, Vs = (t)=>{\n    if (t.type !== \"mutation\") throw new Error(\"We only handle mutations with formdata\");\n    return we.httpRequest({\n        ...t,\n        getUrl () {\n            return `${t.url}/${t.path}`;\n        },\n        getBody: Bs\n    });\n}, Hs = Nt.httpLinkFactory({\n    requester: Vs\n});\nO.splitLink = jr.splitLink;\nO.TRPCClientError = $r.TRPCClientError;\nO.getFetch = we.getFetch;\nO.httpBatchLink = Dr.httpBatchLink;\nO.httpLink = Nt.httpLink;\nO.httpLinkFactory = Nt.httpLinkFactory;\nO.loggerLink = Ss.loggerLink;\nO.createWSClient = Zr.createWSClient;\nO.wsLink = Zr.wsLink;\nO.TRPCUntypedClient = nt;\nO.clientCallTypeToProcedureType = Ur;\nO.createTRPCClient = Is;\nO.createTRPCClientProxy = Wr;\nO.createTRPCProxyClient = As;\nO.createTRPCUntypedClient = Ns;\nO.experimental_formDataLink = Hs;\nO.getUntypedClient = Ms;\nO.unstable_httpBatchStreamLink = qs;\nvar X = {}, It = {};\nfunction Fs(t) {\n    return t;\n}\nfunction Js(t) {\n    return t.length === 0 ? Fs : t.length === 1 ? t[0] : function(r) {\n        return t.reduce((n, s)=>s(n), r);\n    };\n}\nfunction Gs(t) {\n    return typeof t == \"object\" && t !== null && \"subscribe\" in t;\n}\nfunction Ys(t) {\n    const e = {\n        subscribe (r) {\n            let n = null, s = !1, a = !1, o = !1;\n            function i() {\n                if (n === null) {\n                    o = !0;\n                    return;\n                }\n                a || (a = !0, typeof n == \"function\" ? n() : n && n.unsubscribe());\n            }\n            return n = t({\n                next (c) {\n                    s || r.next?.(c);\n                },\n                error (c) {\n                    s || (s = !0, r.error?.(c), i());\n                },\n                complete () {\n                    s || (s = !0, r.complete?.(), i());\n                }\n            }), o && i(), {\n                unsubscribe: i\n            };\n        },\n        pipe (...r) {\n            return Js(r)(e);\n        }\n    };\n    return e;\n}\nIt.isObservable = Gs;\nIt.observable = Ys;\nObject.defineProperty(X, \"__esModule\", {\n    value: !0\n});\nvar zr = It;\nfunction Qs(t) {\n    return (e)=>{\n        let r = 0, n = null;\n        const s = [];\n        function a() {\n            n || (n = e.subscribe({\n                next (i) {\n                    for (const c of s)c.next?.(i);\n                },\n                error (i) {\n                    for (const c of s)c.error?.(i);\n                },\n                complete () {\n                    for (const i of s)i.complete?.();\n                }\n            }));\n        }\n        function o() {\n            if (r === 0 && n) {\n                const i = n;\n                n = null, i.unsubscribe();\n            }\n        }\n        return {\n            subscribe (i) {\n                return r++, s.push(i), a(), {\n                    unsubscribe () {\n                        r--, o();\n                        const c = s.findIndex((u)=>u === i);\n                        c > -1 && s.splice(c, 1);\n                    }\n                };\n            }\n        };\n    };\n}\nfunction Xs(t) {\n    return (e)=>({\n            subscribe (r) {\n                let n = 0;\n                return e.subscribe({\n                    next (a) {\n                        r.next?.(t(a, n++));\n                    },\n                    error (a) {\n                        r.error?.(a);\n                    },\n                    complete () {\n                        r.complete?.();\n                    }\n                });\n            }\n        });\n}\nfunction Ks(t) {\n    return (e)=>({\n            subscribe (r) {\n                return e.subscribe({\n                    next (n) {\n                        t.next?.(n), r.next?.(n);\n                    },\n                    error (n) {\n                        t.error?.(n), r.error?.(n);\n                    },\n                    complete () {\n                        t.complete?.(), r.complete?.();\n                    }\n                });\n            }\n        });\n}\nclass Lt extends Error {\n    constructor(e){\n        super(e), this.name = \"ObservableAbortError\", Object.setPrototypeOf(this, Lt.prototype);\n    }\n}\nfunction ea(t) {\n    let e;\n    return {\n        promise: new Promise((n, s)=>{\n            let a = !1;\n            function o() {\n                a || (a = !0, s(new Lt(\"This operation was aborted.\")), i.unsubscribe());\n            }\n            const i = t.subscribe({\n                next (c) {\n                    a = !0, n(c), o();\n                },\n                error (c) {\n                    a = !0, s(c), o();\n                },\n                complete () {\n                    a = !0, o();\n                }\n            });\n            e = o;\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        abort: e\n    };\n}\nX.isObservable = zr.isObservable;\nX.observable = zr.observable;\nX.map = Xs;\nX.observableToPromise = ea;\nX.share = Qs;\nX.tap = Ks;\nvar Z = {};\nObject.defineProperty(Z, \"__esModule\", {\n    value: !0\n});\nZ.isTRPCRequestWithId = Z.isTRPCRequest = Z.isTRPCResponse = Z.isTRPCMessage = void 0;\nfunction er(t) {\n    return typeof t == \"object\" && t !== null && !Array.isArray(t);\n}\nfunction ta(t) {\n    return t == null;\n}\nfunction qr(t) {\n    return !!(er(t) && \"trpc\" in t && er(t.trpc));\n}\nZ.isTRPCMessage = qr;\nfunction At(t) {\n    return qr(t) && \"id\" in t.trpc && !ta(t.trpc.id);\n}\nfunction ra(t) {\n    return At(t) && (\"error\" in t.trpc || \"result\" in t.trpc);\n}\nZ.isTRPCResponse = ra;\nfunction Br(t) {\n    return At(t) && \"method\" in t.trpc;\n}\nZ.isTRPCRequest = Br;\nfunction na(t) {\n    return Br(t) && At(t);\n}\nZ.isTRPCRequestWithId = na;\nObject.defineProperty(pe, \"__esModule\", {\n    value: !0\n});\npe.createBaseLink = void 0;\nconst mt = O, sa = X, aa = Z, oa = (t)=>(e)=>({ op: r })=>(0, sa.observable)((n)=>{\n                const s = [], { id: a, type: o, path: i } = r;\n                try {\n                    const c = e.transformer.serialize(r.input), u = ()=>{\n                        n.error(new mt.TRPCClientError(\"Port disconnected prematurely\"));\n                    };\n                    t.addCloseListener(u), s.push(()=>t.removeCloseListener(u));\n                    const l = (f)=>{\n                        if (!(0, aa.isTRPCResponse)(f)) return;\n                        const { trpc: m } = f;\n                        if (a === m.id) {\n                            if (\"error\" in m) {\n                                const v = e.transformer.deserialize(m.error);\n                                n.error(mt.TRPCClientError.from(Object.assign(Object.assign({}, m), {\n                                    error: v\n                                })));\n                                return;\n                            }\n                            n.next({\n                                result: Object.assign(Object.assign({}, m.result), (!m.result.type || m.result.type === \"data\") && {\n                                    type: \"data\",\n                                    data: e.transformer.deserialize(m.result.data)\n                                })\n                            }), (o !== \"subscription\" || m.result.type === \"stopped\") && n.complete();\n                        }\n                    };\n                    t.addMessageListener(l), s.push(()=>t.removeMessageListener(l)), t.postMessage({\n                        trpc: {\n                            id: a,\n                            jsonrpc: void 0,\n                            method: o,\n                            params: {\n                                path: i,\n                                input: c\n                            }\n                        }\n                    });\n                } catch (c) {\n                    n.error(new mt.TRPCClientError(c instanceof Error ? c.message : \"Unknown error\"));\n                }\n                return ()=>{\n                    o === \"subscription\" && t.postMessage({\n                        trpc: {\n                            id: a,\n                            jsonrpc: void 0,\n                            method: \"subscription.stop\"\n                        }\n                    }), s.forEach((c)=>c());\n                };\n            });\npe.createBaseLink = oa;\nObject.defineProperty(Ke, \"__esModule\", {\n    value: !0\n});\nKe.chromeLink = void 0;\nconst ia = pe, ca = (t)=>(0, ia.createBaseLink)({\n        postMessage (e) {\n            t.port.postMessage(e);\n        },\n        addMessageListener (e) {\n            t.port.onMessage.addListener(e);\n        },\n        removeMessageListener (e) {\n            t.port.onMessage.removeListener(e);\n        },\n        addCloseListener (e) {\n            t.port.onDisconnect.addListener(e);\n        },\n        removeCloseListener (e) {\n            t.port.onDisconnect.removeListener(e);\n        }\n    });\nKe.chromeLink = ca;\nvar st = {};\nObject.defineProperty(st, \"__esModule\", {\n    value: !0\n});\nst.windowLink = void 0;\nconst ua = pe, la = (t)=>{\n    var e;\n    const r = /* @__PURE__ */ new Map(), n = t.window, s = (e = t.postWindow) !== null && e !== void 0 ? e : n;\n    return (0, ua.createBaseLink)({\n        postMessage (a) {\n            s.postMessage(a, {\n                targetOrigin: t.postOrigin\n            });\n        },\n        addMessageListener (a) {\n            const o = (i)=>{\n                a(i.data);\n            };\n            r.set(a, o), n.addEventListener(\"message\", o);\n        },\n        removeMessageListener (a) {\n            const o = r.get(a);\n            o && n.removeEventListener(\"message\", o);\n        },\n        addCloseListener (a) {\n            n.addEventListener(\"beforeunload\", a);\n        },\n        removeCloseListener (a) {\n            n.removeEventListener(\"beforeunload\", a);\n        }\n    });\n};\nst.windowLink = la;\nvar at = {}, ot = {};\nObject.defineProperty(ot, \"__esModule\", {\n    value: !0\n});\not.TRPC_BROWSER_LOADED_EVENT = void 0;\not.TRPC_BROWSER_LOADED_EVENT = \"TRPC_BROWSER::POPUP_LOADED\";\nObject.defineProperty(at, \"__esModule\", {\n    value: !0\n});\nat.popupLink = void 0;\nconst da = ot, fa = pe, pa = (t)=>{\n    const e = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Set();\n    let n = null;\n    async function s(a) {\n        if (!n || n.closed) {\n            n = t.createPopup(), await Promise.race([\n                // wait til window is loaded (same origin)\n                new Promise((o)=>{\n                    var i;\n                    try {\n                        (i = n?.addEventListener) === null || i === void 0 || i.call(n, \"load\", o);\n                    } catch  {}\n                }),\n                // this is needed for cross-origin popups as they don't have a load event\n                new Promise((o)=>{\n                    a.addEventListener(\"message\", (i)=>{\n                        i.data === da.TRPC_BROWSER_LOADED_EVENT && o();\n                    });\n                }),\n                // expect the popup to load after 15s max, in case non of the above events fire\n                new Promise((o)=>{\n                    console.warn(\"Could not detect if popup loading succeeded after 15s timeout, continuing anyway\"), setTimeout(o, 15e3);\n                })\n            ]);\n            try {\n                if (!n.addEventListener) throw new Error(\"popupWindow.addEventListener is not a function\");\n                n.addEventListener(\"beforeunload\", ()=>{\n                    n = null;\n                });\n            } catch  {\n                const i = setInterval(()=>{\n                    n && n.closed && (n = null, r.forEach((c)=>{\n                        c();\n                    }), clearInterval(i));\n                }, 1e3);\n            }\n        }\n        return n;\n    }\n    return (0, fa.createBaseLink)({\n        async postMessage (a) {\n            return (await s(t.listenWindow)).postMessage(a, {\n                targetOrigin: t.postOrigin\n            });\n        },\n        addMessageListener (a) {\n            const o = (i)=>{\n                a(i.data);\n            };\n            e.set(a, o), t.listenWindow.addEventListener(\"message\", o);\n        },\n        removeMessageListener (a) {\n            const o = e.get(a);\n            o && t.listenWindow.removeEventListener(\"message\", o);\n        },\n        addCloseListener (a) {\n            t.listenWindow.addEventListener(\"beforeunload\", a), r.add(a);\n        },\n        removeCloseListener (a) {\n            t.listenWindow.removeEventListener(\"beforeunload\", a), r.delete(a);\n        }\n    });\n};\nat.popupLink = pa;\n(function(t) {\n    var e = _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c && _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.__createBinding || (Object.create ? function(n, s, a, o) {\n        o === void 0 && (o = a);\n        var i = Object.getOwnPropertyDescriptor(s, a);\n        (!i || (\"get\" in i ? !s.__esModule : i.writable || i.configurable)) && (i = {\n            enumerable: !0,\n            get: function() {\n                return s[a];\n            }\n        }), Object.defineProperty(n, o, i);\n    } : function(n, s, a, o) {\n        o === void 0 && (o = a), n[o] = s[a];\n    }), r = _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c && _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.__exportStar || function(n, s) {\n        for(var a in n)a !== \"default\" && !Object.prototype.hasOwnProperty.call(s, a) && e(s, n, a);\n    };\n    Object.defineProperty(t, \"__esModule\", {\n        value: !0\n    }), r(Ke, t), r(st, t), r(at, t);\n})(bt);\nvar T;\n(function(t) {\n    t.assertEqual = (s)=>s;\n    function e(s) {}\n    t.assertIs = e;\n    function r(s) {\n        throw new Error();\n    }\n    t.assertNever = r, t.arrayToEnum = (s)=>{\n        const a = {};\n        for (const o of s)a[o] = o;\n        return a;\n    }, t.getValidEnumValues = (s)=>{\n        const a = t.objectKeys(s).filter((i)=>typeof s[s[i]] != \"number\"), o = {};\n        for (const i of a)o[i] = s[i];\n        return t.objectValues(o);\n    }, t.objectValues = (s)=>t.objectKeys(s).map(function(a) {\n            return s[a];\n        }), t.objectKeys = typeof Object.keys == \"function\" ? (s)=>Object.keys(s) : (s)=>{\n        const a = [];\n        for(const o in s)Object.prototype.hasOwnProperty.call(s, o) && a.push(o);\n        return a;\n    }, t.find = (s, a)=>{\n        for (const o of s)if (a(o)) return o;\n    }, t.isInteger = typeof Number.isInteger == \"function\" ? (s)=>Number.isInteger(s) : (s)=>typeof s == \"number\" && isFinite(s) && Math.floor(s) === s;\n    function n(s, a = \" | \") {\n        return s.map((o)=>typeof o == \"string\" ? `'${o}'` : o).join(a);\n    }\n    t.joinValues = n, t.jsonStringifyReplacer = (s, a)=>typeof a == \"bigint\" ? a.toString() : a;\n})(T || (T = {}));\nconst h = T.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\"\n]), G = (t)=>{\n    switch(typeof t){\n        case \"undefined\":\n            return h.undefined;\n        case \"string\":\n            return h.string;\n        case \"number\":\n            return isNaN(t) ? h.nan : h.number;\n        case \"boolean\":\n            return h.boolean;\n        case \"function\":\n            return h.function;\n        case \"bigint\":\n            return h.bigint;\n        case \"symbol\":\n            return h.symbol;\n        case \"object\":\n            return Array.isArray(t) ? h.array : t === null ? h.null : t.then && typeof t.then == \"function\" && t.catch && typeof t.catch == \"function\" ? h.promise : typeof Map < \"u\" && t instanceof Map ? h.map : typeof Set < \"u\" && t instanceof Set ? h.set : typeof Date < \"u\" && t instanceof Date ? h.date : h.object;\n        default:\n            return h.unknown;\n    }\n}, d = T.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\"\n]), ha = (t)=>JSON.stringify(t, null, 2).replace(/\"([^\"]+)\":/g, \"$1:\");\nclass V extends Error {\n    constructor(e){\n        super(), this.issues = [], this.addIssue = (n)=>{\n            this.issues = [\n                ...this.issues,\n                n\n            ];\n        }, this.addIssues = (n = [])=>{\n            this.issues = [\n                ...this.issues,\n                ...n\n            ];\n        };\n        const r = new.target.prototype;\n        Object.setPrototypeOf ? Object.setPrototypeOf(this, r) : this.__proto__ = r, this.name = \"ZodError\", this.issues = e;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(e) {\n        const r = e || function(a) {\n            return a.message;\n        }, n = {\n            _errors: []\n        }, s = (a)=>{\n            for (const o of a.issues)if (o.code === \"invalid_union\") o.unionErrors.map(s);\n            else if (o.code === \"invalid_return_type\") s(o.returnTypeError);\n            else if (o.code === \"invalid_arguments\") s(o.argumentsError);\n            else if (o.path.length === 0) n._errors.push(r(o));\n            else {\n                let i = n, c = 0;\n                for(; c < o.path.length;){\n                    const u = o.path[c];\n                    c === o.path.length - 1 ? (i[u] = i[u] || {\n                        _errors: []\n                    }, i[u]._errors.push(r(o))) : i[u] = i[u] || {\n                        _errors: []\n                    }, i = i[u], c++;\n                }\n            }\n        };\n        return s(this), n;\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, T.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(e = (r)=>r.message) {\n        const r = {}, n = [];\n        for (const s of this.issues)s.path.length > 0 ? (r[s.path[0]] = r[s.path[0]] || [], r[s.path[0]].push(e(s))) : n.push(e(s));\n        return {\n            formErrors: n,\n            fieldErrors: r\n        };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nV.create = (t)=>new V(t);\nconst xe = (t, e)=>{\n    let r;\n    switch(t.code){\n        case d.invalid_type:\n            t.received === h.undefined ? r = \"Required\" : r = `Expected ${t.expected}, received ${t.received}`;\n            break;\n        case d.invalid_literal:\n            r = `Invalid literal value, expected ${JSON.stringify(t.expected, T.jsonStringifyReplacer)}`;\n            break;\n        case d.unrecognized_keys:\n            r = `Unrecognized key(s) in object: ${T.joinValues(t.keys, \", \")}`;\n            break;\n        case d.invalid_union:\n            r = \"Invalid input\";\n            break;\n        case d.invalid_union_discriminator:\n            r = `Invalid discriminator value. Expected ${T.joinValues(t.options)}`;\n            break;\n        case d.invalid_enum_value:\n            r = `Invalid enum value. Expected ${T.joinValues(t.options)}, received '${t.received}'`;\n            break;\n        case d.invalid_arguments:\n            r = \"Invalid function arguments\";\n            break;\n        case d.invalid_return_type:\n            r = \"Invalid function return type\";\n            break;\n        case d.invalid_date:\n            r = \"Invalid date\";\n            break;\n        case d.invalid_string:\n            typeof t.validation == \"object\" ? \"startsWith\" in t.validation ? r = `Invalid input: must start with \"${t.validation.startsWith}\"` : \"endsWith\" in t.validation ? r = `Invalid input: must end with \"${t.validation.endsWith}\"` : T.assertNever(t.validation) : t.validation !== \"regex\" ? r = `Invalid ${t.validation}` : r = \"Invalid\";\n            break;\n        case d.too_small:\n            t.type === \"array\" ? r = `Array must contain ${t.exact ? \"exactly\" : t.inclusive ? \"at least\" : \"more than\"} ${t.minimum} element(s)` : t.type === \"string\" ? r = `String must contain ${t.exact ? \"exactly\" : t.inclusive ? \"at least\" : \"over\"} ${t.minimum} character(s)` : t.type === \"number\" ? r = `Number must be ${t.exact ? \"exactly equal to \" : t.inclusive ? \"greater than or equal to \" : \"greater than \"}${t.minimum}` : t.type === \"date\" ? r = `Date must be ${t.exact ? \"exactly equal to \" : t.inclusive ? \"greater than or equal to \" : \"greater than \"}${new Date(t.minimum)}` : r = \"Invalid input\";\n            break;\n        case d.too_big:\n            t.type === \"array\" ? r = `Array must contain ${t.exact ? \"exactly\" : t.inclusive ? \"at most\" : \"less than\"} ${t.maximum} element(s)` : t.type === \"string\" ? r = `String must contain ${t.exact ? \"exactly\" : t.inclusive ? \"at most\" : \"under\"} ${t.maximum} character(s)` : t.type === \"number\" ? r = `Number must be ${t.exact ? \"exactly\" : t.inclusive ? \"less than or equal to\" : \"less than\"} ${t.maximum}` : t.type === \"date\" ? r = `Date must be ${t.exact ? \"exactly\" : t.inclusive ? \"smaller than or equal to\" : \"smaller than\"} ${new Date(t.maximum)}` : r = \"Invalid input\";\n            break;\n        case d.custom:\n            r = \"Invalid input\";\n            break;\n        case d.invalid_intersection_types:\n            r = \"Intersection results could not be merged\";\n            break;\n        case d.not_multiple_of:\n            r = `Number must be a multiple of ${t.multipleOf}`;\n            break;\n        case d.not_finite:\n            r = \"Number must be finite\";\n            break;\n        default:\n            r = e.defaultError, T.assertNever(t);\n    }\n    return {\n        message: r\n    };\n};\nlet Vr = xe;\nfunction ma(t) {\n    Vr = t;\n}\nfunction We() {\n    return Vr;\n}\nconst ze = (t)=>{\n    const { data: e, path: r, errorMaps: n, issueData: s } = t, a = [\n        ...r,\n        ...s.path || []\n    ], o = {\n        ...s,\n        path: a\n    };\n    let i = \"\";\n    const c = n.filter((u)=>!!u).slice().reverse();\n    for (const u of c)i = u(o, {\n        data: e,\n        defaultError: i\n    }).message;\n    return {\n        ...s,\n        path: a,\n        message: s.message || i\n    };\n}, ya = [];\nfunction y(t, e) {\n    const r = ze({\n        issueData: e,\n        data: t.data,\n        path: t.path,\n        errorMaps: [\n            t.common.contextualErrorMap,\n            t.schemaErrorMap,\n            We(),\n            xe\n        ].filter((n)=>!!n)\n    });\n    t.common.issues.push(r);\n}\nclass I {\n    constructor(){\n        this.value = \"valid\";\n    }\n    dirty() {\n        this.value === \"valid\" && (this.value = \"dirty\");\n    }\n    abort() {\n        this.value !== \"aborted\" && (this.value = \"aborted\");\n    }\n    static mergeArray(e, r) {\n        const n = [];\n        for (const s of r){\n            if (s.status === \"aborted\") return b;\n            s.status === \"dirty\" && e.dirty(), n.push(s.value);\n        }\n        return {\n            status: e.value,\n            value: n\n        };\n    }\n    static async mergeObjectAsync(e, r) {\n        const n = [];\n        for (const s of r)n.push({\n            key: await s.key,\n            value: await s.value\n        });\n        return I.mergeObjectSync(e, n);\n    }\n    static mergeObjectSync(e, r) {\n        const n = {};\n        for (const s of r){\n            const { key: a, value: o } = s;\n            if (a.status === \"aborted\" || o.status === \"aborted\") return b;\n            a.status === \"dirty\" && e.dirty(), o.status === \"dirty\" && e.dirty(), (typeof o.value < \"u\" || s.alwaysSet) && (n[a.value] = o.value);\n        }\n        return {\n            status: e.value,\n            value: n\n        };\n    }\n}\nconst b = Object.freeze({\n    status: \"aborted\"\n}), Hr = (t)=>({\n        status: \"dirty\",\n        value: t\n    }), N = (t)=>({\n        status: \"valid\",\n        value: t\n    }), _t = (t)=>t.status === \"aborted\", vt = (t)=>t.status === \"dirty\", qe = (t)=>t.status === \"valid\", Be = (t)=>typeof Promise < \"u\" && t instanceof Promise;\nvar x;\n(function(t) {\n    t.errToObj = (e)=>typeof e == \"string\" ? {\n            message: e\n        } : e || {}, t.toString = (e)=>typeof e == \"string\" ? e : e?.message;\n})(x || (x = {}));\nclass U {\n    constructor(e, r, n, s){\n        this.parent = e, this.data = r, this._path = n, this._key = s;\n    }\n    get path() {\n        return this._path.concat(this._key);\n    }\n}\nconst tr = (t, e)=>{\n    if (qe(e)) return {\n        success: !0,\n        data: e.value\n    };\n    if (!t.common.issues.length) throw new Error(\"Validation failed but no issues detected.\");\n    return {\n        success: !1,\n        error: new V(t.common.issues)\n    };\n};\nfunction w(t) {\n    if (!t) return {};\n    const { errorMap: e, invalid_type_error: r, required_error: n, description: s } = t;\n    if (e && (r || n)) throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    return e ? {\n        errorMap: e,\n        description: s\n    } : {\n        errorMap: (o, i)=>o.code !== \"invalid_type\" ? {\n                message: i.defaultError\n            } : typeof i.data > \"u\" ? {\n                message: n ?? i.defaultError\n            } : {\n                message: r ?? i.defaultError\n            },\n        description: s\n    };\n}\nclass _ {\n    constructor(e){\n        this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this);\n    }\n    get description() {\n        return this._def.description;\n    }\n    _getType(e) {\n        return G(e.data);\n    }\n    _getOrReturnCtx(e, r) {\n        return r || {\n            common: e.parent.common,\n            data: e.data,\n            parsedType: G(e.data),\n            schemaErrorMap: this._def.errorMap,\n            path: e.path,\n            parent: e.parent\n        };\n    }\n    _processInputParams(e) {\n        return {\n            status: new I(),\n            ctx: {\n                common: e.parent.common,\n                data: e.data,\n                parsedType: G(e.data),\n                schemaErrorMap: this._def.errorMap,\n                path: e.path,\n                parent: e.parent\n            }\n        };\n    }\n    _parseSync(e) {\n        const r = this._parse(e);\n        if (Be(r)) throw new Error(\"Synchronous parse encountered promise.\");\n        return r;\n    }\n    _parseAsync(e) {\n        const r = this._parse(e);\n        return Promise.resolve(r);\n    }\n    parse(e, r) {\n        const n = this.safeParse(e, r);\n        if (n.success) return n.data;\n        throw n.error;\n    }\n    safeParse(e, r) {\n        var n;\n        const s = {\n            common: {\n                issues: [],\n                async: (n = r?.async) !== null && n !== void 0 ? n : !1,\n                contextualErrorMap: r?.errorMap\n            },\n            path: r?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data: e,\n            parsedType: G(e)\n        }, a = this._parseSync({\n            data: e,\n            path: s.path,\n            parent: s\n        });\n        return tr(s, a);\n    }\n    async parseAsync(e, r) {\n        const n = await this.safeParseAsync(e, r);\n        if (n.success) return n.data;\n        throw n.error;\n    }\n    async safeParseAsync(e, r) {\n        const n = {\n            common: {\n                issues: [],\n                contextualErrorMap: r?.errorMap,\n                async: !0\n            },\n            path: r?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data: e,\n            parsedType: G(e)\n        }, s = this._parse({\n            data: e,\n            path: n.path,\n            parent: n\n        }), a = await (Be(s) ? s : Promise.resolve(s));\n        return tr(n, a);\n    }\n    refine(e, r) {\n        const n = (s)=>typeof r == \"string\" || typeof r > \"u\" ? {\n                message: r\n            } : typeof r == \"function\" ? r(s) : r;\n        return this._refinement((s, a)=>{\n            const o = e(s), i = ()=>a.addIssue({\n                    code: d.custom,\n                    ...n(s)\n                });\n            return typeof Promise < \"u\" && o instanceof Promise ? o.then((c)=>c ? !0 : (i(), !1)) : o ? !0 : (i(), !1);\n        });\n    }\n    refinement(e, r) {\n        return this._refinement((n, s)=>e(n) ? !0 : (s.addIssue(typeof r == \"function\" ? r(n, s) : r), !1));\n    }\n    _refinement(e) {\n        return new D({\n            schema: this,\n            typeName: g.ZodEffects,\n            effect: {\n                type: \"refinement\",\n                refinement: e\n            }\n        });\n    }\n    superRefine(e) {\n        return this._refinement(e);\n    }\n    optional() {\n        return H.create(this, this._def);\n    }\n    nullable() {\n        return re.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return $.create(this, this._def);\n    }\n    promise() {\n        return fe.create(this, this._def);\n    }\n    or(e) {\n        return Re.create([\n            this,\n            e\n        ], this._def);\n    }\n    and(e) {\n        return Oe.create(this, e, this._def);\n    }\n    transform(e) {\n        return new D({\n            ...w(this._def),\n            schema: this,\n            typeName: g.ZodEffects,\n            effect: {\n                type: \"transform\",\n                transform: e\n            }\n        });\n    }\n    default(e) {\n        const r = typeof e == \"function\" ? e : ()=>e;\n        return new Le({\n            ...w(this._def),\n            innerType: this,\n            defaultValue: r,\n            typeName: g.ZodDefault\n        });\n    }\n    brand() {\n        return new Jr({\n            typeName: g.ZodBranded,\n            type: this,\n            ...w(this._def)\n        });\n    }\n    catch(e) {\n        const r = typeof e == \"function\" ? e : ()=>e;\n        return new Ge({\n            ...w(this._def),\n            innerType: this,\n            catchValue: r,\n            typeName: g.ZodCatch\n        });\n    }\n    describe(e) {\n        const r = this.constructor;\n        return new r({\n            ...this._def,\n            description: e\n        });\n    }\n    pipe(e) {\n        return Ae.create(this, e);\n    }\n    isOptional() {\n        return this.safeParse(void 0).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst ga = /^c[^\\s-]{8,}$/i, ba = /^[a-z][a-z0-9]*$/, wa = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i, _a = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|([^-]([a-zA-Z0-9-]*\\.)+[a-zA-Z]{2,}))$/, va = (t)=>t.precision ? t.offset ? new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${t.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`) : new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${t.precision}}Z$`) : t.precision === 0 ? t.offset ? new RegExp(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$\") : new RegExp(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$\") : t.offset ? new RegExp(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$\") : new RegExp(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$\");\nclass F extends _ {\n    constructor(){\n        super(...arguments), this._regex = (e, r, n)=>this.refinement((s)=>e.test(s), {\n                validation: r,\n                code: d.invalid_string,\n                ...x.errToObj(n)\n            }), this.nonempty = (e)=>this.min(1, x.errToObj(e)), this.trim = ()=>new F({\n                ...this._def,\n                checks: [\n                    ...this._def.checks,\n                    {\n                        kind: \"trim\"\n                    }\n                ]\n            });\n    }\n    _parse(e) {\n        if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== h.string) {\n            const a = this._getOrReturnCtx(e);\n            return y(a, {\n                code: d.invalid_type,\n                expected: h.string,\n                received: a.parsedType\n            }), b;\n        }\n        const n = new I();\n        let s;\n        for (const a of this._def.checks)if (a.kind === \"min\") e.data.length < a.value && (s = this._getOrReturnCtx(e, s), y(s, {\n            code: d.too_small,\n            minimum: a.value,\n            type: \"string\",\n            inclusive: !0,\n            exact: !1,\n            message: a.message\n        }), n.dirty());\n        else if (a.kind === \"max\") e.data.length > a.value && (s = this._getOrReturnCtx(e, s), y(s, {\n            code: d.too_big,\n            maximum: a.value,\n            type: \"string\",\n            inclusive: !0,\n            exact: !1,\n            message: a.message\n        }), n.dirty());\n        else if (a.kind === \"length\") {\n            const o = e.data.length > a.value, i = e.data.length < a.value;\n            (o || i) && (s = this._getOrReturnCtx(e, s), o ? y(s, {\n                code: d.too_big,\n                maximum: a.value,\n                type: \"string\",\n                inclusive: !0,\n                exact: !0,\n                message: a.message\n            }) : i && y(s, {\n                code: d.too_small,\n                minimum: a.value,\n                type: \"string\",\n                inclusive: !0,\n                exact: !0,\n                message: a.message\n            }), n.dirty());\n        } else if (a.kind === \"email\") _a.test(e.data) || (s = this._getOrReturnCtx(e, s), y(s, {\n            validation: \"email\",\n            code: d.invalid_string,\n            message: a.message\n        }), n.dirty());\n        else if (a.kind === \"uuid\") wa.test(e.data) || (s = this._getOrReturnCtx(e, s), y(s, {\n            validation: \"uuid\",\n            code: d.invalid_string,\n            message: a.message\n        }), n.dirty());\n        else if (a.kind === \"cuid\") ga.test(e.data) || (s = this._getOrReturnCtx(e, s), y(s, {\n            validation: \"cuid\",\n            code: d.invalid_string,\n            message: a.message\n        }), n.dirty());\n        else if (a.kind === \"cuid2\") ba.test(e.data) || (s = this._getOrReturnCtx(e, s), y(s, {\n            validation: \"cuid2\",\n            code: d.invalid_string,\n            message: a.message\n        }), n.dirty());\n        else if (a.kind === \"url\") try {\n            new URL(e.data);\n        } catch  {\n            s = this._getOrReturnCtx(e, s), y(s, {\n                validation: \"url\",\n                code: d.invalid_string,\n                message: a.message\n            }), n.dirty();\n        }\n        else a.kind === \"regex\" ? (a.regex.lastIndex = 0, a.regex.test(e.data) || (s = this._getOrReturnCtx(e, s), y(s, {\n            validation: \"regex\",\n            code: d.invalid_string,\n            message: a.message\n        }), n.dirty())) : a.kind === \"trim\" ? e.data = e.data.trim() : a.kind === \"startsWith\" ? e.data.startsWith(a.value) || (s = this._getOrReturnCtx(e, s), y(s, {\n            code: d.invalid_string,\n            validation: {\n                startsWith: a.value\n            },\n            message: a.message\n        }), n.dirty()) : a.kind === \"endsWith\" ? e.data.endsWith(a.value) || (s = this._getOrReturnCtx(e, s), y(s, {\n            code: d.invalid_string,\n            validation: {\n                endsWith: a.value\n            },\n            message: a.message\n        }), n.dirty()) : a.kind === \"datetime\" ? va(a).test(e.data) || (s = this._getOrReturnCtx(e, s), y(s, {\n            code: d.invalid_string,\n            validation: \"datetime\",\n            message: a.message\n        }), n.dirty()) : T.assertNever(a);\n        return {\n            status: n.value,\n            value: e.data\n        };\n    }\n    _addCheck(e) {\n        return new F({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                e\n            ]\n        });\n    }\n    email(e) {\n        return this._addCheck({\n            kind: \"email\",\n            ...x.errToObj(e)\n        });\n    }\n    url(e) {\n        return this._addCheck({\n            kind: \"url\",\n            ...x.errToObj(e)\n        });\n    }\n    uuid(e) {\n        return this._addCheck({\n            kind: \"uuid\",\n            ...x.errToObj(e)\n        });\n    }\n    cuid(e) {\n        return this._addCheck({\n            kind: \"cuid\",\n            ...x.errToObj(e)\n        });\n    }\n    cuid2(e) {\n        return this._addCheck({\n            kind: \"cuid2\",\n            ...x.errToObj(e)\n        });\n    }\n    datetime(e) {\n        var r;\n        return typeof e == \"string\" ? this._addCheck({\n            kind: \"datetime\",\n            precision: null,\n            offset: !1,\n            message: e\n        }) : this._addCheck({\n            kind: \"datetime\",\n            precision: typeof e?.precision > \"u\" ? null : e?.precision,\n            offset: (r = e?.offset) !== null && r !== void 0 ? r : !1,\n            ...x.errToObj(e?.message)\n        });\n    }\n    regex(e, r) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: e,\n            ...x.errToObj(r)\n        });\n    }\n    startsWith(e, r) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: e,\n            ...x.errToObj(r)\n        });\n    }\n    endsWith(e, r) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: e,\n            ...x.errToObj(r)\n        });\n    }\n    min(e, r) {\n        return this._addCheck({\n            kind: \"min\",\n            value: e,\n            ...x.errToObj(r)\n        });\n    }\n    max(e, r) {\n        return this._addCheck({\n            kind: \"max\",\n            value: e,\n            ...x.errToObj(r)\n        });\n    }\n    length(e, r) {\n        return this._addCheck({\n            kind: \"length\",\n            value: e,\n            ...x.errToObj(r)\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((e)=>e.kind === \"datetime\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((e)=>e.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((e)=>e.kind === \"url\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((e)=>e.kind === \"uuid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((e)=>e.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((e)=>e.kind === \"cuid2\");\n    }\n    get minLength() {\n        let e = null;\n        for (const r of this._def.checks)r.kind === \"min\" && (e === null || r.value > e) && (e = r.value);\n        return e;\n    }\n    get maxLength() {\n        let e = null;\n        for (const r of this._def.checks)r.kind === \"max\" && (e === null || r.value < e) && (e = r.value);\n        return e;\n    }\n}\nF.create = (t)=>{\n    var e;\n    return new F({\n        checks: [],\n        typeName: g.ZodString,\n        coerce: (e = t?.coerce) !== null && e !== void 0 ? e : !1,\n        ...w(t)\n    });\n};\nfunction xa(t, e) {\n    const r = (t.toString().split(\".\")[1] || \"\").length, n = (e.toString().split(\".\")[1] || \"\").length, s = r > n ? r : n, a = parseInt(t.toFixed(s).replace(\".\", \"\")), o = parseInt(e.toFixed(s).replace(\".\", \"\"));\n    return a % o / Math.pow(10, s);\n}\nclass Y extends _ {\n    constructor(){\n        super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;\n    }\n    _parse(e) {\n        if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== h.number) {\n            const a = this._getOrReturnCtx(e);\n            return y(a, {\n                code: d.invalid_type,\n                expected: h.number,\n                received: a.parsedType\n            }), b;\n        }\n        let n;\n        const s = new I();\n        for (const a of this._def.checks)a.kind === \"int\" ? T.isInteger(e.data) || (n = this._getOrReturnCtx(e, n), y(n, {\n            code: d.invalid_type,\n            expected: \"integer\",\n            received: \"float\",\n            message: a.message\n        }), s.dirty()) : a.kind === \"min\" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (n = this._getOrReturnCtx(e, n), y(n, {\n            code: d.too_small,\n            minimum: a.value,\n            type: \"number\",\n            inclusive: a.inclusive,\n            exact: !1,\n            message: a.message\n        }), s.dirty()) : a.kind === \"max\" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (n = this._getOrReturnCtx(e, n), y(n, {\n            code: d.too_big,\n            maximum: a.value,\n            type: \"number\",\n            inclusive: a.inclusive,\n            exact: !1,\n            message: a.message\n        }), s.dirty()) : a.kind === \"multipleOf\" ? xa(e.data, a.value) !== 0 && (n = this._getOrReturnCtx(e, n), y(n, {\n            code: d.not_multiple_of,\n            multipleOf: a.value,\n            message: a.message\n        }), s.dirty()) : a.kind === \"finite\" ? Number.isFinite(e.data) || (n = this._getOrReturnCtx(e, n), y(n, {\n            code: d.not_finite,\n            message: a.message\n        }), s.dirty()) : T.assertNever(a);\n        return {\n            status: s.value,\n            value: e.data\n        };\n    }\n    gte(e, r) {\n        return this.setLimit(\"min\", e, !0, x.toString(r));\n    }\n    gt(e, r) {\n        return this.setLimit(\"min\", e, !1, x.toString(r));\n    }\n    lte(e, r) {\n        return this.setLimit(\"max\", e, !0, x.toString(r));\n    }\n    lt(e, r) {\n        return this.setLimit(\"max\", e, !1, x.toString(r));\n    }\n    setLimit(e, r, n, s) {\n        return new Y({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: e,\n                    value: r,\n                    inclusive: n,\n                    message: x.toString(s)\n                }\n            ]\n        });\n    }\n    _addCheck(e) {\n        return new Y({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                e\n            ]\n        });\n    }\n    int(e) {\n        return this._addCheck({\n            kind: \"int\",\n            message: x.toString(e)\n        });\n    }\n    positive(e) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: !1,\n            message: x.toString(e)\n        });\n    }\n    negative(e) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: !1,\n            message: x.toString(e)\n        });\n    }\n    nonpositive(e) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: !0,\n            message: x.toString(e)\n        });\n    }\n    nonnegative(e) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: !0,\n            message: x.toString(e)\n        });\n    }\n    multipleOf(e, r) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: e,\n            message: x.toString(r)\n        });\n    }\n    finite(e) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: x.toString(e)\n        });\n    }\n    get minValue() {\n        let e = null;\n        for (const r of this._def.checks)r.kind === \"min\" && (e === null || r.value > e) && (e = r.value);\n        return e;\n    }\n    get maxValue() {\n        let e = null;\n        for (const r of this._def.checks)r.kind === \"max\" && (e === null || r.value < e) && (e = r.value);\n        return e;\n    }\n    get isInt() {\n        return !!this._def.checks.find((e)=>e.kind === \"int\" || e.kind === \"multipleOf\" && T.isInteger(e.value));\n    }\n    get isFinite() {\n        let e = null, r = null;\n        for (const n of this._def.checks){\n            if (n.kind === \"finite\" || n.kind === \"int\" || n.kind === \"multipleOf\") return !0;\n            n.kind === \"min\" ? (r === null || n.value > r) && (r = n.value) : n.kind === \"max\" && (e === null || n.value < e) && (e = n.value);\n        }\n        return Number.isFinite(r) && Number.isFinite(e);\n    }\n}\nY.create = (t)=>new Y({\n        checks: [],\n        typeName: g.ZodNumber,\n        coerce: t?.coerce || !1,\n        ...w(t)\n    });\nclass Te extends _ {\n    _parse(e) {\n        if (this._def.coerce && (e.data = BigInt(e.data)), this._getType(e) !== h.bigint) {\n            const n = this._getOrReturnCtx(e);\n            return y(n, {\n                code: d.invalid_type,\n                expected: h.bigint,\n                received: n.parsedType\n            }), b;\n        }\n        return N(e.data);\n    }\n}\nTe.create = (t)=>{\n    var e;\n    return new Te({\n        typeName: g.ZodBigInt,\n        coerce: (e = t?.coerce) !== null && e !== void 0 ? e : !1,\n        ...w(t)\n    });\n};\nclass Ee extends _ {\n    _parse(e) {\n        if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== h.boolean) {\n            const n = this._getOrReturnCtx(e);\n            return y(n, {\n                code: d.invalid_type,\n                expected: h.boolean,\n                received: n.parsedType\n            }), b;\n        }\n        return N(e.data);\n    }\n}\nEe.create = (t)=>new Ee({\n        typeName: g.ZodBoolean,\n        coerce: t?.coerce || !1,\n        ...w(t)\n    });\nclass ee extends _ {\n    _parse(e) {\n        if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== h.date) {\n            const a = this._getOrReturnCtx(e);\n            return y(a, {\n                code: d.invalid_type,\n                expected: h.date,\n                received: a.parsedType\n            }), b;\n        }\n        if (isNaN(e.data.getTime())) {\n            const a = this._getOrReturnCtx(e);\n            return y(a, {\n                code: d.invalid_date\n            }), b;\n        }\n        const n = new I();\n        let s;\n        for (const a of this._def.checks)a.kind === \"min\" ? e.data.getTime() < a.value && (s = this._getOrReturnCtx(e, s), y(s, {\n            code: d.too_small,\n            message: a.message,\n            inclusive: !0,\n            exact: !1,\n            minimum: a.value,\n            type: \"date\"\n        }), n.dirty()) : a.kind === \"max\" ? e.data.getTime() > a.value && (s = this._getOrReturnCtx(e, s), y(s, {\n            code: d.too_big,\n            message: a.message,\n            inclusive: !0,\n            exact: !1,\n            maximum: a.value,\n            type: \"date\"\n        }), n.dirty()) : T.assertNever(a);\n        return {\n            status: n.value,\n            value: new Date(e.data.getTime())\n        };\n    }\n    _addCheck(e) {\n        return new ee({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                e\n            ]\n        });\n    }\n    min(e, r) {\n        return this._addCheck({\n            kind: \"min\",\n            value: e.getTime(),\n            message: x.toString(r)\n        });\n    }\n    max(e, r) {\n        return this._addCheck({\n            kind: \"max\",\n            value: e.getTime(),\n            message: x.toString(r)\n        });\n    }\n    get minDate() {\n        let e = null;\n        for (const r of this._def.checks)r.kind === \"min\" && (e === null || r.value > e) && (e = r.value);\n        return e != null ? new Date(e) : null;\n    }\n    get maxDate() {\n        let e = null;\n        for (const r of this._def.checks)r.kind === \"max\" && (e === null || r.value < e) && (e = r.value);\n        return e != null ? new Date(e) : null;\n    }\n}\nee.create = (t)=>new ee({\n        checks: [],\n        coerce: t?.coerce || !1,\n        typeName: g.ZodDate,\n        ...w(t)\n    });\nclass Ve extends _ {\n    _parse(e) {\n        if (this._getType(e) !== h.symbol) {\n            const n = this._getOrReturnCtx(e);\n            return y(n, {\n                code: d.invalid_type,\n                expected: h.symbol,\n                received: n.parsedType\n            }), b;\n        }\n        return N(e.data);\n    }\n}\nVe.create = (t)=>new Ve({\n        typeName: g.ZodSymbol,\n        ...w(t)\n    });\nclass ke extends _ {\n    _parse(e) {\n        if (this._getType(e) !== h.undefined) {\n            const n = this._getOrReturnCtx(e);\n            return y(n, {\n                code: d.invalid_type,\n                expected: h.undefined,\n                received: n.parsedType\n            }), b;\n        }\n        return N(e.data);\n    }\n}\nke.create = (t)=>new ke({\n        typeName: g.ZodUndefined,\n        ...w(t)\n    });\nclass Ce extends _ {\n    _parse(e) {\n        if (this._getType(e) !== h.null) {\n            const n = this._getOrReturnCtx(e);\n            return y(n, {\n                code: d.invalid_type,\n                expected: h.null,\n                received: n.parsedType\n            }), b;\n        }\n        return N(e.data);\n    }\n}\nCe.create = (t)=>new Ce({\n        typeName: g.ZodNull,\n        ...w(t)\n    });\nclass de extends _ {\n    constructor(){\n        super(...arguments), this._any = !0;\n    }\n    _parse(e) {\n        return N(e.data);\n    }\n}\nde.create = (t)=>new de({\n        typeName: g.ZodAny,\n        ...w(t)\n    });\nclass K extends _ {\n    constructor(){\n        super(...arguments), this._unknown = !0;\n    }\n    _parse(e) {\n        return N(e.data);\n    }\n}\nK.create = (t)=>new K({\n        typeName: g.ZodUnknown,\n        ...w(t)\n    });\nclass J extends _ {\n    _parse(e) {\n        const r = this._getOrReturnCtx(e);\n        return y(r, {\n            code: d.invalid_type,\n            expected: h.never,\n            received: r.parsedType\n        }), b;\n    }\n}\nJ.create = (t)=>new J({\n        typeName: g.ZodNever,\n        ...w(t)\n    });\nclass He extends _ {\n    _parse(e) {\n        if (this._getType(e) !== h.undefined) {\n            const n = this._getOrReturnCtx(e);\n            return y(n, {\n                code: d.invalid_type,\n                expected: h.void,\n                received: n.parsedType\n            }), b;\n        }\n        return N(e.data);\n    }\n}\nHe.create = (t)=>new He({\n        typeName: g.ZodVoid,\n        ...w(t)\n    });\nclass $ extends _ {\n    _parse(e) {\n        const { ctx: r, status: n } = this._processInputParams(e), s = this._def;\n        if (r.parsedType !== h.array) return y(r, {\n            code: d.invalid_type,\n            expected: h.array,\n            received: r.parsedType\n        }), b;\n        if (s.exactLength !== null) {\n            const o = r.data.length > s.exactLength.value, i = r.data.length < s.exactLength.value;\n            (o || i) && (y(r, {\n                code: o ? d.too_big : d.too_small,\n                minimum: i ? s.exactLength.value : void 0,\n                maximum: o ? s.exactLength.value : void 0,\n                type: \"array\",\n                inclusive: !0,\n                exact: !0,\n                message: s.exactLength.message\n            }), n.dirty());\n        }\n        if (s.minLength !== null && r.data.length < s.minLength.value && (y(r, {\n            code: d.too_small,\n            minimum: s.minLength.value,\n            type: \"array\",\n            inclusive: !0,\n            exact: !1,\n            message: s.minLength.message\n        }), n.dirty()), s.maxLength !== null && r.data.length > s.maxLength.value && (y(r, {\n            code: d.too_big,\n            maximum: s.maxLength.value,\n            type: \"array\",\n            inclusive: !0,\n            exact: !1,\n            message: s.maxLength.message\n        }), n.dirty()), r.common.async) return Promise.all([\n            ...r.data\n        ].map((o, i)=>s.type._parseAsync(new U(r, o, r.path, i)))).then((o)=>I.mergeArray(n, o));\n        const a = [\n            ...r.data\n        ].map((o, i)=>s.type._parseSync(new U(r, o, r.path, i)));\n        return I.mergeArray(n, a);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(e, r) {\n        return new $({\n            ...this._def,\n            minLength: {\n                value: e,\n                message: x.toString(r)\n            }\n        });\n    }\n    max(e, r) {\n        return new $({\n            ...this._def,\n            maxLength: {\n                value: e,\n                message: x.toString(r)\n            }\n        });\n    }\n    length(e, r) {\n        return new $({\n            ...this._def,\n            exactLength: {\n                value: e,\n                message: x.toString(r)\n            }\n        });\n    }\n    nonempty(e) {\n        return this.min(1, e);\n    }\n}\n$.create = (t, e)=>new $({\n        type: t,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: g.ZodArray,\n        ...w(e)\n    });\nvar Fe;\n(function(t) {\n    t.mergeShapes = (e, r)=>({\n            ...e,\n            ...r\n        });\n})(Fe || (Fe = {}));\nfunction ie(t) {\n    if (t instanceof C) {\n        const e = {};\n        for(const r in t.shape){\n            const n = t.shape[r];\n            e[r] = H.create(ie(n));\n        }\n        return new C({\n            ...t._def,\n            shape: ()=>e\n        });\n    } else return t instanceof $ ? $.create(ie(t.element)) : t instanceof H ? H.create(ie(t.unwrap())) : t instanceof re ? re.create(ie(t.unwrap())) : t instanceof W ? W.create(t.items.map((e)=>ie(e))) : t;\n}\nclass C extends _ {\n    constructor(){\n        super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null) return this._cached;\n        const e = this._def.shape(), r = T.objectKeys(e);\n        return this._cached = {\n            shape: e,\n            keys: r\n        };\n    }\n    _parse(e) {\n        if (this._getType(e) !== h.object) {\n            const u = this._getOrReturnCtx(e);\n            return y(u, {\n                code: d.invalid_type,\n                expected: h.object,\n                received: u.parsedType\n            }), b;\n        }\n        const { status: n, ctx: s } = this._processInputParams(e), { shape: a, keys: o } = this._getCached(), i = [];\n        if (!(this._def.catchall instanceof J && this._def.unknownKeys === \"strip\")) for(const u in s.data)o.includes(u) || i.push(u);\n        const c = [];\n        for (const u of o){\n            const l = a[u], f = s.data[u];\n            c.push({\n                key: {\n                    status: \"valid\",\n                    value: u\n                },\n                value: l._parse(new U(s, f, s.path, u)),\n                alwaysSet: u in s.data\n            });\n        }\n        if (this._def.catchall instanceof J) {\n            const u = this._def.unknownKeys;\n            if (u === \"passthrough\") for (const l of i)c.push({\n                key: {\n                    status: \"valid\",\n                    value: l\n                },\n                value: {\n                    status: \"valid\",\n                    value: s.data[l]\n                }\n            });\n            else if (u === \"strict\") i.length > 0 && (y(s, {\n                code: d.unrecognized_keys,\n                keys: i\n            }), n.dirty());\n            else if (u !== \"strip\") throw new Error(\"Internal ZodObject error: invalid unknownKeys value.\");\n        } else {\n            const u = this._def.catchall;\n            for (const l of i){\n                const f = s.data[l];\n                c.push({\n                    key: {\n                        status: \"valid\",\n                        value: l\n                    },\n                    value: u._parse(new U(s, f, s.path, l)),\n                    alwaysSet: l in s.data\n                });\n            }\n        }\n        return s.common.async ? Promise.resolve().then(async ()=>{\n            const u = [];\n            for (const l of c){\n                const f = await l.key;\n                u.push({\n                    key: f,\n                    value: await l.value,\n                    alwaysSet: l.alwaysSet\n                });\n            }\n            return u;\n        }).then((u)=>I.mergeObjectSync(n, u)) : I.mergeObjectSync(n, c);\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(e) {\n        return x.errToObj, new C({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...e !== void 0 ? {\n                errorMap: (r, n)=>{\n                    var s, a, o, i;\n                    const c = (o = (a = (s = this._def).errorMap) === null || a === void 0 ? void 0 : a.call(s, r, n).message) !== null && o !== void 0 ? o : n.defaultError;\n                    return r.code === \"unrecognized_keys\" ? {\n                        message: (i = x.errToObj(e).message) !== null && i !== void 0 ? i : c\n                    } : {\n                        message: c\n                    };\n                }\n            } : {}\n        });\n    }\n    strip() {\n        return new C({\n            ...this._def,\n            unknownKeys: \"strip\"\n        });\n    }\n    passthrough() {\n        return new C({\n            ...this._def,\n            unknownKeys: \"passthrough\"\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(e) {\n        return new C({\n            ...this._def,\n            shape: ()=>({\n                    ...this._def.shape(),\n                    ...e\n                })\n        });\n    }\n    /**\n   * Prior to zod@1.0.12 there was a bug in the\n   * inferred type of merged objects. Please\n   * upgrade if you are experiencing issues.\n   */ merge(e) {\n        return new C({\n            unknownKeys: e._def.unknownKeys,\n            catchall: e._def.catchall,\n            shape: ()=>Fe.mergeShapes(this._def.shape(), e._def.shape()),\n            typeName: g.ZodObject\n        });\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(e, r) {\n        return this.augment({\n            [e]: r\n        });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(e) {\n        return new C({\n            ...this._def,\n            catchall: e\n        });\n    }\n    pick(e) {\n        const r = {};\n        return T.objectKeys(e).forEach((n)=>{\n            e[n] && this.shape[n] && (r[n] = this.shape[n]);\n        }), new C({\n            ...this._def,\n            shape: ()=>r\n        });\n    }\n    omit(e) {\n        const r = {};\n        return T.objectKeys(this.shape).forEach((n)=>{\n            e[n] || (r[n] = this.shape[n]);\n        }), new C({\n            ...this._def,\n            shape: ()=>r\n        });\n    }\n    deepPartial() {\n        return ie(this);\n    }\n    partial(e) {\n        const r = {};\n        return T.objectKeys(this.shape).forEach((n)=>{\n            const s = this.shape[n];\n            e && !e[n] ? r[n] = s : r[n] = s.optional();\n        }), new C({\n            ...this._def,\n            shape: ()=>r\n        });\n    }\n    required(e) {\n        const r = {};\n        return T.objectKeys(this.shape).forEach((n)=>{\n            if (e && !e[n]) r[n] = this.shape[n];\n            else {\n                let a = this.shape[n];\n                for(; a instanceof H;)a = a._def.innerType;\n                r[n] = a;\n            }\n        }), new C({\n            ...this._def,\n            shape: ()=>r\n        });\n    }\n    keyof() {\n        return Fr(T.objectKeys(this.shape));\n    }\n}\nC.create = (t, e)=>new C({\n        shape: ()=>t,\n        unknownKeys: \"strip\",\n        catchall: J.create(),\n        typeName: g.ZodObject,\n        ...w(e)\n    });\nC.strictCreate = (t, e)=>new C({\n        shape: ()=>t,\n        unknownKeys: \"strict\",\n        catchall: J.create(),\n        typeName: g.ZodObject,\n        ...w(e)\n    });\nC.lazycreate = (t, e)=>new C({\n        shape: t,\n        unknownKeys: \"strip\",\n        catchall: J.create(),\n        typeName: g.ZodObject,\n        ...w(e)\n    });\nclass Re extends _ {\n    _parse(e) {\n        const { ctx: r } = this._processInputParams(e), n = this._def.options;\n        function s(a) {\n            for (const i of a)if (i.result.status === \"valid\") return i.result;\n            for (const i of a)if (i.result.status === \"dirty\") return r.common.issues.push(...i.ctx.common.issues), i.result;\n            const o = a.map((i)=>new V(i.ctx.common.issues));\n            return y(r, {\n                code: d.invalid_union,\n                unionErrors: o\n            }), b;\n        }\n        if (r.common.async) return Promise.all(n.map(async (a)=>{\n            const o = {\n                ...r,\n                common: {\n                    ...r.common,\n                    issues: []\n                },\n                parent: null\n            };\n            return {\n                result: await a._parseAsync({\n                    data: r.data,\n                    path: r.path,\n                    parent: o\n                }),\n                ctx: o\n            };\n        })).then(s);\n        {\n            let a;\n            const o = [];\n            for (const c of n){\n                const u = {\n                    ...r,\n                    common: {\n                        ...r.common,\n                        issues: []\n                    },\n                    parent: null\n                }, l = c._parseSync({\n                    data: r.data,\n                    path: r.path,\n                    parent: u\n                });\n                if (l.status === \"valid\") return l;\n                l.status === \"dirty\" && !a && (a = {\n                    result: l,\n                    ctx: u\n                }), u.common.issues.length && o.push(u.common.issues);\n            }\n            if (a) return r.common.issues.push(...a.ctx.common.issues), a.result;\n            const i = o.map((c)=>new V(c));\n            return y(r, {\n                code: d.invalid_union,\n                unionErrors: i\n            }), b;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nRe.create = (t, e)=>new Re({\n        options: t,\n        typeName: g.ZodUnion,\n        ...w(e)\n    });\nconst Ze = (t)=>t instanceof Se ? Ze(t.schema) : t instanceof D ? Ze(t.innerType()) : t instanceof Ne ? [\n        t.value\n    ] : t instanceof Q ? t.options : t instanceof Ie ? Object.keys(t.enum) : t instanceof Le ? Ze(t._def.innerType) : t instanceof ke ? [\n        void 0\n    ] : t instanceof Ce ? [\n        null\n    ] : null;\nclass it extends _ {\n    _parse(e) {\n        const { ctx: r } = this._processInputParams(e);\n        if (r.parsedType !== h.object) return y(r, {\n            code: d.invalid_type,\n            expected: h.object,\n            received: r.parsedType\n        }), b;\n        const n = this.discriminator, s = r.data[n], a = this.optionsMap.get(s);\n        return a ? r.common.async ? a._parseAsync({\n            data: r.data,\n            path: r.path,\n            parent: r\n        }) : a._parseSync({\n            data: r.data,\n            path: r.path,\n            parent: r\n        }) : (y(r, {\n            code: d.invalid_union_discriminator,\n            options: Array.from(this.optionsMap.keys()),\n            path: [\n                n\n            ]\n        }), b);\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n   * have a different value for each object in the union.\n   * @param discriminator the name of the discriminator property\n   * @param types an array of object schemas\n   * @param params\n   */ static create(e, r, n) {\n        const s = /* @__PURE__ */ new Map();\n        for (const a of r){\n            const o = Ze(a.shape[e]);\n            if (!o) throw new Error(`A discriminator value for key \\`${e}\\` could not be extracted from all schema options`);\n            for (const i of o){\n                if (s.has(i)) throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(i)}`);\n                s.set(i, a);\n            }\n        }\n        return new it({\n            typeName: g.ZodDiscriminatedUnion,\n            discriminator: e,\n            options: r,\n            optionsMap: s,\n            ...w(n)\n        });\n    }\n}\nfunction xt(t, e) {\n    const r = G(t), n = G(e);\n    if (t === e) return {\n        valid: !0,\n        data: t\n    };\n    if (r === h.object && n === h.object) {\n        const s = T.objectKeys(e), a = T.objectKeys(t).filter((i)=>s.indexOf(i) !== -1), o = {\n            ...t,\n            ...e\n        };\n        for (const i of a){\n            const c = xt(t[i], e[i]);\n            if (!c.valid) return {\n                valid: !1\n            };\n            o[i] = c.data;\n        }\n        return {\n            valid: !0,\n            data: o\n        };\n    } else if (r === h.array && n === h.array) {\n        if (t.length !== e.length) return {\n            valid: !1\n        };\n        const s = [];\n        for(let a = 0; a < t.length; a++){\n            const o = t[a], i = e[a], c = xt(o, i);\n            if (!c.valid) return {\n                valid: !1\n            };\n            s.push(c.data);\n        }\n        return {\n            valid: !0,\n            data: s\n        };\n    } else return r === h.date && n === h.date && +t == +e ? {\n        valid: !0,\n        data: t\n    } : {\n        valid: !1\n    };\n}\nclass Oe extends _ {\n    _parse(e) {\n        const { status: r, ctx: n } = this._processInputParams(e), s = (a, o)=>{\n            if (_t(a) || _t(o)) return b;\n            const i = xt(a.value, o.value);\n            return i.valid ? ((vt(a) || vt(o)) && r.dirty(), {\n                status: r.value,\n                value: i.data\n            }) : (y(n, {\n                code: d.invalid_intersection_types\n            }), b);\n        };\n        return n.common.async ? Promise.all([\n            this._def.left._parseAsync({\n                data: n.data,\n                path: n.path,\n                parent: n\n            }),\n            this._def.right._parseAsync({\n                data: n.data,\n                path: n.path,\n                parent: n\n            })\n        ]).then(([a, o])=>s(a, o)) : s(this._def.left._parseSync({\n            data: n.data,\n            path: n.path,\n            parent: n\n        }), this._def.right._parseSync({\n            data: n.data,\n            path: n.path,\n            parent: n\n        }));\n    }\n}\nOe.create = (t, e, r)=>new Oe({\n        left: t,\n        right: e,\n        typeName: g.ZodIntersection,\n        ...w(r)\n    });\nclass W extends _ {\n    _parse(e) {\n        const { status: r, ctx: n } = this._processInputParams(e);\n        if (n.parsedType !== h.array) return y(n, {\n            code: d.invalid_type,\n            expected: h.array,\n            received: n.parsedType\n        }), b;\n        if (n.data.length < this._def.items.length) return y(n, {\n            code: d.too_small,\n            minimum: this._def.items.length,\n            inclusive: !0,\n            exact: !1,\n            type: \"array\"\n        }), b;\n        !this._def.rest && n.data.length > this._def.items.length && (y(n, {\n            code: d.too_big,\n            maximum: this._def.items.length,\n            inclusive: !0,\n            exact: !1,\n            type: \"array\"\n        }), r.dirty());\n        const a = [\n            ...n.data\n        ].map((o, i)=>{\n            const c = this._def.items[i] || this._def.rest;\n            return c ? c._parse(new U(n, o, n.path, i)) : null;\n        }).filter((o)=>!!o);\n        return n.common.async ? Promise.all(a).then((o)=>I.mergeArray(r, o)) : I.mergeArray(r, a);\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(e) {\n        return new W({\n            ...this._def,\n            rest: e\n        });\n    }\n}\nW.create = (t, e)=>{\n    if (!Array.isArray(t)) throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    return new W({\n        items: t,\n        typeName: g.ZodTuple,\n        rest: null,\n        ...w(e)\n    });\n};\nclass Pe extends _ {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(e) {\n        const { status: r, ctx: n } = this._processInputParams(e);\n        if (n.parsedType !== h.object) return y(n, {\n            code: d.invalid_type,\n            expected: h.object,\n            received: n.parsedType\n        }), b;\n        const s = [], a = this._def.keyType, o = this._def.valueType;\n        for(const i in n.data)s.push({\n            key: a._parse(new U(n, i, n.path, i)),\n            value: o._parse(new U(n, n.data[i], n.path, i))\n        });\n        return n.common.async ? I.mergeObjectAsync(r, s) : I.mergeObjectSync(r, s);\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(e, r, n) {\n        return r instanceof _ ? new Pe({\n            keyType: e,\n            valueType: r,\n            typeName: g.ZodRecord,\n            ...w(n)\n        }) : new Pe({\n            keyType: F.create(),\n            valueType: e,\n            typeName: g.ZodRecord,\n            ...w(r)\n        });\n    }\n}\nclass Je extends _ {\n    _parse(e) {\n        const { status: r, ctx: n } = this._processInputParams(e);\n        if (n.parsedType !== h.map) return y(n, {\n            code: d.invalid_type,\n            expected: h.map,\n            received: n.parsedType\n        }), b;\n        const s = this._def.keyType, a = this._def.valueType, o = [\n            ...n.data.entries()\n        ].map(([i, c], u)=>({\n                key: s._parse(new U(n, i, n.path, [\n                    u,\n                    \"key\"\n                ])),\n                value: a._parse(new U(n, c, n.path, [\n                    u,\n                    \"value\"\n                ]))\n            }));\n        if (n.common.async) {\n            const i = /* @__PURE__ */ new Map();\n            return Promise.resolve().then(async ()=>{\n                for (const c of o){\n                    const u = await c.key, l = await c.value;\n                    if (u.status === \"aborted\" || l.status === \"aborted\") return b;\n                    (u.status === \"dirty\" || l.status === \"dirty\") && r.dirty(), i.set(u.value, l.value);\n                }\n                return {\n                    status: r.value,\n                    value: i\n                };\n            });\n        } else {\n            const i = /* @__PURE__ */ new Map();\n            for (const c of o){\n                const u = c.key, l = c.value;\n                if (u.status === \"aborted\" || l.status === \"aborted\") return b;\n                (u.status === \"dirty\" || l.status === \"dirty\") && r.dirty(), i.set(u.value, l.value);\n            }\n            return {\n                status: r.value,\n                value: i\n            };\n        }\n    }\n}\nJe.create = (t, e, r)=>new Je({\n        valueType: e,\n        keyType: t,\n        typeName: g.ZodMap,\n        ...w(r)\n    });\nclass te extends _ {\n    _parse(e) {\n        const { status: r, ctx: n } = this._processInputParams(e);\n        if (n.parsedType !== h.set) return y(n, {\n            code: d.invalid_type,\n            expected: h.set,\n            received: n.parsedType\n        }), b;\n        const s = this._def;\n        s.minSize !== null && n.data.size < s.minSize.value && (y(n, {\n            code: d.too_small,\n            minimum: s.minSize.value,\n            type: \"set\",\n            inclusive: !0,\n            exact: !1,\n            message: s.minSize.message\n        }), r.dirty()), s.maxSize !== null && n.data.size > s.maxSize.value && (y(n, {\n            code: d.too_big,\n            maximum: s.maxSize.value,\n            type: \"set\",\n            inclusive: !0,\n            exact: !1,\n            message: s.maxSize.message\n        }), r.dirty());\n        const a = this._def.valueType;\n        function o(c) {\n            const u = /* @__PURE__ */ new Set();\n            for (const l of c){\n                if (l.status === \"aborted\") return b;\n                l.status === \"dirty\" && r.dirty(), u.add(l.value);\n            }\n            return {\n                status: r.value,\n                value: u\n            };\n        }\n        const i = [\n            ...n.data.values()\n        ].map((c, u)=>a._parse(new U(n, c, n.path, u)));\n        return n.common.async ? Promise.all(i).then((c)=>o(c)) : o(i);\n    }\n    min(e, r) {\n        return new te({\n            ...this._def,\n            minSize: {\n                value: e,\n                message: x.toString(r)\n            }\n        });\n    }\n    max(e, r) {\n        return new te({\n            ...this._def,\n            maxSize: {\n                value: e,\n                message: x.toString(r)\n            }\n        });\n    }\n    size(e, r) {\n        return this.min(e, r).max(e, r);\n    }\n    nonempty(e) {\n        return this.min(1, e);\n    }\n}\nte.create = (t, e)=>new te({\n        valueType: t,\n        minSize: null,\n        maxSize: null,\n        typeName: g.ZodSet,\n        ...w(e)\n    });\nclass ue extends _ {\n    constructor(){\n        super(...arguments), this.validate = this.implement;\n    }\n    _parse(e) {\n        const { ctx: r } = this._processInputParams(e);\n        if (r.parsedType !== h.function) return y(r, {\n            code: d.invalid_type,\n            expected: h.function,\n            received: r.parsedType\n        }), b;\n        function n(i, c) {\n            return ze({\n                data: i,\n                path: r.path,\n                errorMaps: [\n                    r.common.contextualErrorMap,\n                    r.schemaErrorMap,\n                    We(),\n                    xe\n                ].filter((u)=>!!u),\n                issueData: {\n                    code: d.invalid_arguments,\n                    argumentsError: c\n                }\n            });\n        }\n        function s(i, c) {\n            return ze({\n                data: i,\n                path: r.path,\n                errorMaps: [\n                    r.common.contextualErrorMap,\n                    r.schemaErrorMap,\n                    We(),\n                    xe\n                ].filter((u)=>!!u),\n                issueData: {\n                    code: d.invalid_return_type,\n                    returnTypeError: c\n                }\n            });\n        }\n        const a = {\n            errorMap: r.common.contextualErrorMap\n        }, o = r.data;\n        return this._def.returns instanceof fe ? N(async (...i)=>{\n            const c = new V([]), u = await this._def.args.parseAsync(i, a).catch((m)=>{\n                throw c.addIssue(n(i, m)), c;\n            }), l = await o(...u);\n            return await this._def.returns._def.type.parseAsync(l, a).catch((m)=>{\n                throw c.addIssue(s(l, m)), c;\n            });\n        }) : N((...i)=>{\n            const c = this._def.args.safeParse(i, a);\n            if (!c.success) throw new V([\n                n(i, c.error)\n            ]);\n            const u = o(...c.data), l = this._def.returns.safeParse(u, a);\n            if (!l.success) throw new V([\n                s(u, l.error)\n            ]);\n            return l.data;\n        });\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...e) {\n        return new ue({\n            ...this._def,\n            args: W.create(e).rest(K.create())\n        });\n    }\n    returns(e) {\n        return new ue({\n            ...this._def,\n            returns: e\n        });\n    }\n    implement(e) {\n        return this.parse(e);\n    }\n    strictImplement(e) {\n        return this.parse(e);\n    }\n    static create(e, r, n) {\n        return new ue({\n            args: e || W.create([]).rest(K.create()),\n            returns: r || K.create(),\n            typeName: g.ZodFunction,\n            ...w(n)\n        });\n    }\n}\nclass Se extends _ {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(e) {\n        const { ctx: r } = this._processInputParams(e);\n        return this._def.getter()._parse({\n            data: r.data,\n            path: r.path,\n            parent: r\n        });\n    }\n}\nSe.create = (t, e)=>new Se({\n        getter: t,\n        typeName: g.ZodLazy,\n        ...w(e)\n    });\nclass Ne extends _ {\n    _parse(e) {\n        if (e.data !== this._def.value) {\n            const r = this._getOrReturnCtx(e);\n            return y(r, {\n                received: r.data,\n                code: d.invalid_literal,\n                expected: this._def.value\n            }), b;\n        }\n        return {\n            status: \"valid\",\n            value: e.data\n        };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nNe.create = (t, e)=>new Ne({\n        value: t,\n        typeName: g.ZodLiteral,\n        ...w(e)\n    });\nfunction Fr(t, e) {\n    return new Q({\n        values: t,\n        typeName: g.ZodEnum,\n        ...w(e)\n    });\n}\nclass Q extends _ {\n    _parse(e) {\n        if (typeof e.data != \"string\") {\n            const r = this._getOrReturnCtx(e), n = this._def.values;\n            return y(r, {\n                expected: T.joinValues(n),\n                received: r.parsedType,\n                code: d.invalid_type\n            }), b;\n        }\n        if (this._def.values.indexOf(e.data) === -1) {\n            const r = this._getOrReturnCtx(e), n = this._def.values;\n            return y(r, {\n                received: r.data,\n                code: d.invalid_enum_value,\n                options: n\n            }), b;\n        }\n        return N(e.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const e = {};\n        for (const r of this._def.values)e[r] = r;\n        return e;\n    }\n    get Values() {\n        const e = {};\n        for (const r of this._def.values)e[r] = r;\n        return e;\n    }\n    get Enum() {\n        const e = {};\n        for (const r of this._def.values)e[r] = r;\n        return e;\n    }\n    extract(e) {\n        return Q.create(e);\n    }\n    exclude(e) {\n        return Q.create(this.options.filter((r)=>!e.includes(r)));\n    }\n}\nQ.create = Fr;\nclass Ie extends _ {\n    _parse(e) {\n        const r = T.getValidEnumValues(this._def.values), n = this._getOrReturnCtx(e);\n        if (n.parsedType !== h.string && n.parsedType !== h.number) {\n            const s = T.objectValues(r);\n            return y(n, {\n                expected: T.joinValues(s),\n                received: n.parsedType,\n                code: d.invalid_type\n            }), b;\n        }\n        if (r.indexOf(e.data) === -1) {\n            const s = T.objectValues(r);\n            return y(n, {\n                received: n.data,\n                code: d.invalid_enum_value,\n                options: s\n            }), b;\n        }\n        return N(e.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nIe.create = (t, e)=>new Ie({\n        values: t,\n        typeName: g.ZodNativeEnum,\n        ...w(e)\n    });\nclass fe extends _ {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(e) {\n        const { ctx: r } = this._processInputParams(e);\n        if (r.parsedType !== h.promise && r.common.async === !1) return y(r, {\n            code: d.invalid_type,\n            expected: h.promise,\n            received: r.parsedType\n        }), b;\n        const n = r.parsedType === h.promise ? r.data : Promise.resolve(r.data);\n        return N(n.then((s)=>this._def.type.parseAsync(s, {\n                path: r.path,\n                errorMap: r.common.contextualErrorMap\n            })));\n    }\n}\nfe.create = (t, e)=>new fe({\n        type: t,\n        typeName: g.ZodPromise,\n        ...w(e)\n    });\nclass D extends _ {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === g.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n    }\n    _parse(e) {\n        const { status: r, ctx: n } = this._processInputParams(e), s = this._def.effect || null;\n        if (s.type === \"preprocess\") {\n            const o = s.transform(n.data);\n            return n.common.async ? Promise.resolve(o).then((i)=>this._def.schema._parseAsync({\n                    data: i,\n                    path: n.path,\n                    parent: n\n                })) : this._def.schema._parseSync({\n                data: o,\n                path: n.path,\n                parent: n\n            });\n        }\n        const a = {\n            addIssue: (o)=>{\n                y(n, o), o.fatal ? r.abort() : r.dirty();\n            },\n            get path () {\n                return n.path;\n            }\n        };\n        if (a.addIssue = a.addIssue.bind(a), s.type === \"refinement\") {\n            const o = (i)=>{\n                const c = s.refinement(i, a);\n                if (n.common.async) return Promise.resolve(c);\n                if (c instanceof Promise) throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                return i;\n            };\n            if (n.common.async === !1) {\n                const i = this._def.schema._parseSync({\n                    data: n.data,\n                    path: n.path,\n                    parent: n\n                });\n                return i.status === \"aborted\" ? b : (i.status === \"dirty\" && r.dirty(), o(i.value), {\n                    status: r.value,\n                    value: i.value\n                });\n            } else return this._def.schema._parseAsync({\n                data: n.data,\n                path: n.path,\n                parent: n\n            }).then((i)=>i.status === \"aborted\" ? b : (i.status === \"dirty\" && r.dirty(), o(i.value).then(()=>({\n                        status: r.value,\n                        value: i.value\n                    }))));\n        }\n        if (s.type === \"transform\") if (n.common.async === !1) {\n            const o = this._def.schema._parseSync({\n                data: n.data,\n                path: n.path,\n                parent: n\n            });\n            if (!qe(o)) return o;\n            const i = s.transform(o.value, a);\n            if (i instanceof Promise) throw new Error(\"Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.\");\n            return {\n                status: r.value,\n                value: i\n            };\n        } else return this._def.schema._parseAsync({\n            data: n.data,\n            path: n.path,\n            parent: n\n        }).then((o)=>qe(o) ? Promise.resolve(s.transform(o.value, a)).then((i)=>({\n                    status: r.value,\n                    value: i\n                })) : o);\n        T.assertNever(s);\n    }\n}\nD.create = (t, e, r)=>new D({\n        schema: t,\n        typeName: g.ZodEffects,\n        effect: e,\n        ...w(r)\n    });\nD.createWithPreprocess = (t, e, r)=>new D({\n        schema: e,\n        effect: {\n            type: \"preprocess\",\n            transform: t\n        },\n        typeName: g.ZodEffects,\n        ...w(r)\n    });\nclass H extends _ {\n    _parse(e) {\n        return this._getType(e) === h.undefined ? N(void 0) : this._def.innerType._parse(e);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nH.create = (t, e)=>new H({\n        innerType: t,\n        typeName: g.ZodOptional,\n        ...w(e)\n    });\nclass re extends _ {\n    _parse(e) {\n        return this._getType(e) === h.null ? N(null) : this._def.innerType._parse(e);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nre.create = (t, e)=>new re({\n        innerType: t,\n        typeName: g.ZodNullable,\n        ...w(e)\n    });\nclass Le extends _ {\n    _parse(e) {\n        const { ctx: r } = this._processInputParams(e);\n        let n = r.data;\n        return r.parsedType === h.undefined && (n = this._def.defaultValue()), this._def.innerType._parse({\n            data: n,\n            path: r.path,\n            parent: r\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nLe.create = (t, e)=>new Le({\n        innerType: t,\n        typeName: g.ZodDefault,\n        defaultValue: typeof e.default == \"function\" ? e.default : ()=>e.default,\n        ...w(e)\n    });\nclass Ge extends _ {\n    _parse(e) {\n        const { ctx: r } = this._processInputParams(e), n = this._def.innerType._parse({\n            data: r.data,\n            path: r.path,\n            parent: {\n                ...r,\n                common: {\n                    ...r.common,\n                    issues: []\n                }\n            }\n        });\n        return Be(n) ? n.then((s)=>({\n                status: \"valid\",\n                value: s.status === \"valid\" ? s.value : this._def.catchValue()\n            })) : {\n            status: \"valid\",\n            value: n.status === \"valid\" ? n.value : this._def.catchValue()\n        };\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nGe.create = (t, e)=>new Ge({\n        innerType: t,\n        typeName: g.ZodCatch,\n        catchValue: typeof e.catch == \"function\" ? e.catch : ()=>e.catch,\n        ...w(e)\n    });\nclass Ye extends _ {\n    _parse(e) {\n        if (this._getType(e) !== h.nan) {\n            const n = this._getOrReturnCtx(e);\n            return y(n, {\n                code: d.invalid_type,\n                expected: h.nan,\n                received: n.parsedType\n            }), b;\n        }\n        return {\n            status: \"valid\",\n            value: e.data\n        };\n    }\n}\nYe.create = (t)=>new Ye({\n        typeName: g.ZodNaN,\n        ...w(t)\n    });\nconst Ta = Symbol(\"zod_brand\");\nclass Jr extends _ {\n    _parse(e) {\n        const { ctx: r } = this._processInputParams(e), n = r.data;\n        return this._def.type._parse({\n            data: n,\n            path: r.path,\n            parent: r\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass Ae extends _ {\n    _parse(e) {\n        const { status: r, ctx: n } = this._processInputParams(e);\n        if (n.common.async) return (async ()=>{\n            const a = await this._def.in._parseAsync({\n                data: n.data,\n                path: n.path,\n                parent: n\n            });\n            return a.status === \"aborted\" ? b : a.status === \"dirty\" ? (r.dirty(), Hr(a.value)) : this._def.out._parseAsync({\n                data: a.value,\n                path: n.path,\n                parent: n\n            });\n        })();\n        {\n            const s = this._def.in._parseSync({\n                data: n.data,\n                path: n.path,\n                parent: n\n            });\n            return s.status === \"aborted\" ? b : s.status === \"dirty\" ? (r.dirty(), {\n                status: \"dirty\",\n                value: s.value\n            }) : this._def.out._parseSync({\n                data: s.value,\n                path: n.path,\n                parent: n\n            });\n        }\n    }\n    static create(e, r) {\n        return new Ae({\n            in: e,\n            out: r,\n            typeName: g.ZodPipeline\n        });\n    }\n}\nconst Gr = (t, e = {}, r)=>t ? de.create().superRefine((n, s)=>{\n        if (!t(n)) {\n            const a = typeof e == \"function\" ? e(n) : e, o = typeof a == \"string\" ? {\n                message: a\n            } : a;\n            s.addIssue({\n                code: \"custom\",\n                ...o,\n                fatal: r\n            });\n        }\n    }) : de.create(), Ea = {\n    object: C.lazycreate\n};\nvar g;\n(function(t) {\n    t.ZodString = \"ZodString\", t.ZodNumber = \"ZodNumber\", t.ZodNaN = \"ZodNaN\", t.ZodBigInt = \"ZodBigInt\", t.ZodBoolean = \"ZodBoolean\", t.ZodDate = \"ZodDate\", t.ZodSymbol = \"ZodSymbol\", t.ZodUndefined = \"ZodUndefined\", t.ZodNull = \"ZodNull\", t.ZodAny = \"ZodAny\", t.ZodUnknown = \"ZodUnknown\", t.ZodNever = \"ZodNever\", t.ZodVoid = \"ZodVoid\", t.ZodArray = \"ZodArray\", t.ZodObject = \"ZodObject\", t.ZodUnion = \"ZodUnion\", t.ZodDiscriminatedUnion = \"ZodDiscriminatedUnion\", t.ZodIntersection = \"ZodIntersection\", t.ZodTuple = \"ZodTuple\", t.ZodRecord = \"ZodRecord\", t.ZodMap = \"ZodMap\", t.ZodSet = \"ZodSet\", t.ZodFunction = \"ZodFunction\", t.ZodLazy = \"ZodLazy\", t.ZodLiteral = \"ZodLiteral\", t.ZodEnum = \"ZodEnum\", t.ZodEffects = \"ZodEffects\", t.ZodNativeEnum = \"ZodNativeEnum\", t.ZodOptional = \"ZodOptional\", t.ZodNullable = \"ZodNullable\", t.ZodDefault = \"ZodDefault\", t.ZodCatch = \"ZodCatch\", t.ZodPromise = \"ZodPromise\", t.ZodBranded = \"ZodBranded\", t.ZodPipeline = \"ZodPipeline\";\n})(g || (g = {}));\nconst ka = (t, e = {\n    message: `Input not instance of ${t.name}`\n})=>Gr((r)=>r instanceof t, e, !0), Yr = F.create, Qr = Y.create, Ca = Ye.create, Ra = Te.create, Xr = Ee.create, Oa = ee.create, Pa = Ve.create, Sa = ke.create, Na = Ce.create, Ia = de.create, La = K.create, Aa = J.create, Ma = He.create, ja = $.create, $a = C.create, Da = C.strictCreate, Za = Re.create, Ua = it.create, Wa = Oe.create, za = W.create, qa = Pe.create, Ba = Je.create, Va = te.create, Ha = ue.create, Fa = Se.create, Ja = Ne.create, Ga = Q.create, Ya = Ie.create, Qa = fe.create, rr = D.create, Xa = H.create, Ka = re.create, eo = D.createWithPreprocess, to = Ae.create, ro = ()=>Yr().optional(), no = ()=>Qr().optional(), so = ()=>Xr().optional(), ao = {\n    string: (t)=>F.create({\n            ...t,\n            coerce: !0\n        }),\n    number: (t)=>Y.create({\n            ...t,\n            coerce: !0\n        }),\n    boolean: (t)=>Ee.create({\n            ...t,\n            coerce: !0\n        }),\n    bigint: (t)=>Te.create({\n            ...t,\n            coerce: !0\n        }),\n    date: (t)=>ee.create({\n            ...t,\n            coerce: !0\n        })\n}, oo = b;\nvar p = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    defaultErrorMap: xe,\n    setErrorMap: ma,\n    getErrorMap: We,\n    makeIssue: ze,\n    EMPTY_PATH: ya,\n    addIssueToContext: y,\n    ParseStatus: I,\n    INVALID: b,\n    DIRTY: Hr,\n    OK: N,\n    isAborted: _t,\n    isDirty: vt,\n    isValid: qe,\n    isAsync: Be,\n    get util () {\n        return T;\n    },\n    ZodParsedType: h,\n    getParsedType: G,\n    ZodType: _,\n    ZodString: F,\n    ZodNumber: Y,\n    ZodBigInt: Te,\n    ZodBoolean: Ee,\n    ZodDate: ee,\n    ZodSymbol: Ve,\n    ZodUndefined: ke,\n    ZodNull: Ce,\n    ZodAny: de,\n    ZodUnknown: K,\n    ZodNever: J,\n    ZodVoid: He,\n    ZodArray: $,\n    get objectUtil () {\n        return Fe;\n    },\n    ZodObject: C,\n    ZodUnion: Re,\n    ZodDiscriminatedUnion: it,\n    ZodIntersection: Oe,\n    ZodTuple: W,\n    ZodRecord: Pe,\n    ZodMap: Je,\n    ZodSet: te,\n    ZodFunction: ue,\n    ZodLazy: Se,\n    ZodLiteral: Ne,\n    ZodEnum: Q,\n    ZodNativeEnum: Ie,\n    ZodPromise: fe,\n    ZodEffects: D,\n    ZodTransformer: D,\n    ZodOptional: H,\n    ZodNullable: re,\n    ZodDefault: Le,\n    ZodCatch: Ge,\n    ZodNaN: Ye,\n    BRAND: Ta,\n    ZodBranded: Jr,\n    ZodPipeline: Ae,\n    custom: Gr,\n    Schema: _,\n    ZodSchema: _,\n    late: Ea,\n    get ZodFirstPartyTypeKind () {\n        return g;\n    },\n    coerce: ao,\n    any: Ia,\n    array: ja,\n    bigint: Ra,\n    boolean: Xr,\n    date: Oa,\n    discriminatedUnion: Ua,\n    effect: rr,\n    enum: Ga,\n    function: Ha,\n    instanceof: ka,\n    intersection: Wa,\n    lazy: Fa,\n    literal: Ja,\n    map: Ba,\n    nan: Ca,\n    nativeEnum: Ya,\n    never: Aa,\n    null: Na,\n    nullable: Ka,\n    number: Qr,\n    object: $a,\n    oboolean: so,\n    onumber: no,\n    optional: Xa,\n    ostring: ro,\n    pipeline: to,\n    preprocess: eo,\n    promise: Qa,\n    record: qa,\n    set: Va,\n    strictObject: Da,\n    string: Yr,\n    symbol: Pa,\n    transformer: rr,\n    tuple: za,\n    undefined: Sa,\n    union: Za,\n    unknown: La,\n    void: Ma,\n    NEVER: oo,\n    ZodIssueCode: d,\n    quotelessJson: ha,\n    ZodError: V\n});\nconst Kr = /^0x[0-9a-f]+$/i, en = /^\\d+$/, io = p.string().nonempty(\"The short string cannot be empty\").max(31, \"The short string cannot exceed 31 characters\").refine((t)=>!Kr.test(t), \"The shortString should not be a hex string\").refine((t)=>!en.test(t), \"The shortString should not be an integer string\"), _e = p.union([\n    p.string().regex(Kr, \"Only hex, integers and bigint are supported in calldata\"),\n    p.string().regex(en, \"Only hex, integers and bigint are supported in calldata\"),\n    io,\n    p.number().int(\"Only hex, integers and bigint are supported in calldata\"),\n    p.bigint()\n]), tn = p.object({\n    contractAddress: p.string(),\n    entrypoint: p.string(),\n    calldata: p.array(_e.or(p.array(_e))).optional()\n}), co = p.array(tn).nonempty(), uo = p.object({\n    types: p.record(p.array(p.union([\n        p.object({\n            name: p.string(),\n            type: p.string()\n        }),\n        p.object({\n            name: p.string(),\n            type: p.literal(\"merkletree\"),\n            contains: p.string()\n        })\n    ]))),\n    primaryType: p.string(),\n    domain: p.record(p.unknown()),\n    message: p.record(p.unknown())\n}), nr = {\n    enable: p.tuple([\n        p.object({\n            starknetVersion: p.union([\n                p.literal(\"v4\"),\n                p.literal(\"v5\")\n            ]).optional()\n        }).optional()\n    ]).or(p.tuple([])),\n    addStarknetChain: p.tuple([\n        p.object({\n            id: p.string(),\n            chainId: p.string(),\n            chainName: p.string(),\n            rpcUrls: p.array(p.string()).optional(),\n            nativeCurrency: p.object({\n                name: p.string(),\n                symbol: p.string(),\n                decimals: p.number()\n            }).optional(),\n            blockExplorerUrls: p.array(p.string()).optional()\n        })\n    ]),\n    switchStarknetChain: p.tuple([\n        p.object({\n            chainId: p.string()\n        })\n    ]),\n    watchAsset: p.tuple([\n        p.object({\n            type: p.literal(\"ERC20\"),\n            options: p.object({\n                address: p.string(),\n                symbol: p.string().optional(),\n                decimals: p.number().optional(),\n                image: p.string().optional(),\n                name: p.string().optional()\n            })\n        })\n    ]),\n    execute: p.tuple([\n        co.or(tn),\n        p.object({\n            nonce: _e.optional(),\n            maxFee: _e.optional(),\n            version: _e.optional()\n        }).optional()\n    ]),\n    signMessage: p.tuple([\n        uo\n    ])\n}, j = ts.create({\n    isServer: !1,\n    allowOutsideOfServer: !0\n});\nlet Tt = cr, Et = \"\", rn = \"\";\nconst ve = ({ width: t = 775, height: e = 385, origin: r, location: n, atLeftBottom: s = !1 })=>{\n    const a = window?.outerWidth ?? window?.innerWidth ?? window?.screen.width ?? 0, o = window?.outerHeight ?? window?.innerHeight ?? window?.screen.height ?? 0, i = window?.screenLeft ?? window?.screenX ?? 0, c = window?.screenTop ?? window?.screenY ?? 0, u = s ? 0 : i + a / 2 - t / 2, l = s ? window.screen.availHeight + 10 : c + o / 2 - e / 2;\n    Tt = r ?? Tt, Et = n ?? Et, rn = `width=${t},height=${e},top=${l},left=${u},toolbar=no,menubar=no,scrollbars=no,location=no,status=no,popup=1`;\n};\nj.router({\n    authorize: j.procedure.output(p.boolean()).mutation(async ()=>!0),\n    connect: j.procedure.mutation(async ()=>\"\"),\n    enable: j.procedure.output(p.string()).mutation(async ()=>\"\"),\n    execute: j.procedure.input(nr.execute).output(p.string()).mutation(async ()=>\"\"),\n    signMessage: j.procedure.input(nr.signMessage).output(p.string().array()).mutation(async ()=>[]),\n    getLoginStatus: j.procedure.output(p.object({\n        isLoggedIn: p.boolean(),\n        hasSession: p.boolean().optional(),\n        isPreauthorized: p.boolean().optional()\n    })).mutation(async ()=>({\n            isLoggedIn: !0\n        })),\n    addStarknetChain: j.procedure.mutation((t)=>{\n        throw Error(\"not implemented\");\n    }),\n    switchStarknetChain: j.procedure.mutation((t)=>{\n        throw Error(\"not implemented\");\n    }),\n    watchAsset: j.procedure.mutation((t)=>{\n        throw Error(\"not implemented\");\n    }),\n    updateModal: j.procedure.subscription(async ()=>{})\n});\nconst yt = ({ iframe: t })=>$n({\n        links: [\n            In({\n                enabled: (e)=> false ||  true && e.direction === \"down\" && e.result instanceof Error\n            }),\n            xn({\n                condition (e) {\n                    if (!t && e.type === \"subscription\") throw new Error(\"subscription is not supported without an iframe window\");\n                    return !!t;\n                },\n                true: bt.windowLink({\n                    window,\n                    postWindow: t,\n                    postOrigin: \"*\"\n                }),\n                false: bt.popupLink({\n                    listenWindow: window,\n                    createPopup: ()=>{\n                        let e = null;\n                        const r = document.createElement(\"button\");\n                        if (r.style.display = \"none\", r.addEventListener(\"click\", ()=>{\n                            e = window.open(`${Tt}${Et}`, \"popup\", rn);\n                        }), r.click(), (async ()=>{\n                            for(; !e;)await new Promise((n)=>setTimeout(n, 100));\n                        })(), !e) throw new Error(\"Could not open popup\");\n                        return e;\n                    },\n                    postOrigin: \"*\"\n                })\n            })\n        ]\n    }), lo = 385, fo = 775, po = 385, ho = 440, mo = 886, yo = 562;\nclass sr {\n    async getPubKey() {\n        throw new Error(\"Method not implemented\");\n    }\n    async signMessage() {\n        throw new Error(\"Method not implemented\");\n    }\n    async signTransaction() {\n        throw new Error(\"Method not implemented\");\n    }\n    async signDeclareTransaction() {\n        throw new Error(\"Method not implemented\");\n    }\n    async signDeployAccountTransaction() {\n        throw new Error(\"Method not implemented\");\n    }\n}\nclass go extends starknet__WEBPACK_IMPORTED_MODULE_1__.Account {\n    constructor(r, n, s){\n        super(r, n, new sr());\n        ae(this, \"signer\", new sr());\n        ae(this, \"execute\", async (r, n, s = {})=>{\n            try {\n                ve({\n                    width: lo,\n                    height: fo,\n                    location: \"/review\"\n                }), Array.isArray(r) && r[0] && r[0].entrypoint === \"use_offchain_session\" && ve({\n                    width: 1,\n                    height: 1,\n                    location: \"/executeSessionTx\",\n                    atLeftBottom: !0\n                });\n                const a = n === void 0 || Array.isArray(n) ? s : n;\n                return {\n                    transaction_hash: await this.proxyLink.execute.mutate([\n                        r,\n                        a\n                    ])\n                };\n            } catch (a) {\n                throw a instanceof Error ? new Error(a.message) : new Error(\"Error while execute a transaction\");\n            }\n        });\n        ae(this, \"signMessage\", async (r)=>{\n            try {\n                return ve({\n                    width: po,\n                    height: ho,\n                    location: \"/signMessage\"\n                }), await this.proxyLink.signMessage.mutate([\n                    r\n                ]);\n            } catch (n) {\n                throw n instanceof Error ? new Error(n.message) : new Error(\"Error while sign a message\");\n            }\n        });\n        this.address = n, this.proxyLink = s;\n    }\n}\nconst je = [], bo = (t, e, r)=>{\n    const n = {\n        ...t,\n        isConnected: !1,\n        provider: e,\n        getLoginStatus: ()=>r.getLoginStatus.mutate(),\n        async request (s) {\n            switch(s.type){\n                case \"wallet_addStarknetChain\":\n                    return await r.addStarknetChain.mutate();\n                case \"wallet_switchStarknetChain\":\n                    return await r.switchStarknetChain.mutate();\n                case \"wallet_watchAsset\":\n                    return await r.watchAsset.mutate();\n                default:\n                    throw new Error(\"not implemented\");\n            }\n        },\n        async enable (s) {\n            if (s?.starknetVersion !== \"v4\") throw Error(\"not implemented\");\n            try {\n                ve({\n                    width: mo,\n                    height: yo,\n                    location: \"/interstitialLogin\"\n                });\n                const o = await r.enable.mutate();\n                return await wo(n, e, r, o), [\n                    o\n                ];\n            } catch (a) {\n                throw a instanceof Error ? new Error(a.message) : new Error(\"Unknow error on enable wallet\");\n            }\n        },\n        async isPreauthorized () {\n            const { isLoggedIn: s, isPreauthorized: a } = await r.getLoginStatus.mutate();\n            return !!(s && a);\n        },\n        on: (s, a)=>{\n            if (s === \"accountsChanged\") je.push({\n                type: s,\n                handler: a\n            });\n            else if (s === \"networkChanged\") je.push({\n                type: s,\n                handler: a\n            });\n            else throw new Error(`Unknwown event: ${s}`);\n        },\n        off: (s, a)=>{\n            if (s !== \"accountsChanged\" && s !== \"networkChanged\") throw new Error(`Unknwown event: ${s}`);\n            const o = je.findIndex((i)=>i.type === s && i.handler === a);\n            o >= 0 && je.splice(o, 1);\n        }\n    };\n    return n;\n};\nasync function wo(t, e, r, n) {\n    if (t.isConnected) return t;\n    const a = {\n        isConnected: !0,\n        chainId: await e.getChainId(),\n        selectedAddress: n,\n        account: new go(e, n, r),\n        provider: e\n    };\n    return Object.assign(t, a);\n}\nconst _o = (t)=>{\n    t.style.position = \"fixed\", t.style.top = \"50%\", t.style.left = \"50%\", t.style.transform = \"translate(-50%, -50%)\", t.style.width = \"380px\", t.style.height = \"420px\", t.style.border = \"none\", t.style.borderRadius = \"40px\", t.style.boxShadow = \"0px 4px 20px rgba(0, 0, 0, 0.5)\";\n    const e = document.createElement(\"div\");\n    return e.style.display = \"none\", e.style.position = \"fixed\", e.style.top = \"0\", e.style.left = \"0\", e.style.right = \"0\", e.style.bottom = \"0\", e.style.backgroundColor = \"rgba(0, 0, 0, 0.5)\", e.style.zIndex = \"99999\", e.style.backdropFilter = \"blur(4px)\", e.appendChild(t), e;\n}, vo = (t)=>{\n    t.style.display = \"block\";\n}, xo = (t)=>{\n    t.style.display = \"none\";\n}, To = (t, e)=>{\n    t.style.height = `min(${e || 420}px, 100%)`;\n}, Eo = async (t, e)=>{\n    const r = new URL(t);\n    r.pathname = \"/iframes/comms\", t = r.toString();\n    const n = document.createElement(\"iframe\");\n    n.src = t, n.loading = \"eager\", n.sandbox.add(\"allow-scripts\", \"allow-same-origin\", \"allow-forms\", \"allow-top-navigation\", \"allow-popups\"), n.allow = \"clipboard-write\", n.id = \"argent-webwallet-iframe\";\n    const s = _o(n);\n    return s.style.display = e ? \"block\" : \"none\", s.id = \"argent-webwallet-modal\", window.document.body.appendChild(s), await new Promise((a, o)=>{\n        const i = setTimeout(()=>o(new Error(\"Timeout while loading an iframe\")), 2e4);\n        n.addEventListener(\"load\", async ()=>{\n            clearTimeout(i), a();\n        });\n    }), {\n        iframe: n,\n        modal: s\n    };\n};\nfunction ko(t) {\n    const e = (0,_publicRcpNodes_be041588_js__WEBPACK_IMPORTED_MODULE_2__.g)();\n    try {\n        const { origin: r } = new URL(t);\n        if (r.includes(\"localhost\") || r.includes(\"127.0.0.1\") || r.includes(\"hydrogen\")) return e.testnet;\n        if (r.includes(\"staging\") || r.includes(\"argent.xyz\")) return e.mainnet;\n    } catch  {\n        console.warn(\"Could not determine rpc nodeUrl from target URL, defaulting to mainnet\");\n    }\n    return e.mainnet;\n}\nconst gt = async (t, e, r, n)=>{\n    const s =  false ? 0 : void 0;\n    if (!s) throw new Error(\"window is not defined\");\n    const a = ko(t), o = r ?? new starknet__WEBPACK_IMPORTED_MODULE_1__.RpcProvider({\n        nodeUrl: a\n    }), i = bo({\n        host: s.location.origin,\n        id: \"argentWebWallet\",\n        icon: \"https://www.argent.xyz/favicon.ico\",\n        name: \"Argent Web Wallet\",\n        version: \"1.0.0\"\n    }, o, e);\n    if (n) {\n        const { iframe: c, modal: u } = n;\n        e.updateModal.subscribe.apply(null, [\n            void 0,\n            {\n                onData (l) {\n                    switch(l.action){\n                        case \"show\":\n                            vo(u);\n                            break;\n                        case \"hide\":\n                            xo(u);\n                            break;\n                        case \"updateHeight\":\n                            To(c, l.height);\n                    }\n                }\n            }\n        ]);\n    }\n    return i;\n}, ce = starknet__WEBPACK_IMPORTED_MODULE_1__.constants.NetworkName, Co = ce.SN_SEPOLIA;\nfunction Ro(t) {\n    try {\n        const { origin: e } = new URL(t);\n        if (e.includes(\"localhost\") || e.includes(\"127.0.0.1\")) return Co;\n        if (e.includes(\"hydrogen\")) return ce.SN_SEPOLIA;\n        if (e.includes(\"staging\")) return ce.SN_MAIN;\n        if (e.includes(\"dev\")) return ce.SN_SEPOLIA;\n        if (e.includes(\"argent.xyz\")) return ce.SN_MAIN;\n    } catch  {\n        console.warn(\"Could not determine network from target URL, defaulting to mainnet-alpha\");\n    }\n    return ce.SN_MAIN;\n}\nconst ar = \"allowed-dapps\", Oo = async (t)=>{\n    const e = t === starknet__WEBPACK_IMPORTED_MODULE_1__.constants.NetworkName.SN_MAIN ? mn : hn;\n    try {\n        const n = await (await caches.open(ar)).match(e);\n        if (n) {\n            const u = parseInt(n.headers.get(\"X-Cache-Timestamp\"), 10);\n            if ((/* @__PURE__ */ new Date().getTime() - u) / (1e3 * 60 * 60) < 24) return n.json();\n        }\n        const s = await fetch(e), a = new Headers(s.headers);\n        a.set(\"X-Cache-Timestamp\", /* @__PURE__ */ new Date().getTime().toString());\n        const o = await s.json(), i = new Response(JSON.stringify(o), {\n            status: s.status,\n            statusText: s.statusText,\n            headers: a\n        });\n        return await (await caches.open(ar)).put(e, i), o;\n    } catch (r) {\n        throw new Error(r);\n    }\n}, Po = async (t)=>new Promise((e)=>{\n        if (!t) return e(!1);\n        try {\n            navigator.webkitTemporaryStorage.queryUsageAndQuota((n, s)=>{\n                e(Math.round(s / (1024 * 1024)) < Math.round((performance?.memory?.jsHeapSizeLimit ?? 1073741824) / (1024 * 1024)) * 2);\n            }, ()=>e(!1));\n        } catch  {\n            e(!1);\n        }\n    }), So = async (t, e)=>{\n    const { userAgent: r } = navigator, n = !!(navigator.vendor && navigator.vendor.indexOf(\"Google\") === 0 && navigator.brave === void 0 && !r.match(/Edg/) && !r.match(/OPR/)), s = await Po(n);\n    if (!n || s) {\n        const i = yt({});\n        return await gt(t, i, e, void 0);\n    }\n    const a = Ro(t), { allowedDapps: o } = await Oo(a);\n    if (o.includes(window.location.hostname)) {\n        const i = \"argent-webwallet-modal\", c = \"argent-webwallet-iframe\", u = document.getElementById(i), l = document.getElementById(c);\n        u && u && l && (u.remove(), l.remove());\n        const { iframe: f, modal: m } = await Eo(t, !1), v = yt({\n            iframe: f.contentWindow ?? void 0\n        });\n        return await v.authorize.mutate(), await gt(t, v, e, {\n            modal: m,\n            iframe: f\n        });\n    } else {\n        const i = yt({});\n        return await gt(t, i, e, void 0);\n    }\n};\nlet M = null;\nclass jo extends _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.C {\n    constructor(r = {}){\n        super();\n        ae(this, \"_wallet\", null);\n        ae(this, \"_options\");\n        this._options = r;\n    }\n    available() {\n        return !0;\n    }\n    async ready() {\n        return M ? (this._wallet = M, this._wallet.isPreauthorized()) : (this._wallet = null, !1);\n    }\n    get id() {\n        return this._wallet = M, this._wallet?.id || \"argentWebWallet\";\n    }\n    get name() {\n        return this._wallet = M, this._wallet?.name || \"Argent Web Wallet\";\n    }\n    get icon() {\n        return {\n            light: Ut,\n            dark: Ut\n        };\n    }\n    get wallet() {\n        if (!this._wallet) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.a();\n        return this._wallet;\n    }\n    get title() {\n        return \"Email\";\n    }\n    get subtitle() {\n        return \"Powered by Argent\";\n    }\n    async connect() {\n        if (await this.ensureWallet(), !this._wallet) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.b();\n        try {\n            await this._wallet.enable({\n                starknetVersion: \"v4\"\n            });\n        } catch (s) {\n            throw console.log(s), new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.U();\n        }\n        if (!this._wallet.isConnected) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.U();\n        const r = this._wallet.account, n = await this.chainId();\n        return {\n            account: r.address,\n            chainId: n\n        };\n    }\n    async disconnect() {\n        if (!this.available() && !this._wallet) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.b();\n        if (!this._wallet?.isConnected) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.d();\n        M = null, this._wallet = M, (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.r)();\n    }\n    async account() {\n        if (this._wallet = M, !this._wallet || !this._wallet.account) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.a();\n        return this._wallet.account;\n    }\n    async chainId() {\n        if (!this._wallet || !this.wallet.account || !this._wallet.provider) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.a();\n        const r = await this._wallet.provider.getChainId();\n        return BigInt(r);\n    }\n    async initEventListener(r) {\n        if (this._wallet = M, !this._wallet) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.a();\n        this._wallet.on(\"accountsChanged\", r);\n    }\n    async removeEventListener(r) {\n        if (this._wallet = M, !this._wallet) throw new _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.a();\n        this._wallet.off(\"accountsChanged\", r), M = null, this._wallet = null;\n    }\n    async ensureWallet() {\n        const r = this._options.url || cr, n = this._options.provider;\n        ve({\n            origin: r,\n            location: \"/interstitialLogin\"\n        }), M = await So(r, n) ?? null, this._wallet = M;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknetkit/dist/index-c4ef0430.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknetkit/dist/lastConnected-b964dc30.js":
/*!*****************************************************************!*\
  !*** ./node_modules/starknetkit/dist/lastConnected-b964dc30.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ T),\n/* harmony export */   U: () => (/* binding */ A),\n/* harmony export */   a: () => (/* binding */ P),\n/* harmony export */   b: () => (/* binding */ U),\n/* harmony export */   c: () => (/* binding */ F),\n/* harmony export */   d: () => (/* binding */ S),\n/* harmony export */   e: () => (/* binding */ L),\n/* harmony export */   g: () => (/* binding */ R),\n/* harmony export */   r: () => (/* binding */ q),\n/* harmony export */   s: () => (/* binding */ W)\n/* harmony export */ });\nvar x = Object.defineProperty;\nvar O = (o, f, s)=>f in o ? x(o, f, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : o[f] = s;\nvar h = (o, f, s)=>(O(o, typeof f != \"symbol\" ? f + \"\" : f, s), s);\nclass P extends Error {\n    constructor(){\n        super(...arguments);\n        h(this, \"name\", \"ConnectorNotConnectedError\");\n        h(this, \"message\", \"Connector not connected\");\n    }\n}\nclass U extends Error {\n    constructor(){\n        super(...arguments);\n        h(this, \"name\", \"ConnectorNotFoundError\");\n        h(this, \"message\", \"Connector not found\");\n    }\n}\nclass A extends Error {\n    constructor(){\n        super(...arguments);\n        h(this, \"name\", \"UserRejectedRequestError\");\n        h(this, \"message\", \"User rejected request\");\n    }\n}\nclass S extends Error {\n    constructor(){\n        super(...arguments);\n        h(this, \"name\", \"UserNotConnectedError\");\n        h(this, \"message\", \"User not connected\");\n    }\n}\nvar F = typeof globalThis < \"u\" ? globalThis :  false ? 0 : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction L(o) {\n    return o && o.__esModule && Object.prototype.hasOwnProperty.call(o, \"default\") ? o.default : o;\n}\nfunction R(o) {\n    if (o.__esModule) return o;\n    var f = o.default;\n    if (typeof f == \"function\") {\n        var s = function v() {\n            if (this instanceof v) {\n                var y = [\n                    null\n                ];\n                y.push.apply(y, arguments);\n                var E = Function.bind.apply(f, y);\n                return new E();\n            }\n            return f.apply(this, arguments);\n        };\n        s.prototype = f.prototype;\n    } else s = {};\n    return Object.defineProperty(s, \"__esModule\", {\n        value: !0\n    }), Object.keys(o).forEach(function(v) {\n        var y = Object.getOwnPropertyDescriptor(o, v);\n        Object.defineProperty(s, v, y.get ? y : {\n            enumerable: !0,\n            get: function() {\n                return o[v];\n            }\n        });\n    }), s;\n}\nvar C = {\n    exports: {}\n};\n(function(o) {\n    var f = Object.prototype.hasOwnProperty, s = \"~\";\n    function v() {}\n    Object.create && (v.prototype = /* @__PURE__ */ Object.create(null), new v().__proto__ || (s = !1));\n    function y(c, t, n) {\n        this.fn = c, this.context = t, this.once = n || !1;\n    }\n    function E(c, t, n, r, p) {\n        if (typeof n != \"function\") throw new TypeError(\"The listener must be a function\");\n        var u = new y(n, r || c, p), a = s ? s + t : t;\n        return c._events[a] ? c._events[a].fn ? c._events[a] = [\n            c._events[a],\n            u\n        ] : c._events[a].push(u) : (c._events[a] = u, c._eventsCount++), c;\n    }\n    function b(c, t) {\n        --c._eventsCount === 0 ? c._events = new v() : delete c._events[t];\n    }\n    function l() {\n        this._events = new v(), this._eventsCount = 0;\n    }\n    l.prototype.eventNames = function() {\n        var t = [], n, r;\n        if (this._eventsCount === 0) return t;\n        for(r in n = this._events)f.call(n, r) && t.push(s ? r.slice(1) : r);\n        return Object.getOwnPropertySymbols ? t.concat(Object.getOwnPropertySymbols(n)) : t;\n    }, l.prototype.listeners = function(t) {\n        var n = s ? s + t : t, r = this._events[n];\n        if (!r) return [];\n        if (r.fn) return [\n            r.fn\n        ];\n        for(var p = 0, u = r.length, a = new Array(u); p < u; p++)a[p] = r[p].fn;\n        return a;\n    }, l.prototype.listenerCount = function(t) {\n        var n = s ? s + t : t, r = this._events[n];\n        return r ? r.fn ? 1 : r.length : 0;\n    }, l.prototype.emit = function(t, n, r, p, u, a) {\n        var d = s ? s + t : t;\n        if (!this._events[d]) return !1;\n        var e = this._events[d], m = arguments.length, _, i;\n        if (e.fn) {\n            switch(e.once && this.removeListener(t, e.fn, void 0, !0), m){\n                case 1:\n                    return e.fn.call(e.context), !0;\n                case 2:\n                    return e.fn.call(e.context, n), !0;\n                case 3:\n                    return e.fn.call(e.context, n, r), !0;\n                case 4:\n                    return e.fn.call(e.context, n, r, p), !0;\n                case 5:\n                    return e.fn.call(e.context, n, r, p, u), !0;\n                case 6:\n                    return e.fn.call(e.context, n, r, p, u, a), !0;\n            }\n            for(i = 1, _ = new Array(m - 1); i < m; i++)_[i - 1] = arguments[i];\n            e.fn.apply(e.context, _);\n        } else {\n            var w = e.length, g;\n            for(i = 0; i < w; i++)switch(e[i].once && this.removeListener(t, e[i].fn, void 0, !0), m){\n                case 1:\n                    e[i].fn.call(e[i].context);\n                    break;\n                case 2:\n                    e[i].fn.call(e[i].context, n);\n                    break;\n                case 3:\n                    e[i].fn.call(e[i].context, n, r);\n                    break;\n                case 4:\n                    e[i].fn.call(e[i].context, n, r, p);\n                    break;\n                default:\n                    if (!_) for(g = 1, _ = new Array(m - 1); g < m; g++)_[g - 1] = arguments[g];\n                    e[i].fn.apply(e[i].context, _);\n            }\n        }\n        return !0;\n    }, l.prototype.on = function(t, n, r) {\n        return E(this, t, n, r, !1);\n    }, l.prototype.once = function(t, n, r) {\n        return E(this, t, n, r, !0);\n    }, l.prototype.removeListener = function(t, n, r, p) {\n        var u = s ? s + t : t;\n        if (!this._events[u]) return this;\n        if (!n) return b(this, u), this;\n        var a = this._events[u];\n        if (a.fn) a.fn === n && (!p || a.once) && (!r || a.context === r) && b(this, u);\n        else {\n            for(var d = 0, e = [], m = a.length; d < m; d++)(a[d].fn !== n || p && !a[d].once || r && a[d].context !== r) && e.push(a[d]);\n            e.length ? this._events[u] = e.length === 1 ? e[0] : e : b(this, u);\n        }\n        return this;\n    }, l.prototype.removeAllListeners = function(t) {\n        var n;\n        return t ? (n = s ? s + t : t, this._events[n] && b(this, n)) : (this._events = new v(), this._eventsCount = 0), this;\n    }, l.prototype.off = l.prototype.removeListener, l.prototype.addListener = l.prototype.on, l.prefixed = s, l.EventEmitter = l, o.exports = l;\n})(C);\nvar j = C.exports;\nconst N = /* @__PURE__ */ L(j);\nclass T extends N {\n}\nconst W = (o)=>{\n    localStorage.setItem(\"starknetLastConnectedWallet\", o);\n}, q = ()=>{\n    localStorage.removeItem(\"starknetLastConnectedWallet\");\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknetkit/dist/lastConnected-b964dc30.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknetkit/dist/publicRcpNodes-be041588.js":
/*!******************************************************************!*\
  !*** ./node_modules/starknetkit/dist/publicRcpNodes-be041588.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ s)\n/* harmony export */ });\nconst a = {\n    mainnet: \"https://starknet-mainnet.public.blastapi.io\",\n    testnet: \"https://starknet-sepolia.public.blastapi.io\"\n}, e = {\n    mainnet: \"https://rpc.starknet.lava.build\",\n    testnet: \"https://rpc.starknet-sepolia.lava.build\"\n}, t = [\n    a,\n    e\n];\nfunction s() {\n    const n = Math.floor(Math.random() * t.length);\n    return t[n];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXRraXQvZGlzdC9wdWJsaWNSY3BOb2Rlcy1iZTA0MTU4OC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsSUFBSTtJQUNSQyxTQUFTO0lBQ1RDLFNBQVM7QUFDWCxHQUFHQyxJQUFJO0lBQ0xGLFNBQVM7SUFDVEMsU0FBUztBQUNYLEdBQUdFLElBQUk7SUFBQ0o7SUFBR0c7Q0FBRTtBQUNiLFNBQVNFO0lBQ1AsTUFBTUMsSUFBSUMsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxNQUFNLEtBQUtMLEVBQUVNLE1BQU07SUFDN0MsT0FBT04sQ0FBQyxDQUFDRSxFQUFFO0FBQ2I7QUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRhcHAvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXRraXQvZGlzdC9wdWJsaWNSY3BOb2Rlcy1iZTA0MTU4OC5qcz85NjdlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGEgPSB7XG4gIG1haW5uZXQ6IFwiaHR0cHM6Ly9zdGFya25ldC1tYWlubmV0LnB1YmxpYy5ibGFzdGFwaS5pb1wiLFxuICB0ZXN0bmV0OiBcImh0dHBzOi8vc3RhcmtuZXQtc2Vwb2xpYS5wdWJsaWMuYmxhc3RhcGkuaW9cIlxufSwgZSA9IHtcbiAgbWFpbm5ldDogXCJodHRwczovL3JwYy5zdGFya25ldC5sYXZhLmJ1aWxkXCIsXG4gIHRlc3RuZXQ6IFwiaHR0cHM6Ly9ycGMuc3RhcmtuZXQtc2Vwb2xpYS5sYXZhLmJ1aWxkXCJcbn0sIHQgPSBbYSwgZV07XG5mdW5jdGlvbiBzKCkge1xuICBjb25zdCBuID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdC5sZW5ndGgpO1xuICByZXR1cm4gdFtuXTtcbn1cbmV4cG9ydCB7XG4gIHMgYXMgZ1xufTtcbiJdLCJuYW1lcyI6WyJhIiwibWFpbm5ldCIsInRlc3RuZXQiLCJlIiwidCIsInMiLCJuIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwiZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknetkit/dist/publicRcpNodes-be041588.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknetkit/dist/webwalletConnector.js":
/*!*************************************************************!*\
  !*** ./node_modules/starknetkit/dist/webwalletConnector.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebWalletConnector: () => (/* reexport safe */ _index_c4ef0430_js__WEBPACK_IMPORTED_MODULE_1__.W)\n/* harmony export */ });\n/* harmony import */ var _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lastConnected-b964dc30.js */ \"(ssr)/./node_modules/starknetkit/dist/lastConnected-b964dc30.js\");\n/* harmony import */ var _index_c4ef0430_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-c4ef0430.js */ \"(ssr)/./node_modules/starknetkit/dist/index-c4ef0430.js\");\n/* harmony import */ var starknet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! starknet */ \"(ssr)/./node_modules/starknet/dist/index.mjs\");\n/* harmony import */ var _publicRcpNodes_be041588_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./publicRcpNodes-be041588.js */ \"(ssr)/./node_modules/starknetkit/dist/publicRcpNodes-be041588.js\");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXRraXQvZGlzdC93ZWJ3YWxsZXRDb25uZWN0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBcUM7QUFDUTtBQUMzQjtBQUNvQjtBQUdwQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRhcHAvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXRraXQvZGlzdC93ZWJ3YWxsZXRDb25uZWN0b3IuanM/YzA2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL2xhc3RDb25uZWN0ZWQtYjk2NGRjMzAuanNcIjtcbmltcG9ydCB7IFcgYXMgcCB9IGZyb20gXCIuL2luZGV4LWM0ZWYwNDMwLmpzXCI7XG5pbXBvcnQgXCJzdGFya25ldFwiO1xuaW1wb3J0IFwiLi9wdWJsaWNSY3BOb2Rlcy1iZTA0MTU4OC5qc1wiO1xuZXhwb3J0IHtcbiAgcCBhcyBXZWJXYWxsZXRDb25uZWN0b3Jcbn07XG4iXSwibmFtZXMiOlsiVyIsInAiLCJXZWJXYWxsZXRDb25uZWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknetkit/dist/webwalletConnector.js\n");

/***/ })

};
;