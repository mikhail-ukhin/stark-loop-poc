"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-blockies";
exports.ids = ["vendor-chunks/react-blockies"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-blockies/dist/main.js":
/*!**************************************************!*\
  !*** ./node_modules/react-blockies/dist/main.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar _extends = Object.assign || function(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i];\n        for(var key in source){\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n};\nvar _createClass = function() {\n    function defineProperties(target, props) {\n        for(var i = 0; i < props.length; i++){\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }\n    return function(Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n    };\n}();\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar Identicon = function(_Component) {\n    _inherits(Identicon, _Component);\n    function Identicon(props) {\n        _classCallCheck(this, Identicon);\n        var _this = _possibleConstructorReturn(this, (Identicon.__proto__ || Object.getPrototypeOf(Identicon)).call(this, props));\n        _this.generateIdenticon = _this.generateIdenticon.bind(_this);\n        return _this;\n    }\n    _createClass(Identicon, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.generateIdenticon(_extends({}, this.props));\n            }\n        },\n        {\n            key: \"componentWillUpdate\",\n            value: function componentWillUpdate(nextProps) {\n                if (!this.isEquivalent(this.props, nextProps)) this.generateIdenticon(_extends({}, nextProps));\n            }\n        },\n        {\n            key: \"isEquivalent\",\n            value: function isEquivalent(prevProps, nextProps) {\n                var aProps = Object.getOwnPropertyNames(prevProps);\n                var bProps = Object.getOwnPropertyNames(nextProps);\n                if (aProps.length != bProps.length) {\n                    return false;\n                }\n                for(var i = 0; i < aProps.length; i++){\n                    var propName = aProps[i];\n                    if (prevProps[propName] !== nextProps[propName]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        },\n        {\n            key: \"generateIdenticon\",\n            value: function generateIdenticon(options) {\n                // NOTE --  Majority of this code is referenced from: https://github.com/alexvandesande/blockies\n                //          Mostly to ensure congruence to Ethereum Mist's Identicons\n                // The random number is a js implementation of the Xorshift PRNG\n                var randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n                function seedrand(seed) {\n                    for(var i = 0; i < randseed.length; i++){\n                        randseed[i] = 0;\n                    }\n                    for(var _i = 0; _i < seed.length; _i++){\n                        randseed[_i % 4] = (randseed[_i % 4] << 5) - randseed[_i % 4] + seed.charCodeAt(_i);\n                    }\n                }\n                function rand() {\n                    // based on Java's String.hashCode(), expanded to 4 32bit values\n                    var t = randseed[0] ^ randseed[0] << 11;\n                    randseed[0] = randseed[1];\n                    randseed[1] = randseed[2];\n                    randseed[2] = randseed[3];\n                    randseed[3] = randseed[3] ^ randseed[3] >> 19 ^ t ^ t >> 8;\n                    return (randseed[3] >>> 0) / (1 << 31 >>> 0);\n                }\n                function createColor() {\n                    // saturation is the whole color spectrum\n                    var h = Math.floor(rand() * 360);\n                    // saturation goes from 40 to 100, it avoids greyish colors\n                    var s = rand() * 60 + 40 + \"%\";\n                    // lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n                    var l = (rand() + rand() + rand() + rand()) * 25 + \"%\";\n                    var color = \"hsl(\" + h + \",\" + s + \",\" + l + \")\";\n                    return color;\n                }\n                function createImageData(size) {\n                    var width = size; // Only support square icons for now\n                    var height = size;\n                    var dataWidth = Math.ceil(width / 2);\n                    var mirrorWidth = width - dataWidth;\n                    var data = [];\n                    for(var y = 0; y < height; y++){\n                        var row = [];\n                        for(var x = 0; x < dataWidth; x++){\n                            // this makes foreground and background color to have a 43% (1/2.3) probability\n                            // spot color has 13% chance\n                            row[x] = Math.floor(rand() * 2.3);\n                        }\n                        var r = row.slice(0, mirrorWidth);\n                        r.reverse();\n                        row = row.concat(r);\n                        for(var i = 0; i < row.length; i++){\n                            data.push(row[i]);\n                        }\n                    }\n                    return data;\n                }\n                function setCanvas(identicon, imageData, color, scale, bgcolor, spotcolor) {\n                    var width = Math.sqrt(imageData.length);\n                    var size = width * scale;\n                    identicon.width = size;\n                    identicon.style.width = size + \"px\";\n                    identicon.height = size;\n                    identicon.style.height = size + \"px\";\n                    var cc = identicon.getContext(\"2d\");\n                    cc.fillStyle = bgcolor;\n                    cc.fillRect(0, 0, identicon.width, identicon.height);\n                    cc.fillStyle = color;\n                    for(var i = 0; i < imageData.length; i++){\n                        // if data is 2, choose spot color, if 1 choose foreground\n                        cc.fillStyle = imageData[i] === 1 ? color : spotcolor;\n                        // if data is 0, leave the background\n                        if (imageData[i]) {\n                            var row = Math.floor(i / width);\n                            var col = i % width;\n                            cc.fillRect(col * scale, row * scale, scale, scale);\n                        }\n                    }\n                }\n                var opts = options || {};\n                var size = opts.size || 8;\n                var scale = opts.scale || 4;\n                var seed = opts.seed || Math.floor(Math.random() * Math.pow(10, 16)).toString(16);\n                seedrand(seed);\n                var color = opts.color || createColor();\n                var bgcolor = opts.bgColor || createColor();\n                var spotcolor = opts.spotColor || createColor();\n                var imageData = createImageData(size);\n                var canvas = setCanvas(this.identicon, imageData, color, scale, bgcolor, spotcolor);\n                return canvas;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this2 = this;\n                return _react2.default.createElement(\"canvas\", {\n                    ref: function ref(identicon) {\n                        _this2.identicon = identicon;\n                    },\n                    className: this.props.className\n                });\n            }\n        }\n    ]);\n    return Identicon;\n}(_react.Component);\nexports[\"default\"] = Identicon;\nIdenticon.defaultProps = {\n    className: \"identicon\"\n};\nIdenticon.propTypes = {\n    seed: _propTypes2.default.string.isRequired,\n    size: _propTypes2.default.number,\n    scale: _propTypes2.default.number,\n    color: _propTypes2.default.string,\n    bgColor: _propTypes2.default.string,\n    spotColor: _propTypes2.default.string\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-blockies/dist/main.js\n");

/***/ })

};
;